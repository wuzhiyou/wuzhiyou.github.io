[{"title":"【待】Linux文本三剑客","url":"/2025/02/22/Linux%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/","content":"前言：文本三剑客一般指grep sed  awk三款文本处理命令，虽都是处理文本命令但侧重点各不相同\n一、grep—查找文本行grep “搜索内容” 文件名  #查找文件中包含“搜索内容”的所有行\ngrep -i &quot;搜索内容&quot; 文件名 #忽略大小写查找 \ngrep -n &quot;搜索内容&quot; 文件名 #显示匹配行的行号\ngrep -r &quot;搜索内容&quot; 目录路径 #递归搜索目录及其子目录中的文件\ngrep -v &quot;排除内容&quot; 文件名 #排除掉包含“排除内容”的行\ngrep也支持正则表达式搜索，因此可以复杂匹配：\ngrep &quot;^开始&quot; 文件名   # 匹配以“开始”开头的行\ngrep &quot;结束$&quot; 文件名   # 匹配以“结束”结尾的行\n二、sed—编辑器sed &#39;s/旧文本/新文本&#39; 文件名 #替换文件中第一次出现的“旧文本”为“新文本”。\nsed &#39;s/旧文本/新文本/g&#39; 文件名 #替换所有出现的旧文本\nsed &#39;2d&#39; 文件名  #删除文件中第二行\nsed -i &#39;s/旧文本/新文本/g&#39;   #直接在文件中修改但不输出\nsed -n &#39;/匹配内容/p&#39; 文件名 #?\n三、awk—处理列awk &#39;&#123;prin $1,$2&#125;&#39; 文件名 #打印文件中第一列和第二列\nawk &#39;$2 &gt; 50 &#123;print $1, $2&#125;&#39; 文件名 #打印第二列值大于50的行\nawk &#39;&#123;sum += $3&#125; END &#123;print sum&#125;&#39; 文件名 #计算文件第三列的总和\nawk -F &#39;,&#39; &#39;&#123;print $1, $2&#125;&#39; 文件名  #?\nawk &#39;NR &gt;= 2 &amp;&amp; NR &lt;= 4 &#123;print $0&#125;&#39; 文件名 #打印第二到四行\n四、总结\n\n\n工具\n功能\n常见场景\n示例命令\n\n\n\ngrep\n文本搜索工具\n- 查找文件中包含特定内容的行 - 支持正则表达式进行模式匹配 - 快速查找日志文件中的关键字\ngrep &quot;error&quot; log.txt 查找 log.txt 文件中包含 error 的行。 grep -r &quot;pattern&quot; /var/log/ 递归查找 /var/log/ 目录下所有文件中包含 pattern 的行。\n\n\nsed\n流编辑器\n- 快速替换文本内容 - 删除、插入或替换文件中的行 - 对文件内容进行简单编辑处理\nsed &#39;s/foo/bar/&#39; file.txt 替换 file.txt 文件中第一次出现的 foo 为 bar。 sed &#39;2d&#39; file.txt 删除文件中的第二行。 sed -i &#39;s/foo/bar/g&#39; file.txt 直接在文件中替换所有的 foo 为 bar。\n\n\nawk\n强大的文本处理工具\n- 按列处理文本数据 - 复杂的模式匹配与处理 - 进行文本分析、统计、格式化输出\nawk &#39;&#123;print $1, $2&#125;&#39; file.txt 打印 file.txt 文件中的第 1 列和第 2 列。 awk &#39;$3 &gt; 50 &#123;print $1, $3&#125;&#39; file.txt 打印第三列大于 50 的行的第 1 列和第 3 列。\n\n\n\ngrep: 主要用于 查找文本，是最快速的文本查找工具，适合用来在大文件中搜索特定内容。\nsed: 用于 流编辑，更适合 文本替换 和 删除行，在对文件内容进行批量修改时非常有用。\nawk: 强大的 文本处理 工具，特别适合处理 结构化数据（例如按列处理），可用于文本分析、统计以及格式化输出。\n\n","categories":[],"tags":["Linux"]},{"title":"快速部署docker","url":"/2025/02/21/%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2docker/","content":"前言：之前初学的时候了解的比较多也比较杂，应用层面其实有更简单的方法。\n\n\nsudo apt-get update\nsudo apt install docker.io &#x2F;&#x2F;安装完成\nsudo systemctl start docker &#x2F;&#x2F;启动服务\ndocker container run hello-world &#x2F;&#x2F;验证成功\n","categories":[],"tags":["docker"]},{"title":"通过cron设置shell脚本自动化同步图文","url":"/2025/02/20/%E9%80%9A%E8%BF%87cron%E8%AE%BE%E7%BD%AEshell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E5%90%8C%E6%AD%A5%E5%8D%9A%E6%96%87/","content":"前言：由于此博客是hexo本地版，并且是在github page上再手动同步到阿里云的，今天下午没事捣鼓一下自动化\n一、安装cron定时服务sudo yum install cronie   &#x2F;&#x2F;安装\nsudo systemctl start crond &#x2F;&#x2F;启用\nsudo systemctl enable crond &#x2F;&#x2F;开机自启\n二、编辑配置git clone 仓库地址 .\t &#x2F;&#x2F;先clone下仓库地址 注意必须保证此文件夹为空 \ncrontab -e      &#x2F;&#x2F;进入编辑 是vim编辑器\n*/2 * * * * cd /www/wwwroot/www.wuzhiyou.top &amp;&amp; git pull origin master &amp;&amp; find . -mindepth 1 -maxdepth 1 ! -name &#39;.git&#39; -exec rm -rf &#123;&#125; +   \n\n1、cd &#x2F;www&#x2F;wwwroot&#x2F;www.wuzhiyou.top: 切换到目标目录。\n2、git pull origin master: 拉取仓库的最新更新，确保本地内容与远程仓库同步。\n3、find . -mindepth 1 -maxdepth 1 ! -name ‘.git’ -exec rm -rf {} +&#96;: 删除 .git 目录之外的文件和文件夹。\n\ncrontab -l    &#x2F;&#x2F;查看配置好的cron命令\n三、验证大功告成\n更正：太蠢了我简直，pull完再删除逻辑上就不对，删除完再pull更是没法pull到不更改的仓库。其实直接pull就好了QAQ..\n","categories":[],"tags":["linux"]},{"title":"解决宝塔面板地址无法访问","url":"/2025/02/20/%E8%A7%A3%E5%86%B3%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/","content":"前言：好久没用服务器了，打卡面板发现登陆不上去，遂排查故障。\n解决办法：sudo bt呼出指令信息关闭Basic Authentication认证即可\n\nBasicAuth（基本认证）是一种在 HTTP 协议层面实现的简单身份验证机制，旨在保护特定资源，确保只有经过授权的用户才能访问。不关闭认证无法访问的可能原因有：\n\n未提供凭证：如果在开启 BasicAuth 认证的情况下，你首次访问面板地址，客户端没有发送 Authorization 头信息，服务器会认为你未经过授权，返回 401 响应，要求你提供认证凭证。若你不输入正确的用户名和密码，后续请求依然会因缺少或提供错误的凭证而被拒绝。\n凭证错误：即使你输入了用户名和密码，但如果这些信息与服务器端存储的合法凭证不匹配，服务器也会判定认证失败，继续返回 401 响应，导致你无法访问面板地址对应的资源。\n配置问题：有可能 BasicAuth 认证的配置存在错误，比如密码文件路径错误、文件权限不足等，导致服务器无法正确读取或验证凭证，从而一直拒绝你的访问请求。\n\n\n","categories":[],"tags":["linux"]},{"title":"linux和Mysql快速复习","url":"/2025/02/18/linux%E5%92%8CMysql%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0/","content":"前言：背八股嗷呜\n一、Linux1、命令部分ls 列出目录 cd 改变目录 pwd 显示当前目录 cp复制 mv移动 rm 删除文件 rm -f强制删除 mkdir 创建目录\nrmdir 删除空目录\nchmod修改文件权限\ncat 显示文件内容\nfind &#x2F; -name “name.txt”查找文件名为…的文件\t\nps查看当前进程  top实时显示系统资源\nkill “id”终止进程\n网络命令ping ipconfig netstat（显示网络连接状态）\nuseradd 创建新用户\ngroupadd 创建新组\nfdisk分区工具\nmount挂载文件系统\numount卸载文件系统\ndf查看磁盘使用 du查看磁盘占用\napt&#x2F;yam install + 应用名 安装应用\napt&#x2F;yam remove +应用名 卸载应用\ndmesg查看系统启动日志\niptables 配置防火墙\n2、文件系统结构文件结构&#x2F; &#x2F;home &#x2F;etc\n&#x2F;bin 存放系统启动时必需的可执行文件\n&#x2F;etc 配置文件\n&#x2F;home 主目录\n&#x2F;var 可变数据如日志文件\n&#x2F;tmp 临时文件\n&#x2F;usr 共享只读数据\n文件权限只有r-读，写-w，执行-x。权限分为文件所有者，同组用户，其他用户。通过ls -l查看命令\n修改权限 chomd  +x file使文件可执行   修改文件所有者chown user:group file\n\n二、MySql1、基础事务（Transaction） 是数据库管理系统（DBMS）中的一个非常重要的概念。它表示一个完整的操作单元，包含一组操作，这些操作要么完全执行，要么完全不执行（原子性）。事务通常遵循ACID原理：原子性 一致性 隔离性 持久性\ncreate database 建表   create table建库 \ndrop table name删表\n四种数据类型 int varchar（可变字符） date（日期） text\ninsert into tablename 插入单条记录 \ndescribe name 查询表结构\nselect，where，order by，group by，join查询\n\n简单查询：SELECT * FROM tablename;\n条件查询：SELECT * FROM tablename WHERE column_name = &#39;value&#39;;\n排序查询：SELECT * FROM tablename ORDER BY column_name ASC|DESC;\n限制查询结果：SELECT * FROM tablename LIMIT 10; (显示前10条记录)\n\n\nAND、OR：多个条件结合使用，WHERE column1 = value1 AND column2 = value2;\nIN：检查值是否在一组值内，WHERE column IN (value1, value2, value3);\nBETWEEN：范围查询，WHERE column BETWEEN value1 AND value2;\nLIKE：模糊查询，WHERE column LIKE &#39;pattern&#39;;\n\nGROUP BY 和 HAVING：\n\n\nGROUP BY：按列分组，SELECT column, COUNT(*) FROM tablename GROUP BY column;\nHAVING：过滤分组结果，SELECT column, COUNT(*) FROM tablename GROUP BY column HAVING COUNT(*) &gt; 5;\njoin: 返回左表所有行，右表匹配行SELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.id;\n\n\ncreate index 创建索引(索引加速查询，但过多索引会影响插入和更新性能。)\nbegin Transition新建还原点，\ncommit Transition提交这个子begin tran 的还原点\nrollback Transition还原到上个还原点\n\n事务一般有以下几个阶段：\n\n开始事务（START TRANSACTION 或 BEGIN）：标志着一个事务的开始。\n执行操作：在事务中进行各种操作，如插入、更新、删除等。\n提交事务（COMMIT）：如果事务中的所有操作都成功，使用 COMMIT 提交事务，所有操作会被永久保存。\n回滚事务（ROLLBACK）：如果事务执行过程中出现错误或异常，使用 ROLLBACK 撤销所有已执行的操作，将数据库恢复到事务开始之前的状态。\n\n\nread uncommitted 允许读取未提交的数据\nread committed 只允许读取已经提交数据\nrepeatable read保证每次读取相同数据\nserializable 严格保证事务串行\nmysqldump，mysqlhotcopy，备份\nmysqlimport，恢复\n2、进阶主从复制：从库按照主库的构造、数据 复制出来一个同样的数据库环境，mysql默认一般为异步同步数据，还可以设置成半同步。\n高可用性：MHA目前在mysql高可用方面是一个相对成熟的解决方案，是一套优秀的作为mysql高可用性环境下故障切换和主从提升的高可用软件。\n3、性能优化使用limit限制查询数量\n使用批量insert\n使用show status查看状况\n三、Oracle1.对比MySql1、\nOracle：使用 表空间 来组织数据文件，表、索引等对象存储在指定的表空间中。\nMySQL：没有表空间的概念，数据存储在数据库目录中，且通过存储引擎（如 InnoDB）进行管理。\n2、\nOracle：\n\n字符串：使用 VARCHAR2 存储可变长度的字符串。\n日期时间：DATE 类型包含日期和时间，TIMESTAMP 支持更精确的时间。\n\nMySQL：\n\n字符串：使用 VARCHAR 和 TEXT。\n日期时间：DATETIME 和 TIMESTAMP，后者带有时区支持。\n\n3、\nOracle：限制查询结果使用 FETCH FIRST 或 ROWNUM。\n\n例子：SELECT * FROM table_name FETCH FIRST 10 ROWS ONLY;\n\nMySQL：使用 LIMIT 和 OFFSET。\n\n例子：SELECT * FROM table_name LIMIT 10;\n\n4、\nOracle：不支持 AUTO_INCREMENT，使用 序列（SEQUENCE） 来生成唯一值。\n\n例子：CREATE SEQUENCE seq_name START WITH 1 INCREMENT BY 1;\n\nMySQL：直接使用 AUTO_INCREMENT 关键字。\n\n例子：CREATE TABLE table_name (id INT AUTO_INCREMENT, PRIMARY KEY(id));\n\n","categories":[],"tags":["linux"]},{"title":"wireshark抓包教程","url":"/2025/02/18/wireshark%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/","content":"前言：前两天被面试到了，复习一下。以ping baidu.com 为例\n\n一、过滤规则过滤ip:  ip.src eq【ip地址】 来源   ip.dst eq 【ip地址】 目的  ip.addr eq【ip地址】都显示\n过滤端口：tcp/udp.port eq【端口号】来源跟目的的端口都显示 tcp.port eq 80 or udp.port eq 80\ntcp.dstport == 80 &#x2F;&#x2F; 只显tcp协议的目标端口80\ntcp.srcport == 80 &#x2F;&#x2F; 只显tcp协议的来源端口80\ntcp.port &gt;= 1 and tcp.port &lt;= 80范围过滤\n过滤协议：tcp udp arp icmp http smtp ftp dns msnms ip ssl  bootp    排除用！\n\ntcp：可靠有连接 三次握手四次挥手 有重传机制和序列号确认等机制 还可进行流量控制和拥塞阻塞 适用于数据准确性高如文件传输和网页浏览等\nudp：无连接不可靠 速率快延迟低效率高 如音视频通信等不要求数据准确性\narp：解析ip到mac地址，用于局域网内不跨路由通信\nicmp：网络控制报文，ip和路由器之间传递控制信息如ping命令诊断检测\nhttp：web服务端和客户端传输超文本协议，包含get和post\nsmtp：传输邮件时候用的\nftp：传文件协议\ndns：域名协议\nssl：安全协议 网站加密等\nbootp：无盘工作站的配置 后被dhcp取代\n\n过滤mac地址：\neth.dst == A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤目标mac\neth.src eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源mac\neth.dst==A0:00:00:04:C5:84\neth.dst==A0-00-00-04-C5-84\neth.addr eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的\n长度过滤：udp.length == 26 这个长度是指udp本身固定长度8加上udp下面那块数据包之和\nhttp长度过滤：http.request.method == “GET”\n二、左下角（1）Frame: 物理层的数据帧概况\n（2）Ethernet II: 数据链路层以太网帧头部信息\n（3）Internet Protocol Version 4: 互联网层IP包头部信息\n（4）Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP\n（5）Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议\n三、右下角十六进制数 以及对应的ASCII编码后的字符解释\n从图中右侧 ASCII 字符 “f・.z・.\\・.P・..E・&lt;DV・.・.・.・.] abcdefghijklmnopqrstuvwabcdefghi” 来看：\n\n“abcdefghijklmnopqrstuvwabcdefghi” 这部分连续可打印字符可能是填充数据或随机生成的数据内容。在 ICMP（ping 使用的协议）数据包中，除了必要的头部信息外，数据部分内容往往是随意填充的，用于测试网络连通性和往返时间等，不一定有特定语义。\n其他不可打印字符 “f・.z・.\\・.P・..E・&lt;DV・.・.・.・.]” 是协议头部或填充数据对应的非 ASCII 可显示内容，主要用于协议层面的解析和处理，比如携带 ICMP 头部信息、以太网帧头部信息等，不具备直观的可读含义。\n\n这些 ASCII 字符对于理解 ping 操作的网络连通性等核心目的作用不大，更多是数据包原始内容的呈现，重点还是在协议头部信息等方面来分析网络状况。\n","categories":[],"tags":["网络"]},{"title":"小程序webview下的解决方案","url":"/2025/01/06/%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E4%B8%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"\n本文转载于https://blog.soarli.top/archives/743.html\n\n前言：\n微信开放能力 web-view 是承载网页的容器。会自动铺满整个小程序页面\n需求希望用户在 webview 中浏览内容时能够便捷的返回到小程序主体，通过小\n程序左上角的返回也可以一定程度上实现该需求。但是在 ios 和 Android 中的\n效果不尽如意，ios 中浏览的网页栈多了之后很难直接返回到小程序中\n\n\n解决办法：\n使用 uni-app 组件\n&lt;template&gt;    &lt;web-view src=&quot;https://example.com&quot;&gt;        &lt;cover-view class=&quot;close-view&quot; @click=&quot;closeView()&quot;&gt;            &lt;cover-image class=&quot;close-icon&quot; src=&quot;/static/icon/public/home.png&quot;&gt;&lt;/cover-image&gt;        &lt;/cover-view&gt;    &lt;/web-view&gt;&lt;/template&gt;&lt;script setup&gt;    import &#123;        onShareAppMessage,        onShareTimeline    &#125; from &#x27;@dcloudio/uni-app&#x27;    const closeView = () =&gt; &#123;        uni.reLaunch(&#123;            url: &#x27;/pages/index/index&#x27;        &#125;)    &#125;    onShareAppMessage(() =&gt; &#123;&#125;)    onShareTimeline(() =&gt; &#123;&#125;)&lt;/script&gt;&lt;style&gt;    .close-view &#123;        background-color: #616161;        border-radius: 50%;        position: fixed;        z-index: 99999;        bottom: 19vh;        right: 30px;        visibility: visible !important;        padding: 5px;    &#125;    .close-icon &#123;        width: 30px;        height: 30px;    &#125;&lt;/style&gt;\n\n","categories":[],"tags":["小程序"]},{"title":"2024—考研路程与迷茫未来","url":"/2024/12/25/2024%E2%80%94%E8%80%83%E7%A0%94%E8%B7%AF%E7%A8%8B%E4%B8%8E%E8%BF%B7%E8%8C%AB%E6%9C%AA%E6%9D%A5/","content":"前言：\n考研落下帷幕已三天，突然闲下来的时光过得好慢。期望中的考完呼呼大睡也没有发生，打一天游戏倒是实现了，但打完后就感觉空虚。还好第二天去游了泳，第三天出去玩，又累又开心。休息之余， 还是要思考以后的路怎么走。\n一、考完数学大抵就知道自己考不上了，虽有点难受，但也平静的接受了这个现实，毕竟考试前确实也清楚分数线就是在这附近，考上考不上都不出乎意料。\n也是从去年寒假前开始断断续续的学吧，到四五月份考完试之后就几乎全天备考了。虽早上起的晚，晚上经常出去玩，但仍算得上是每天也学了不短的时间。写到这里发现这偏题了，到时候成绩出来之后再进行复盘，不管分数如何都要分析原因和找出来学习上的缺陷，不管是为了给自己一个交代或者是以后再进行的考试。\n拉回现在这个时间点，最重要的就是先给自己来个全身心的放松，毕竟休息是为了更好的前行。\n然后要全力准备春招了，晚上翻了翻牛客的面经还有求职经验发现自己所学的皮毛远远达不到招聘要求，僧多粥少，几个月投递几百家企业很正常，甚至有一个我看几乎面了都快一百家企业？就业形势确实严峻啊。\n二、\n寻找一个合适的java项目来作为入门\n项目＋八股＋算法   都要同步进行\njava可投前端&#x2F;运维&#x2F;测开\n需要什么学什么【驱动式而非遍历式】\n每个方向一个简历，国企&#x2F;私企 也分开\n只有三个月左右时间\n\n\n加油！不好高骛远，也不妄自菲薄！\n\n","categories":["生活相关"],"tags":["生活随笔"]},{"title":"两种接收数据的格式—json和xml","url":"/2024/05/13/%E4%B8%A4%E7%A7%8D%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E6%A0%BC%E5%BC%8F%E2%80%94json%E5%92%8Cxml/","content":"前言：用语雀复习分布式的时候对code块的xml和json格式有点疑问。\n\n\njson实例：\n&#123;    &quot;sites&quot;: [    &#123; &quot;name&quot;:&quot;菜鸟教程&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,     &#123; &quot;name&quot;:&quot;google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,     &#123; &quot;name&quot;:&quot;微博&quot; , &quot;url&quot;:&quot;www.weibo.com&quot; &#125;    ]&#125;\n\nxml实例：\n&lt;sites&gt;  &lt;site&gt;    &lt;name&gt;菜鸟教程&lt;/name&gt; &lt;url&gt;www.runoob.com&lt;/url&gt;  &lt;/site&gt;  &lt;site&gt;    &lt;name&gt;google&lt;/name&gt; &lt;url&gt;www.google.com&lt;/url&gt;  &lt;/site&gt;  &lt;site&gt;    &lt;name&gt;微博&lt;/name&gt; &lt;url&gt;www.weibo.com&lt;/url&gt;  &lt;/site&gt;&lt;/sites&gt;\n\nSON 与 XML 的不同之处：\n\nJSON 不需要结束标签\nJSON 更加简短\nJSON 读写速度更快\nJSON 可以使用数组\n\n\n最大的不同是：\nXML 需要使用 XML 解析器来解析。\nJSON 可以使用标准的 JavaScript 函数来解析。\n\n","categories":["日常随笔"],"tags":["web"]},{"title":"排序算法之归并、基数、计数排序","url":"/2024/04/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E3%80%81%E5%9F%BA%E6%95%B0%E3%80%81%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/","content":"前言：王道书上将排序章节中内部排序分为三小节，其中归并排序，基数排序，计数排序单拎出来作为一小节，另外两节分别是插入排序和交换排序。\n一、归并排序归并利用分治思想，迭代或递归解决问题。\n\n分解（Divide）：将n个元素分成个含n&#x2F;2个元素的子序列。\n解决（Conquer）：用合并排序法对两个子序列递归的排序。\n合并（Combine）：合并两个已排序的子序列已得到排序结果\n\n\n\n平均时间复杂度：O(nlogn)最佳时间复杂度：O(n)最差时间复杂度：O(nlogn)空间复杂度：O(n)排序方式：In-place稳定性：稳定\n\n不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )\n归并的空间复杂度就是那个临时的数组和递归时压入栈的数据占用的空间：n + logn；所以空间复杂度为: O(n)。\n归并排序算法中，归并最后到底都是相邻元素之间的比较交换，并不会发生相同元素的相对位置发生变化，故是稳定性算法。\n二、基数排序原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。基数排序的方式可以采用LSD（Least significant digital）或MSD（Most significant digital），LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。\n\nMSD：先从高位开始进行排序，在每个关键字上，可采用计数排序\nLSD：先从低位开始进行排序，在每个关键字上，可采用桶排序\n\n对于LSD：\n① 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。\n② 从最低位开始，依次进行一次排序。\n③ 这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\n\n对于基数排序的复杂度：\n\n时间复杂度：O(k*N)空间复杂度：O(k + N)稳定性：稳定\n\n三、计数排序计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序。\n计数排序要求输入的数据必须是有确定范围的整数。\n\n计数排序的复杂度：\n\n平均时间复杂度：O(n + k)\n最佳时间复杂度：O(n + k)\n最差时间复杂度：O(n + k)\n空间复杂度：O(n + k)\n\n补充桶排序：\n与计数排序有类似之处。设置多个有序的桶，将要排序序列中的值，放置到这些桶里。对每个桶内的数据使用快速排序算法进行排序，最后按照桶的顺序将每个桶的数据依次取出并合并。\n\n","categories":["算法相关"],"tags":["算法"]},{"title":"排序算法之交换排序和选择排序","url":"/2024/04/02/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F/","content":"前言：王道2025将交换排序分为冒泡排序和快速排序，选择排序分为简单选择排序和堆排序。\n一、交换排序1.冒泡排序\n\n平均时间复杂度：O(N^2)\n最佳时间复杂度：O(N)\n最差时间复杂度：O(N^2)\n空间复杂度：O(1)\n排序方式：In-place\n稳定性：稳定\n\ncppCopy Code// 冒泡排序算法，将数组a中的n个元素按照升序排序    void bubble_sort(int *a, int n) &#123;  bool flag = true; // 用于标记本轮是否发生交换  while (flag) &#123;    flag = false; // 每轮开始前将标记置为false    for (int i = 0; i &lt; n - 1; ++i) &#123; // 遍历数组中的元素      if (a[i] &gt; a[i + 1]) &#123; // 如果相邻两个元素逆序        flag = true; // 标记本轮发生了交换        int t = a[i]; // 交换两个元素的位置        a[i] = a[i + 1];        a[i + 1] = t;      &#125;    &#125;  &#125;&#125;\n\n2.快速排序快速排序，又称划分交换排序,通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。\n\n① 从数列中挑出一个元素，称为 “基准”（pivot），② 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。③ 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n\n\n平均时间复杂度：O(NlogN)\n最佳时间复杂度：O(NlogN)\n最差时间复杂度：O(N^2)\n空间复杂度：根据实现方式的不同而不同\n\n二、选择排序1.简单选择排序首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n\n\n选择排序的思想其实和冒泡排序有点类似，都是在一次排序后把最小的元素放到最前面，或者将最大值放在最后面。但是过程不同，冒泡排序是通过相邻的比较和交换。而选择排序是通过对整体的选择，每一趟从前往后查找出无序区最小值，将最小值交换至无序区最前面的位置。\n\n代码实现：\n// 选择排序算法，对传入的整型数组进行排序void selection_sort(int arr[], int len) &#123;    int i, j, min, temp; // 定义循环变量和临时变量    // 外层循环，控制需要进行排序的次数    for (i = 0; i &lt; len - 1; i++) &#123;        min = i; // 假设当前位置为最小值的索引        // 内层循环，在未排序部分找到最小的元素        for (j = i + 1; j &lt; len; j++)            // 如果当前元素比假设的最小值还要小，则更新最小值的索引            if (arr[min] &gt; arr[j])                min = j;        // 将找到的最小值与当前位置的元素进行交换        temp = arr[min]; // 临时存储最小值        arr[min] = arr[i]; // 将最小值放到已排序部分的末尾        arr[i] = temp; // 将当前位置的元素放到未排序部分的开头    &#125;&#125;\n\n\n平均时间复杂度：O(N^2)\n最佳时间复杂度：O(N^2)\n最差时间复杂度：O(N^2)\n空间复杂度：O(1)\n排序方式：In-place\n稳定性：不稳定\n\n2.堆排序2.1 引入\n何为堆？\n如下图，是一颗完全二叉树且每个节点都大于等于（或小于等于）其子节点的值，为最大堆（最小堆）。\n\n2.2 构建初始堆\n①给定无序序列46859，先写成完全二叉树。\n\n②从最后一个非叶节点开始，按照由左到右，由上到下进行调整成大的在上，小的在下。\n\n③找到第二个非叶节点4，4 9 8中9最大，将4和9交换\n\n④交换后会导致子根改变，观察4的左子树，再次交换\n\n⑤此时已经将无序序列构建成了最大堆。\n2.3 交换堆顶与末尾元素，使得末尾元素最大。固定末尾元素后重复此步骤，得到第二大元素，如此反复交换，重建，交换。\n①交换堆顶与末尾\n\n②调整4 8 位置使满足大的在上，小的在下。\n\n③将堆顶元素与堆尾元素交换（已固定的元素除外），得到第二大元素8\n\n④后续重复进行调整，交换，固定，得到有序序列。\n\n\n总结堆排序的思路：\na.将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;\nb.将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;\nc.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序\n\n","categories":["算法相关"],"tags":["算法"]},{"title":"排序算法之插入排序","url":"/2024/04/02/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","content":"前言：按照王道书上来定义，插入排序又分为直接插入排序，折半插入排序和希尔排序。\n1.直接插入排序将待排列元素划分为「已排序」和「未排序」两部分，每次从「未排序的」元素中选择一个插入到「已排序的」元素中的正确位置。直接插入排序是一种稳定的排序算法。\n\n实现代码：\n// 插入排序算法实现void insertion_sort(int arr[], int len) &#123;  for (int i = 1; i &lt; len; ++i) &#123;  // 从第二个元素开始遍历数组    int key = arr[i];  // 当前要插入的元素    int j = i - 1;  // 已排序部分的最后一个元素的索引    // 在已排序部分寻找合适的位置插入当前元素    while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) &#123;  // 循环条件：索引合法且当前元素比 key 大      arr[j + 1] = arr[j];  // 将比 key 大的元素后移一位      j--;  // 继续向前查找合适的位置    &#125;        arr[j + 1] = key;  // 将当前元素插入到合适的位置  &#125;&#125;\n\n时间复杂度最优为O(n)，在数列几乎有序时效率很高。\n最坏时间复杂度和平均时间复杂度都O(n^2)\n2.折半插入排序通过二分算法优化性能，在元素多时优化效果明显。\n\n实现代码：\nvoid insertion_sort(int arr[], int len) &#123;  if (len &lt; 2) return;  for (int i = 1; i != len; ++i) &#123;    int key = arr[i];    auto index = upper_bound(arr, arr + i, key) - arr;    // 使用 memmove 移动元素，比使用 for 循环速度更快，时间复杂度仍为 O(n)    memmove(arr + index + 1, arr + index, (i - index) * sizeof(int));    arr[index] = key;  &#125;&#125;\n\n折半插入排序的本质依然是插入排序，仅仅是对插入排序进行了部分优化。而优化的部分就是向前查找比较的部分。其实它就是将查找从暴力枚举一一遍历变为二分查找。所以优化后的时间复杂度仍然不变。\n折半插入可以理解为对于每个位置的平均时间复杂度从O(N)查找+O(N)交换移动变成O(logN)查找+Ｏ(n)交换移动。所以，整个时间复杂度依然是Ｏ(n2)\n3.希尔排序通过增量(gap)将元素两两分组，对每组使用直接插入排序算法排序；增量(gap)逐渐减少，当增量(gap)减至1时，整个数据恰被分成一组，最后进行一次插入排序，整个数组就有序了。是一种不稳定的排序算法。\n\n希尔排序过程较复杂，参考动图动画:一篇文章快速学会希尔排序 - 知乎 (zhihu.com)\n\n第一次：\n\n第二次：\n\n第三次：\n\n实现代码：\n.\ntemplate &lt;typename T&gt;void shell_sort(T array[], int length) &#123;  int h = 1;  // 使用 Knuth 序列确定初始间隔序列  while (h &lt; length / 3) &#123;    h = 3 * h + 1;  &#125;  // 不断缩小间隔 h，直至 h 为 1  while (h &gt;= 1) &#123;    // 对每个间隔为 h 的子序列进行插入排序    for (int i = h; i &lt; length; i++) &#123;      // 插入排序，将当前元素插入到已排序序列的正确位置      for (int j = i; j &gt;= h &amp;&amp; array[j] &lt; array[j - h]; j -= h) &#123;        // 如果当前元素小于之前的元素，交换它们的位置        std::swap(array[j], array[j - h]);      &#125;    &#125;    // 缩小间隔 h    h = h / 3;  &#125;&#125;\n\n\n\n希尔排序的最优时间复杂度为O(n)。\n希尔排序的平均时间复杂度和最坏时间复杂度与间距序列的选取有关。\n","categories":["算法相关"],"tags":["算法"]},{"title":"图书馆机房电脑远程连接笔记本","url":"/2024/04/02/%E5%9B%BE%E4%B9%A6%E9%A6%86%E6%9C%BA%E6%88%BF%E7%94%B5%E8%84%91%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%AC%94%E8%AE%B0%E6%9C%AC/","content":"前言：自从阿里云到期后也有好多个月不更新博客了，一定是因为服务器到期的缘故（而不是因为我懒QAQ， 话说真的是幸福的时候人往往会丧失动力呀\n一、前期准备：\nWindows10的专业版\n开启远程桌面功能\n关闭防火墙\n二、实现：\n宿舍笔记本直连CMCC并登陆（注意：一定不能连接宿舍路由器）\n图书馆&#x2F;机房电脑登录状态\n保证两台电脑ip均为172网关的即可\n补充三类IP：\n\nIP地址按照网络规模的大小，可以分为A、B、C、D、E五类，其中A、B、C类是三种主要的类型地址，D类专供多目传送用的多目地址，E类用于扩展备用地址在IP地址三种主要类型里，各保留了3个区域作为私有地址，其地址范围如下：\n\nA类地址：10.0.0.0～10.255.255.255\nB类地址：172.16.0.0～172.31.255.255\nC类地址：192.168.0.0～192.168.255.255\n\n\n\n","categories":["电脑相关"],"tags":["奇奇怪怪"]},{"title":"数据库的六大范式","url":"/2023/12/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%85%AD%E5%A4%A7%E8%8C%83%E5%BC%8F/","content":"数据库之六大范式详解_数据库范式-CSDN博客\n前言：数据库系统原理的基本内容。\n\n1. 第一范式1NF数据项不可分，强调原子性。\n如下图不为第一范式：\n\n而下图为第一范式：\n\n\n\n公司名称\n地址\n商品名称\n商品数量\n电话\n\n\n\n\n刘晨\n19\n\n\n\n\n2. 第二范式2NF若某关系R属于第一范式，且每一个非主属性完全依赖于任何一个候选码，则关系R属于第二范式。\n以下是一个符合第二范式的示例表格：\n\n\n\n学生ID (主键)\n学生姓名\n课程ID (主键)\n课程名称\n成绩\n\n\n\n1\n小明\n101\n数学\n85\n\n\n2\n小红\n102\n英语\n78\n\n\n3\n小华\n101\n数学\n90\n\n\n在上面的表格中，每个非主属性（例如课程名称和成绩）都完全依赖于整个主键（学生ID和课程ID），不存在部分依赖性。\n接下来是一个不符合第二范式的示例表格：\n\n\n\n订单号 (主键)\n顾客姓名\n产品名称\n产品价格\n\n\n\n1\n张三\n手机\n3000元\n\n\n2\n李四\n手机\n3000元\n\n\n3\n王五\n电视\n5000元\n\n\n在上面的表格中，产品价格只依赖于产品名称，而不是整个主键（订单号和产品名称）。这样的设计存在部分依赖性，不符合第二范式。为了符合第二范式，可以将产品价格移至另一个表格，确保每个非主属性完全依赖于候选键。\n3. 第三范式3NF一个表在第三范式下，任何非主属性必须完全依赖于主属性，而不能依赖于其它非主属性。\n下面是一个符合第三范式的表格示例：\n\n\n\n学生ID (Primary Key)\n姓名\n年龄\n班级 (Foreign Key)\n\n\n\n1\n小明\n18\n1\n\n\n2\n小红\n17\n2\n\n\n3\n小华\n18\n1\n\n\n在上面的示例中，每个学生的姓名和年龄直接依赖于学生ID，班级信息直接依赖于班级ID，不存在非主属性依赖于其他非主属性的情况，因此符合第三范式。\n现在来看一个不符合第三范式的表格示例：\n\n\n\n订单号 (Primary Key)\n产品名称\n客户ID (Foreign Key)\n客户姓名\n客户地址\n\n\n\n1\n商品A\n101\n张三\n北京市\n\n\n2\n商品B\n102\n李四\n上海市\n\n\n3\n商品C\n101\n张三\n北京市\n\n\n在上面的示例中，客户姓名和客户地址这两个属性依赖于客户ID，而不是直接依赖于订单号。这样就存在了非主属性（客户姓名和客户地址）依赖于其他非主属性（客户ID）的情况，因此不符合第三范式。\n4. BC范式BCNF在BC范式中，一个表中的每个非主属性都必须完全依赖于候选键，而不是依赖于其他主属性。\n以下是一个符合BC范式的表格：\n\n\n\n订单号 (主键)\n顾客ID (候选键)\n产品ID (候选键)\n产品名称\n顾客姓名\n\n\n\n1\n101\n201\n手机\n张三\n\n\n2\n102\n202\n电视\n李四\n\n\n3\n103\n201\n手机\n王五\n\n\n在上面的表格中，每个非主属性（例如产品名称和顾客姓名）都完全依赖于整个候选键（顾客ID和产品ID），不存在部分依赖性或传递依赖性。\n接下来是一个不符合BC范式的示例表格：\n\n\n\n学生ID (主键)\n学生姓名\n课程ID (候选键)\n课程名称\n成绩\n\n\n\n1\n小明\n101\n数学\n85\n\n\n2\n小红\n102\n英语\n78\n\n\n3\n小华\n101\n数学\n90\n\n\n在上面的表格中，成绩是一个非主属性，它仅依赖于课程ID，而不是整个候选键（学生ID和课程ID）。这样的设计存在部分依赖性，不符合BC范式。为了符合BC范式，可以将成绩移到另一个表格中，并通过外键与原始表格关联，确保每个非主属性完全依赖于候选键。\n5. 第四范式4NF在第四范式中，一个表中的多值依赖被视为不合规范的，需要进行规范化处理，以确保每个非主属性完全依赖于候选键。\n以下是一个符合第四范式的示例表格：\n\n\n\n学生ID (主键)\n学生姓名\n课程ID (主键)\n课程名称\n成绩\n\n\n\n1\n小明\n101\n数学\n85\n\n\n1\n小明\n102\n英语\n78\n\n\n2\n小红\n101\n数学\n90\n\n\n3\n小华\n101\n数学\n88\n\n\n在上面的表格中，每个非主属性都完全依赖于整个主键，而且不存在多值依赖。\n接下来是一个不符合第四范式的示例表格：\n\n\n\n订单号 (主键)\n顾客姓名\n产品名称\n产品颜色\n\n\n\n1\n张三\n手机\n黑色, 白色\n\n\n2\n李四\n电视\n彩色\n\n\n3\n王五\n电脑\n灰色, 白色\n\n\n在上面的表格中，产品颜色是一个多值属性，它依赖于产品名称，而不是整个主键（订单号和产品名称）。这样的设计存在多值依赖，不符合第四范式。为了符合第四范式，可以将产品颜色移至另一个表格，并通过外键与原始表格关联，确保每个非主属性完全依赖于候选键。\n6. 第五范式5NF在第五范式中，一个表中的每个非主属性都必须完全依赖于候选键，而且没有任何连接依赖性或多值依赖性。\n以下是一个符合第五范式的示例表格：\n\n\n\n顾客ID (主键)\n产品ID (主键)\n\n\n\n101\n201\n\n\n102\n202\n\n\n103\n201\n\n\n在上面的表格中，每个非主属性（顾客ID和产品ID）都完全依赖于整个候选键（顾客ID和产品ID），不存在连接依赖性或多值依赖性。\n接下来是一个不符合第五范式的示例表格：\n\n\n\n订单号 (主键)\n顾客姓名\n产品名称\n产品颜色\n\n\n\n1\n张三\n手机\n黑色, 白色\n\n\n2\n李四\n电视\n彩色\n\n\n3\n王五\n电脑\n灰色, 白色\n\n\n在上面的表格中，产品颜色是一个多值属性，它存在多值依赖性，不符合第五范式。为了符合第五范式，可以将产品颜色移到另一个表格中，并通过外键与原始表格关联，确保每个非主属性完全依赖于候选键，且没有任何连接依赖性或多值依赖性。\n7.总结\n第一范式 (1NF):\n目标：确保每个单元格中只包含一个值，消除重复的数据。\n特点：表中的每个字段都是不可再分的原子值。\n\n\n第二范式 (2NF):\n目标：消除部分函数依赖，确保表中的每个非主属性完全依赖于候选键。\n特点：所有非主属性都完全依赖于候选键，没有部分函数依赖。\n\n\n第三范式 (3NF):\n目标：消除传递依赖，确保表中的每个非主属性都不传递依赖于其他非主属性。\n特点：每个非主属性只依赖于候选键，而不是依赖于其他非主属性。\n\n\n巴斯-科德范式 (BCNF):\n目标：消除主属性对候选键的部分依赖，确保表中的每个主属性都不部分依赖于候选键。\n特点：表中的每个主属性都必须是超键，即候选键的超集。\n\n\n第四范式 (4NF):\n目标：消除多值依赖，确保表中的每个非主属性都不对候选键的任何一部分产生依赖。\n特点：表中的每个非主属性都不应该对候选键的任何一部分产生依赖。\n\n\n第五范式 (5NF):\n目标：消除连接依赖性和多值依赖性，确保表中的每个非主属性都完全依赖于候选键。\n特点：表中的每个非主属性都必须完全依赖于候选键，而且没有任何连接依赖性或多值依赖性。\n\n\n\n","categories":[],"tags":["数据库"]},{"title":"解决tomact开启后出现404和500错误","url":"/2023/12/01/%E8%A7%A3%E5%86%B3tomact%E5%BC%80%E5%90%AF%E5%90%8E%E5%87%BA%E7%8E%B0404%E5%92%8C500%E9%94%99%E8%AF%AF/","content":"前言：配置开启tomact后交替出现404和500错误。\n解决办法：\n使用管理员权限打开cmd命令再startup即可。\n\n","categories":[],"tags":["JavaWeb"]},{"title":"对语雀P0事故进行复盘","url":"/2023/10/27/%E5%AF%B9%E8%AF%AD%E9%9B%80P0%E4%BA%8B%E6%95%85%E8%BF%9B%E8%A1%8C%E5%A4%8D%E7%9B%98/","content":"前言：前几天语雀发生超越P0级别(科普：互联网公司事故等级划分)的事故，恰巧作为语雀的新用户也经历了这波事故的全过程。从下午三四点服务掉线到晚上九点钟服务恢复，可谓是超长待机了。更离谱的是本地数据也打不开，离谱程度很难让人相信这是背靠蚂蚁金融的公司。\n\n以下内容多转自程序员鱼皮公众号，侵删。\n\n一、公告全文\n二、解读“可监控，可灰度，可回滚”1.可监控可监控是指能够实时地收集和展示系统运行时的数据和指标，以便开发和运维同学可以及时发现系统问题、更快进行故障排查和性能调优。需要监控的信息可以包括系统性能指标（内存、CPU、带宽等）、业务日志、错误信息等。\n\n即对数据作可视化面板实时观测监控\n\n2.可灰度指灰度发布能力（又叫金丝雀发布）。将系统的新版本全量部署给所有用户之前，先仅对一小部分用户进行试用。这样可以通过收集这部分用户的反馈和监控数据就能评估新版本的稳定性，并及时进行调整和修复，从而减少对全体用户的潜在风险。\n灰度发布又有很多策略。比如经典的按流量阶段性发布，先随机给 5% 的用户使用新版本，验证没问题后，再给 20%、50%、75% 的用户使用新版本逐渐放量，直到覆盖 100% 的用户。\n\n即先发布试用版本给少部分用户体验来获得反馈\n\n3.可回滚就像 Git 版本控制系统回滚写错的代码一样，系统的版本也是可以回滚的。\n线上系统出现问题时，可以将已经部署的新版本回退到之前的稳定版本。这样做可以快速恢复系统，减少对用户的影响，并给开发同学足够的时间来排查和修复问题。而不是线上一直故障，每分钟都是损失。\n\n即版本回退，这个没什么好说的\n\n","categories":[],"tags":["科普"]},{"title":"vim基础命令","url":"/2023/10/26/vim%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/","content":"前言：今天实验课写头歌的时候用到了很多vim命令，发现最常用的无非也就5个步骤，码住记一下。\n\n\n1.vim 文件名使用vim打开该文件\n2.i进入编辑模式\n3.鼠标移动光标进行增删\n4.按Esc退出编辑模式\n5.输入:wq退出并保存\n","categories":["日常随笔"],"tags":["linux","vim"]},{"title":"mooc一键互评脚本","url":"/2023/10/22/mooc%E4%B8%80%E9%94%AE%E4%BA%92%E8%AF%84%E8%84%9A%E6%9C%AC/","content":"前言：发现这学期的数据库mooc互评太多了，一个个点实在是太过于麻烦，就写个脚本来实现自动互评。目前脚本已提交油猴：MOOC互评全自动化脚本 (greasyfork.org)。但是不知道为什么用油猴运行不了，在控制台手动输入就能运行（挠头.jpg\n\n\n// ==UserScript==// @name         MOOC互评全自动化脚本// @description  自动填充内容并默认勾选最高分提交，默认互评5次// @version      1.2// @author       无知呦// @match        https://www.icourse163.org//*  // @grant        none// @license MIT// @namespace https://greasyfork.org/users/1195678// ==/UserScript==// 定义一个函数fillRadios，用于将所有单选框设置为选中状态function fillRadios() &#123;  var radios = document.getElementsByTagName(&#x27;input&#x27;);  for (var i = 0; i &lt; radios.length; i++) &#123;    if (radios[i].type === &#x27;radio&#x27;) &#123;      radios[i].checked = true;    &#125;  &#125;&#125;// 定义一个函数fillTextareas，用于将所有文本框的值填充为&#x27;100&#x27;function fillTextareas() &#123;  var textareas = document.getElementsByTagName(&#x27;textarea&#x27;);  for (var i = 0; i &lt; textareas.length; i++) &#123;    textareas[i].value = &#x27;100&#x27;;  &#125;&#125;// 定义一个函数clickLinkByTextContent，用于通过链接文本内容来点击对应的链接function clickLinkByTextContent(textContent) &#123;  var links = document.querySelectorAll(&#x27;a&#x27;);  for (var i = 0; i &lt; links.length; i++) &#123;    if (links[i].textContent === textContent) &#123;      links[i].click();      break;    &#125;  &#125;&#125;// 定义一个函数clickNextLinks，用于点击所有class为&#x27;j-gotonext&#x27;的链接function clickNextLinks() &#123;  var nextLinks = document.querySelectorAll(&#x27;a.j-gotonext&#x27;);  for (var j = 0; j &lt; nextLinks.length; j++) &#123;    nextLinks[j].click();  &#125;&#125;// 定义一个函数doTask，用于执行任务function doTask(taskIndex) &#123;  fillRadios();   // 调用fillRadios函数，选中所有单选框  fillTextareas();   // 调用fillTextareas函数，将所有文本框的值填充为&#x27;100&#x27;  clickLinkByTextContent(&#x27;提交&#x27;);   // 调用clickLinkByTextContent函数，点击文本内容为&#x27;提交&#x27;的链接  setTimeout(function () &#123;   // 延迟执行    clickNextLinks();   // 调用clickNextLinks函数，点击所有class为&#x27;j-gotonext&#x27;的链接    if (taskIndex &lt; 4) &#123;   // 如果任务索引小于4（共执行5次）      setTimeout(function () &#123;        doTask(taskIndex + 1);   // 递归调用doTask函数，继续执行下一个任务      &#125;, Math.random() * 2000 + 1000); // 随机等待时间在1秒到3秒之间    &#125;  &#125;, 2000);&#125;doTask(0);   // 调用doTask函数，从任务索引为0开始执行任务\n\n这段代码是一个用于自动化MOOC互评的脚本，通过填充内容并默认勾选最高分提交，默认互评5次。具体实现包括将所有单选框设置为选中状态、将所有文本框的值填充为’100’、通过链接文本内容来点击对应的链接、点击所有class为’j-gotonext’的链接等操作。最后通过递归调用，循环执行任务。\n题外话：解决mooc提示并发限制的办法之一是将每份批改之间的等待时间设置为随机，避免使用固定等待时间。\n","categories":["日常随笔"],"tags":["前端"]},{"title":"堆空间和栈空间","url":"/2023/10/07/%E5%A0%86%E7%A9%BA%E9%97%B4%E5%92%8C%E6%A0%88%E7%A9%BA%E9%97%B4/","content":"前言：今天上课的时候跟yt说起了堆这个东西，之前只知道数据结构中的栈，了解学习一下堆。\n\n堆在数据结构和内存中有着不同的意义。\n在数据结构中，堆通常指完全二叉树，有父节点大于所有子节点的最大堆（反之也有最小堆）。应用有优先队列和堆排序。\n在内存中，堆是指操作系统动态分配的内存。可以手动分配一段内存来使用，并在用后释放，借助malloc或new函数来实现。在C语言中，堆被称为“动态内存”，而在C++中，它被称为“自由存储区”。\n虽然堆在数据结构和内存中有不同的意义，但都具有相似的特征，即可以根据需要动态调整大小。在数据结构中，堆经常使用数组来实现；在内存中，堆使用操作系统分配的虚拟地址空间来实现。\n\n一、内存中的堆和栈1、堆内存：\n动态分配：堆内存用于存储动态分配的数据，即在运行时根据需要分配的内存，如使用malloc、calloc、realloc等函数分配的内存块。内存地址不连续。\n大小灵活：堆内存的分配和释放不受固定大小限制，可以根据需求动态改变。\n需手动释放：程序员需要手动管理堆内存，即在不再使用时显式地释放内存，通过free函数或者类似的方式进行释放。\n\n一般而言，以下情况使用堆内存较为常见：\n\n需要动态分配内存的情况，比如不确定具体大小的数组、动态创建对象等。\n需要在函数之间共享数据，或者将数据保存到程序结束时才释放的情况。\n需要大量内存空间的情况，栈内存可能不足以满足需求。\n\n2、栈内存：\n自动分配：栈内存用于存储局部变量和函数调用时的临时数据，由编译器自动分配和释放。内存地址连续。\n固定大小：栈内存的大小在编译时就已确定，并且大小是固定的。因此栈内存远大于堆。\n自动释放：栈内存的分配和释放是自动进行的，当变量超出其作用域范围时，编译器会自动回收栈内存。\n\n而以下情况使用栈内存较为常见：\n\n局部变量和临时数据的存储，如函数内部的变量。\n函数调用时的参数传递。\n对内存使用效率要求较高的场景，栈内存的分配和释放速度更快。\n\n\n需要注意的是，堆和栈并非绝对的划分，实际使用中也存在栈上分配对象、堆上分配局部变量等特殊情况。因此，在编写程序时应根据具体需求和内存管理要求，合理选择使用堆内存或栈内存。\n\n3、代码举例#include &lt;iostream&gt;void allocateOnHeap() &#123;    int* ptr = new int(5);  // 在堆上分配内存    std::cout &lt;&lt; &quot;Value on heap: &quot; &lt;&lt; *ptr &lt;&lt; std::endl;    delete ptr;  // 手动释放堆内存&#125;void allocateOnStack() &#123;    int value = 10;  // 在栈上分配内存    std::cout &lt;&lt; &quot;Value on stack: &quot; &lt;&lt; value &lt;&lt; std::endl;&#125;  // 当函数执行完毕时，栈上的变量会自动释放int main() &#123;    allocateOnHeap();  // 调用函数，在堆上分配内存    allocateOnStack();  // 调用函数，在栈上分配内存    return 0;&#125;\n\n运行结果：\nValue on heap: 5\nValue on stack: 10\n二、数据结构中的堆和栈\n堆是一种基于树结构实现的数据结构，用于动态分配内存。堆中的数据没有特定的顺序，可以随时插入或删除元素，并且通常用于实现优先队列、堆排序等算法。\n栈是一种基于线性结构实现的数据结构，遵循”后进先出”（Last In First Out, LIFO）原则。主要用于临时存储和回收数据，例如函数调用时的参数传递、返回地址保存、局部变量存储等。\n\n三、碎碎念从openAI公司的大语言模型GPT3.5发布才不到一年，国产的 AI也全方位跟进了。最先的百度的文心一言，然后讯飞的星火助手，阿里的通义大模型，貌似目前只有腾讯比较落后一点？今天刚发现搜狗输入法也都支持ai了，不得不感叹发展真的好迅速啊，搜索引擎，办公软件，输入法，方方面面都越来越融入ai了。\n而对于我自己而言，也越来越离不开ai了，包括这个博文的学习和代码生成，大大减少我学习的成本。插个眼，不知道一年后ai能发展成什么样呢？\n","categories":["日常随笔"],"tags":["内存","操作系统"]},{"title":"旧的时光告一段落","url":"/2023/09/23/%E6%97%A7%E7%9A%84%E6%97%B6%E5%85%89%E5%91%8A%E4%B8%80%E6%AE%B5%E8%90%BD/","content":"前言：今天晚上电脑120的换届正式结束了，以后也要和电脑120说再见咯，祝愿我的老伙伴们能带领120越走越远啦。从21年10月份进入电脑120，成为学习小组成员，到23年9月底换届，满打满算呆满了两年，也是陪伴我走过大学前两年生活的一个小家园，写篇文章来回顾下呆在120的经历，也算是我自己两年的个人经历回顾啦。\nPart Ⅰ初进大学的时候就听到120的名称，当时还是一个组织，不过当时并没有通过这个名字了解到具体是干什么的。直到通过了学习小组的笔试和面试，在见面会上的时候才对电脑120有了一定的了解。进入120的第一件趣事就是笑璐学姐发短信让我和晓龙加她QQ，当时我心想：你谁啊就让我加你QQ，反正你短信里也没说，我就回复个收到就完了（逃 ， 结果后来还是没逃过主动加笑璐姐QQ哈哈。\n\n\n结果意外的发现这个学姐还是许昌老乡，不过不是魏都区是襄县滴。\n\n话说我这一届报学习小组的人好多哇，好像是报了一百多个最后留了一半？当时晚上搞到好晚欸。另外在学习小组转正式成员面试的时候，还记得那个晚上就已经转成线上了，突然的排队做核酸打乱了原本的面试流程。这样一比较起来22级招新的时候确实挺简单的。\n当时对谁印象比较深来着？喔对，在学习小组那一对小情侣，不过后来他们都没报正式成员。当然，还是少不了我们的帅学长，一直帅学长帅学长的叫，以至于后来有段时间忘了帅学长的本名儿……\n当然，在学习小组的见面会结束时见到了治毅，跟我想象的不太一样哇，暑假没见面的时候以为是一个长得很理工的理工男，但是不知道为啥有点二次元的感觉啊哈哈。不过很可惜后来没有坚持下来。究竟是自己没有坚持下来呢，还是自己到底不合适呢？答案交给未来吧。\n\n进入120没多久，就迎来了让我印象深刻的第一件事儿。学院要举办学霸经验沙龙分享，但是因为我们学院没学长学姐，就让从21级中上去发言。无所畏惧的我直接报名去了，不过真到开始前还是有点紧张滴，还在北湖边偷偷练习了好几次稿子。\n接下来就是度过了无聊又充实的一个学期，喔对，还把当时在第一学期散打班遇到志伟同学拉到了电脑120，当然，最重要的是认识了一个志同道合的朋友~（还记得最开始5公里连30分钟都跑不进的我俩哈哈）\n重复的周赛，复盘，刷题，以及偶尔的跑跑步，确实无聊又苦闷。也感谢当时女朋友的出现，让我有了时刻充满干劲的一个理由。\n当然，我更感谢现在身边陪伴着我的xf，第一次让我真真切切体会到了被喜欢，被爱的感觉。一个人爱的能力，是从被爱中获得的。正是因为xf，让我体验过爱的感觉，才让我学会了真正去爱。\n虽然开始学的很多东西后来都没再用上，不过庆幸的是，把跑步这个习惯坚持了下来。\n\nPart Ⅱ大二学期开始，也就是从2022年后半年，好玩好动的我因为封校而变得苦闷起来。沉不下心学习，每天不知道在学什么，可能唯一快乐的日子就是在电脑120日子和跑步的时光。\n还记得秋天的那两个月，基本上每天晚上都在操场跑步，最终在十月底，在操场完成了人生中的第一个半程马拉松。同时也刷新了月跑量98公里的记录。\n\n但同样的，在那个学期我的绩点拉到了最低。\nPart Ⅲ到大二下学期，疫情防控已经完全放开。于是，我在2022年的年度清单中写上了5个目标。\n当时还觉得已经晚了，玩不了多少地儿了，结果还是跑了不少的地方。五岳中已经爬完了三座，参加了第一场正式的马拉松赛事，跑了鹤壁，洛阳，新乡，也自驾去了山西，跑了山东日照，看了想看的大海。当然，还有跟xf去了开封。\n\n出乎意料的是，最后的学业成绩并没有拉下，反而出乎意料的好。\nPart IV时间来到现在，也就是大三刚开学。因为一些政策的改变，决定还是要去争一些东西，以后也不能再经常跑着出去玩了，该玩的时候已经玩过啦，剩下的一年就是好好的努力啦。此外，不知不觉间2023年度清单已经完成了4&#x2F;5了，突然好有成就感哇。只是明年的年度清单就该变成学业为主啦~\n最后，借用一个学长的博客来写下我自己对大三两个学期的寄托：\n\n加油！共勉！\n\n","categories":[],"tags":[]},{"title":"SQL操作学习笔记","url":"/2023/09/22/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"前言：才发现下学期的课表上是《数据库系统原理》，而不是数据库应用，遂趁假期抽出一周来把基础的应用操作给学习了。关于为什么要学原理而不是直接应用，知乎上有篇回答的很好：\n\n计算机系为什么要学数据库原理和设计？ - 南慕伦的回答 - 知乎 https://www.zhihu.com/question/273489729/answer/382181550\n\n一、查询\n全表查询：select * from 数据表name\n\n选择查询：select name,age from student  从数据表student中选择name age列查看\n\n查询改名：select name as 学生姓名,age as 学生年龄 from student 从student表中查询name列取别名为学生姓名\n\n常量和运算：select name,score,score*2 as double_score from student  从student的数据表中选择出所有学生的姓名（name）和分数（score），并且额外计算出分数的 2 倍（double_score）。汉字字符加单引号。\n\n\n\n\n\nname\nscore\ndouble_score\n\n\n\n鸡哥\n2.5\n5\n\n\n鱼皮\n400\n800\n\n\n热dog\n600\n1200\n\n\n摸FISH\n360\n720\n\n\n李阿巴\n120\n240\n\n\n老李\n500\n1000\n\n\n\n条件查询：\nselect name,score from student where name=&#39;鱼皮&#39;从student 的数据表中选择出所有学生的姓名（name）和成绩（score），学生姓名为 ‘鱼皮’。\nselect name,age from student where name!=&#39;热dog&#39;从student的数据表中选择出所有学生的姓名（name）和年龄（age），学生姓名不等于 ‘热dog’ 。\n\n在MySQL中，单等号和双等号都用于条件判断语句中，但是它们的语义不同。\n\n单等号（&#x3D;）用于赋值，将右侧的值赋给左侧的变量。例如：SET name = &#39;John&#39;。\n双等号（&#x3D;&#x3D;）或等于号（&#x3D;）用于条件判断，测试两个表达式是否相等。例如： SELECT * FROM student WHERE id = 100 表示筛选出id值为100的学生信息。\n\n需要注意的是，在MySQL中，双等号（&#x3D;&#x3D;）和等于号（&#x3D;）有相同的语义，即用于测试两个表达式是否相等。但是在其他编程语言中，这两个符号可能具有不同的含义，应根据具体情况使用。\n\nselect name,age,score from student where age is not null从 student 的数据表中选择出所有学生的姓名（name）、年龄（age）和成绩（score），学生年龄不为空值。（查询空值 is null)\nselect name,score from studen where name not like &#39;%李%&#39;;从 student 的数据表中选择出所有学生的姓名（name）、年龄（age）和成绩（score），学生姓名不包含李。(查询包含 like)\n\n\n%张：以”张”结尾的字符串。 例如，”李张”、”王张”、”赵张” 等都会被匹配到，因为它们都以”张”结尾。\n\n%张%：包含”张”的字符串。 例如，”张三”、”李张四”、”王张五”等都会被匹配到，因为它们中都包含了”张”这个字符。\n\n张%：以”张”开头的字符串。 例如，”张三”、”张四光”、”张五风”等都会被匹配到，因为它们都以”张”开头。\n\n\n\nselect name,score from student where name like &#39;%李%&#39; or score&gt;500学生的姓名包含 “李”，或者成绩（score）大于 500。\n\n\n二、去重\ndistinct去重：\nselect distinct class_id,exam_num from student从student的数据表中选择出所有不重复的班级 ID（class_id）和考试编号（exam_num）的组合。（剔除掉有相同数值的组合）\n\n\n三、排序\norder by排序：\nselect name,age,score from student order by score desc,age asc按照成绩从大到小排序，如果成绩相同，则按照年龄从小到大排序。\n\n\n\norder by也可用于自定义排序，使用when…then…语法。如ORDER BY CASE category   WHEN &#39;电子产品&#39; THEN 1   WHEN &#39;家居用品&#39; THEN 2   WHEN &#39;食品&#39; THEN 3   ELSE 4，自定义的排序规则，按照’电子产品’、’家居用品’、’食品’的顺序排序结果，并对其他类别赋予排序值4。\n\n四、截断和偏移假设你有一张待办事项清单，上面有很多任务。当你每次只想查看其中的几个任务时，会怎么办呢？\n1）你可以使用手指挡住不需要看的部分（即截断）\n2）根据任务的编号，直接翻到需要查看的位置（即偏移）\n在 SQL 中，我们使用 LIMIT 关键字来实现数据的截断和偏移。截断和偏移的一个典型的应用场景是分页，即网站内容很多时，用户可以根据页号每次只看部分数据。\n\nlimit截断偏移：\n\n#按照年龄从小到大排序，从第 2 条数据开始、截取 3 个学生的信息。select name,age from student order by age asc limit 1,3\n\n五、条件分支case when 判断条件：一种条件表达式，用于在 SQL 查询中根据不同的条件返回不同的结果。case…end是其实语句和结束语句，when …then…相当于if 。\n\n将学生按照年龄划分为三个年龄等级（age_level）：60 岁以上为 “老同学”，20 岁以上（不包括 60 岁以上）为 “年轻”，20 岁及以下、以及没有年龄信息为 “小同学”。返回结果应包含学生的姓名（name）和年龄等级（age_level），并按姓名升序排序：\n\nselect name, \t\t\t\t\t\t\t\t\t\t#根据返回结果要求，这里不能加上age    case         when (age&gt;60) then &quot;老同学&quot;        when (age&gt;20 and age &lt;=60) then &quot;年轻&quot;        else &quot;小同学&quot;     end as age_level\t\t\t\t\t\t\t\t#end as 作为新列的别名from student order by name asc\n\n六、函数\n时间函数:SQL Date 函数 (w3school.com.cn),部分函数如下：\n\nselect date() as 列表名 获取 日期 并对日期新取列名\t\n\nselect datetime() as 列表名获取 日期时间 并对日期新取列名\n\nselect time()  as 列表名获取 时间 并对时间取列名\n\n\n\n\neg：select name,date() as 当前日期 from student 展示所有学生的姓名（name）和当前日期（列名为 “当前日期”）\n\n\nCURRENT_DATE：返回当前的日期。\nCURRENT_TIME：返回当前的时间。\nCURRENT_TIMESTAMP：返回当前的日期和时间。\nDATE：从日期时间值中提取日期部分。\nTIME：从日期时间值中提取时间部分。\nYEAR：从日期或日期时间值中提取年份。\nMONTH：从日期或日期时间值中提取月份。\nDAY：从日期或日期时间值中提取天数。\nHOUR：从时间或日期时间值中提取小时。\nMINUTE：从时间或日期时间值中提取分钟。\nSECOND：从时间或日期时间值中提取秒数。\nDATEDIFF：计算两个日期之间的差值（以天为单位）。\nDATE_ADD：将指定的时间间隔添加到日期或日期时间值。\nDATE_SUB：从日期或日期时间值中减去指定的时间间隔。\n\n\n\n字符串处理：字符串处理是一类用于处理文本数据的函数。它们允许我们对字符串进行各种操作。\n#筛选出姓名为 &#x27;热dog&#x27; 的学生，展示其学号（id）、姓名（name）及其大写姓名（upper_name）select id,name,upper(name) as upper_namefrom studentwhere name=&#x27;热dog&#x27;\n\n\n\nCONCAT：连接两个或多个字符串。\nLENGTH：返回字符串的长度。\nSUBSTRING：从字符串中提取子字符串。\nUPPER：将字符串转换为大写。\nLOWER：将字符串转换为小写。\nTRIM：去除字符串两端的空格或指定的字符。\nLEFT：从左侧截取字符串指定数量的字符。\nRIGHT：从右侧截取字符串指定数量的字符。\nREPLACE：替换字符串中的指定部分。\nCHARINDEX：查找子字符串在字符串中第一次出现的位置。\nSUBSTRING_INDEX：根据指定的分隔符，返回字符串中的一部分。\n\n\n\n\n七、分组聚合聚合函数：聚合函数是一类用于对数据集进行 汇总计算 的特殊函数。它们可以对一组数据执行诸如计数、求和、平均值、最大值和最小值等操作。\neg1：\n\n\n\norder_id\ncustomer_id\namount\n\n\n\n1\nA001\n100\n\n\n2\nA002\n200\n\n\n3\nA001\n150\n\n\n4\nA003\n50\n\n\nSELECT COUNT(*) AS order_num FROM orders;使用count函数计算orders表总数（即行数）并展示order_num的数值\nSELECT COUNT(DISTINCT customer_id) AS customer_num FROM orders;使用count（distinct 列名）函数计算orders表中不同客户的数量并展示total_amount的数值\nSELECT SUM(amount) AS total_amount FROM orders;使用sum函数计算orders表订单总金额\neg2：\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、class_id（班级编号）、score（成绩）。请你编写一个 SQL 查询，汇总学生表中所有学生的总成绩（total_score）、平均成绩（avg_score）、最高成绩（max_score）和最低成绩（min_score）。select     sum(score) as total_score,     avg(score) as avg_score,    max(score) as max_score,    min(score) as min_scorefrom     student;\n\n\n\n\n分组聚合：按照group by中的关键字进行分组，可以用来合并重复关键字项。\n单字段分组：\n\n\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、class_id（班级编号）、score（成绩）。请你编写一个 SQL 查询，统计学生表中的班级编号（class_id）和每个班级的平均成绩（avg_score）。select    class_id,    avg(score) as avg_scorefrom    studentgroup by    class_id;\n\n​\t\t多字段分组：\t\t\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、class_id（班级编号）、exam_num（考试次数）、score（成绩）。请你编写一个 SQL 查询，统计学生表中每个班级每次考试的总学生人数（total_num）。select    class_id,    exam_num,    count(*) as total_numfrom    studentgroup by    class_id,    exam_num;\n\n\nCOUNT( * )：表示计算指定表中所有记录的数量，无论具体列的值是什么。它不考虑NULL值，只关注行的存在与否。因此，COUNT( * ) 返回的是表中的总行数。\n\n\nhaving子句：HAVING 子句用于在分组聚合后对分组进行过滤。它允许我们对分组后的结果进行条件筛选，只保留满足特定条件的分组。与条件查询 WHERE 子句的区别在于，WHERE 子句用于在 分组之前 进行过滤，而 HAVING 子句用于在 分组之后 进行过滤。\n\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、class_id（班级编号）、score（成绩）。请你编写一个 SQL 查询，统计学生表中班级的总成绩超过 150 分的班级编号（class_id）和总成绩（total_score）。select     class_id,    sum(score) as total_scorefrom studentgroup by class_idhaving sum(score)&gt;150;\n\n\n\n八、查询进阶1、关联查询在 SQL 中，关联查询是一种用于联合多个数据表中的数据的查询方式。\n\ncross join：是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 每一行 与右表的 每一行 进行组合，返回的结果是两个表的笛卡尔积（两个集合的所有可能有序对的集合）。\n\n#将员工表和部门表的所有行组合在一起，获取员工姓名、工资、部门名称和部门经理，示例 SQL 代码如下：SELECT e.emp_name, e.salary, e.department, d.managerFROM employees eCROSS JOIN departments d;\n\n\ninner join：返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。\n\n\n多表关联查询的 SQL 中，我们最好在选择字段时指定字段所属表的名称（比如 e.emp_name），还可以通过给表起别名（比如 employees e）来简化 SQL 语句。\n\neg1:\n#将学生表和班级表的所有行组合在一起，并返回学生姓名（student_name）、学生年龄（student_age）、班级编号（class_id）以及班级名称（class_name）。SELECT s.name AS student_name, s.age AS student_age, s.class_id, c.name AS class_nameFROM student sJOIN class c ON s.class_id = c.id;\n\neg2:\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、class_id（班级编号）。还有一个班级表 class，包含以下字段：id（班级编号）、name（班级名称）、level（班级级别）。#请你编写一个 SQL 查询，根据学生表和班级表之间的班级编号进行匹配，返回学生姓名（student_name）、学生年龄（student_age）、班级编号（class_id）、班级名称（class_name）、班级级别（class_level）。select     s.name as student_name,    s.age as student_age,    s.class_id as class_id,    c.name as class_name,    c.level as class_levelfrom student sjoin class c on  s.class_id = c.id;\n\n\nouter join:  根据指定的关联条件，将两个表中满足条件的行组合在一起，并 包含没有匹配的行 。在 OUTER JOIN 中，包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，它们分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分。\n\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、class_id（班级编号）。还有一个班级表 class，包含以下字段：id（班级编号）、name（班级名称）、level（班级级别）。#请你编写一个 SQL 查询，根据学生表和班级表之间的班级编号进行匹配，返回学生姓名（student_name）、学生年龄（student_age）、班级编号（class_id）、班级名称（class_name）、班级级别（class_level），要求必须返回所有学生的信息（即使对应的班级编号不存在）。SELECT    s.name AS student_name,    s.age AS student_age,     c.id AS class_id,    c.name AS class_name,    c.level AS class_levelFROM    student sLEFT JOIN class c ON s.class_id = c.id;\n\n2、子查询子查询就像是在一个盒子中的盒子，外层查询是大盒子，内层查询是小盒子。执行查询时，我们首先打开小盒子获取结果，然后将小盒子的结果放到大盒子中继续处理。\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。还有一个班级表 class，包含以下字段：id（班级编号）、name（班级名称）。#请你编写一个 SQL 查询，使用子查询的方式来获取存在对应班级的学生的所有数据，返回学生姓名（name）、分数（score）、班级编号（class_id）字段。select name,score,class_idfrom studentwhere class_id in(    select distinct id    from class);\n\n子查询——exists：子查询中的一种特殊类型是 “exists” 子查询，用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。还有一个班级表 class，包含以下字段：id（班级编号）、name（班级名称）。#请你编写一个 SQL 查询，使用 exists 子查询的方式来获取 不存在对应班级的 学生的所有数据，返回学生姓名（name）、年龄（age）、班级编号（class_id）字段。select name,age,class_idfrom studentwhere not exists(    select 1    from class    where student.class_id = class.id);\n\n3、组合查询组合查询是一种将多个 SELECT 查询结果合并在一起的查询操作。其中union操作用于将两个或多个查询的结果集合并， 并去除重复的行 。即如果两个查询的结果有相同的行，则只保留一行。union all操作也用于将两个或多个查询的结果集合并， 但不去除重复的行 。即如果两个查询的结果有相同的行，则全部保留。\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。还有一个新学生表 student_new，包含的字段和学生表完全一致。#请编写一条 SQL 语句，获取所有学生表和新学生表的学生姓名（name）、年龄（age）、分数（score）、班级编号（class_id）字段，要求保留重复的学生记录。select name,age,score,class_idfrom studentunion allselect name,age,score,class_idfrom student_new\n\n4、开窗函数开窗函数是一种强大的查询工具，它允许我们在查询中进行对分组数据进行计算、 同时保留原始行的详细信息 。\n开窗函数可以与聚合函数（如 SUM、AVG、COUNT 等）结合使用，但与普通聚合函数不同，开窗函数不会导致结果集的行数减少。\n\nsum  over：按照一定规则聚合函数\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。#请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并计算每个班级的学生平均分（class_avg_score）。select     id,name,age,score,class_id,    avg(score) over (partition by class_id) as class_avg_scorefrom    student;\n\nsum over order by：按照一定规则聚合函数后并进行一定排序\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。#请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并且按照分数升序的方式累加计算每个班级的学生总分（class_sum_score）。select     id,name,age,score,class_id,    sum(score) over(partition by class_id order by score asc) as class_sum_scorefrom    student;\n\nrank：根据指定列的结果或表达式对行进行排序，可产生相同排名\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。#请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并且按照分数降序的方式计算每个班级内的学生的分数排名（ranking）。select     id,name,age,score,class_id,    rank () over(        partition by class_id        order by score desc    )    as rankingfrom    student\n\nrow_number：根据指定列的结果或表达式对行进行排序，不可产生相同排名\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。#请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并且按照分数降序的方式给每个班级内的学生分配一个编号（row_number）。select    id,name,age,score,class_id,    row_number() over (        partition by class_id        order by score desc    )    as row_numberfrom    student;\n\n\n\nRANK()函数：RANK()函数计算并返回每行的排名，如果有相同的值，则会跳过相同的排名并产生连续的排名，下一个排名将会增加与前面相同值的数量相等的步长。例如，如果有两个学生得分相同，他们的排名将是相同的，下一个学生的排名将增加2。如果两个学生得分不同，他们将获得不同的排名。如果两个学生得分相同，则他们将获得相同的排名，而下一个学生将获得跳过相同分数数量的排名。\nROW_NUMBER()函数：ROW_NUMBER()函数计算并返回每行的唯一排名，它不考虑相同值的情况。即使有多行具有相同的值，它们也会分配不同的排名。这意味着对于具有相同分数的学生，他们将获得不同的排名。\n\n因此，主要区别在于RANK()函数处理相同值时可能会跳过排名，而ROW_NUMBER()函数始终产生唯一的排名。具体使用哪个函数取决于您的需求和对排名逻辑的理解。\n\n\nlag&#x2F;lead：根据一定规则获取当前行之前&#x2F;之后数据\n#假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、age（年龄）、score（分数）、class_id（班级编号）。#请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并且按照分数降序的方式获取每个班级内的学生的前一名学生姓名（prev_name）、后一名学生姓名（next_name）。select     id,name,age,score,class_id,    lag(name,1,null) over(        partition by class_id order by score desc    )as  prev_name,    lead(name,1,null) over(        partition by class_id order by score desc    )as next_namefrom     student\n\n九、其他注意事项\nSQL下标也从0开始\nSQL不区分大小写\nSQL查询一个表只用一个select from\n一段SQL语句只有最结尾使用分号\n查询不同的内容之间使用逗号隔开\n\n","categories":["日常随笔"],"tags":["sql","数据库"]},{"title":"带www和不带www的域名跳转","url":"/2023/08/12/%E5%B8%A6www%E5%92%8C%E4%B8%8D%E5%B8%A6www%E7%9A%84%E5%9F%9F%E5%90%8D%E8%B7%B3%E8%BD%AC/","content":"前言：这个域名总算备案完了，也从github page迁移到了阿里云的服务器上，访问速度终于不再是龟速了。因此需要将wuzhiyou.top跳转到www.wuzhiyou.top上。\n\n\n\n解决办法：\n在宝塔上添加完两个网站后，对一个网站使用301重定向到另一个网站。但是有点奇怪的是在阿里云上已经重定向过了，不知道为什么没有起作用喔？\n\n","categories":["日常随笔"],"tags":["博客"]},{"title":"JavaScript复习","url":"/2023/07/15/JavaScript%E5%A4%8D%E4%B9%A0/","content":"前言：暑假空闲时间比较多，之前的落下的一个个都要补上。在牛客先刷刷题吧，前端至少要成为自己熟练掌握的一项，不管是为了工作还是以后读研，总得有拿出手的一项熟练的领域啊。\n一、JavaScript字符串 单引号双引号不区分\nvar定义所有 定义前不分类型\ndom输出换行符&lt;br/&gt;，conslog输入换行&#39; \\n &#39;\n类型转换\nparseInt（）  &#x2F;&#x2F;转换成int形式\nparseFloat（） &#x2F;&#x2F;转换成float形式\nisNaN() \t&#x2F;&#x2F;检查是否是非数字\n\n\n两种特殊类型\n\n获取类型\n\n三种在不同界面的不同输出：\nalert（）\nconsole.log（）\ndocument.write（）\n\n特殊进制的数值\n\n字符串\n\n\n俩等号和仨等号\n\n\n组合语句这样输出\n\nSwitch\n\n函数调用\n\t\n\n形参不强调数据类型 其余一样\n作用域\n\n\n注意访问和赋值的不同、\n对象obj对象\n\nkey-value\n \t\n对空obj增加键值对 &#x2F; 改变\n删除\n\n查找访问\n\n排序冒泡排序\n选择排序\n数组数组\n\n数组长度\n\npush\n\npop\n\nunshift\n\nshift\n\nreverse\n\nsplice\n\n sort默认按位排序 如11 12 13 2 21 23 3 31 32\nreturn a-b  从小到大\nreturn b-a 从大到小\n\njoin\n\n\nconcat\n\nslice\n包前不包后\n \t\n 没有数据返回就是-1\nindexOf\n以下为数组function：\n\nforEach 遍历一次执行一次里边的功能\n\n\n\nmap 将一个数组遍历 以一定规则映射到另一个数组里 遍历时确定返回值\n\n\nfiflter 过滤数组 返回过滤后的数组\n\n\nevery 判断数组每一项元素条件 返回一个布尔值\n\nsome 判断数组有一项元素条件 返回一个布尔值\n16种数组方法：\n\n字符串首位连接连个字符串：加号\n\n\ncharAt 获取索引位置的字符串\n\ntoLowerCase\n\ntoUpperCase\n\nreplace\n\ntrim\n\nsplit\n\n\nsubstr substring slice\n\n\n数字针对数字 仍旧使用var定义\n\n获取数字↑\n对数字的操作↓\n\n\n\n\n结果保留正数  其实是算术平方根\n\n\n\n\n【不均衡概x率随机获取0-10范围内的整数】\n\n【均匀概率随机获取0-10范围内的整数】\n\n\n\n获取0~△（x，y）  再加x\n\n时间获取\n\n\n \t\n\n\n0是一月 11是十二月\n星期信息：即是星期几。1-6代表周一到周六 0是周日\n\n设置\n【封装函数 获得两个节点之间的时间差（天 时 分表示）】：\n时间戳相减\n\n对象数据类型返回\n\n\nBOMbrowser object model\n可视窗口尺寸： \n\n\n单位px\n\n如何和某个事件绑定\n\n询问框有确定和取消按钮，点确定返回true，取消返回false\n输入框：\n返回值是输入内容，取消返回null\n开启和关闭标签页 \n（js中页面元素id可以直接当做变量使用）\n\n均在控制台触发\n\n\n相当于左右箭头\n\n\n\n\n\n瞬间滚动\n平滑滚动：\n\n定时器\n\n\n返回值均表示   第几个定时器  不区分种类\n关闭定时器：\n\n关闭时不区分种类 可以互相关闭  即两种用法选择一种使用即可\n温馨提示：close 是关键字，取ID时可以将c大写哦\n给按钮绑定事件：\n\nDOM(上)Document Object Model\n获取元素：\n\n如获取到的这个元素为：\n\n多了一个s\n伪数组按照数组排列方法，但是不能使用数组类方法。 \n\n拓展：关于多类，html元素可以使用多类，中间用空格隔开，例如&lt;h2 class=&quot;city main&quot;&gt;London&lt;/h2&gt;中h2同属于city类和main类，并从这两个类中获取css样式。\n\n \n  \n div span  a  h1都是标签名\n\n选择器可以直接是**标签名 / .类名 / #id名**，即三种均可，只不过是返回第一个元素\n \n获取元素共五种方法：\n\n操作元素内容：\n\n操作文本内容：通过点击按钮或某事件完成对html的标签内容修改（ 不改变原标签）\n操作超文本内容：通过点击按钮或某事件完成对html的标签或标签内容修改\n如何获元素？自己设置一个变量，运用dom操作从网页中获取。对元素的修改能直接运用到网页中。\n点击button按钮修改文本内容：\n  将p标签换成span标签：\n\n​    \n\n元素的属性有id type等\n更改元素原生属性：\n\n\n自定义修改属性（？）\n操作类名\n\n\n中划线名需改成驼峰名，如background-color改成backgroundColor。\n\n\n对于非行内样式，只能获取不能更改。\n\n \n\nDOM(下)节点操作\n\n\n创建节点\n\n创建后插入节点  父节点也需要使用var获取\n\n删除节点\n\n替换节点\n\n克隆节点 默认是false 不克隆后代 \n\n获取元素尺寸 区别在于是否加上border区域尺寸\n事件​\t\t\t\t\t”事件源.on事件类型&#x3D;事件处理函数“\n\n常用事件类型：\n\n事件对象：以一个对象数据类型记录下每次事件触发时的一些相关信息。如鼠标点击事件的事件对象：\n  \n接受事件对象的方法\n \n鼠标事件相关信息\n\n\n\n\n\n事件传播：\n当点击小盒子时，先从外向内传，再从内向外传。 总共三个阶段。\n浏览器传播机制默认从冒泡阶段开始。\n\n如点击inner小块儿，另外两个也会被触发onclick的function 。\n\n阻止事件传播\n\n事件委托（？）\n\n通过target判断\n面向对象1、概念\n面向对象的核心:高内聚低耦合(就是对面向过程的高度封装)\n\n机器 即 构造函数\n2、创建对象的方式若用var obj字面量方式创造，则不符合“批量生产”原则\n若用内置构造函数创建对象， 依旧不满足批量生产。\n\n使用工厂函数创建对象\n\n可初步实现批量制造要求\n\n使用形参后，可实现批量且内容不同，满足条件。\n使用自定义构造函数创建对象 需要new和this一起使用\n\n\n3、构造函数的使用和普通函数没有区别 只是使用的时候和new关键字连用\n\n4、构造函数的不合理\n\n调用function内的function\n5、原形（？）prototype是一个对象\n\n如图 构造一个孔的Person的function函数prototype输出结果\n\n6、面向对象选项卡-案例ES6新增语法ES6 是新的 JS 语法标准。ES6 实际上是一个泛指，泛指 ES 2015 及后续的版本。\n jQuery 的语法是偏向于 ES3 的。而现在主流的框架 Vue.js 和 React.js 的默认语法，都是用的 ES6。\t\n新增let const：var、let、const 的本质区别是什么 - 知乎 (zhihu.com)\n简而言之，let是局部作用域，var是全局作用域，const是全局中的常量作用域。\n新增数组的解构赋值：可以将数组中的位置提取出来，按照对应位置一一赋值给变量：\nlet [a, b, c] = [1, 2, 3];\n以及对对象的解构复制：\nconst person = &#123; name: &#x27;qianguyihao&#x27;, age: 28, sex: &#x27;男&#x27; &#125;;let &#123; name, age, sex &#125; = person; // 对象的结构赋值console.log(name); // 打印结果：qianguyihaoconsole.log(age); // 打印结果：28console.log(sex); // 打印结果：男\n\n对字符串的解构赋值：\nconst [a, b, c, d] = &#x27;hello&#x27;;console.log(a);console.log(b);console.log(c);console.log(typeof a); //输出结果：string打印结果：helstring\n\n\n\n新增箭头函数\n\n\n箭头函数本身不绑定 this，this 指向的是箭头函数定义位置的 this（也就是说，箭头函数在哪个位置定义的，this 就跟这个位置的 this 指向相同）。\nvar name = &#x27;许嵩&#x27;;var obj = &#123;    name: &#x27;千古壹号&#x27;,    sayHello: () =&gt; &#123;        console.log(this.name);    &#125;,&#125;;obj.sayHello();//打印结果 许嵩\n\n\n\n参数默认值\nfunction fn(param = &#x27;hello&#x27;) &#123;    console.log(param);&#125;//方法被调用时，如果没有给参数赋值，那就是用默认值；//方法被调用时，如果给参数赋值了新的值，那就用新的值。\n\n\n\n\n\n剩余参数\n\n拓展运算：将数组或者对象拆分成逗号分隔的参数序列。\n（而剩余参数是将剩余的元素放到一个数组中）\nconst arr = [10, 20, 30];...arr // 10, 20, 30      注意，这一行是伪代码，这里用到了扩展运算符console.log(...arr); // 10 20 30console.log(10, 20, 30); // 10 20 30\n\neg1\n\n\n\n\n\n\n二、关键词回忆复习obj   \n三种输出\nvar\ntypeof\n五种数据类型\n\n\n\n时间的 获取 与 设置\nBOM事件：alert confirm prompt open close\n\n总结：说了这么多其实还是得和html一样自己敲一遍才能记得住。。。\n三、案例以后所有案例用vscode写成html，用typora写代码简直太受罪了…\n1、回到顶部一、使用js中dom操作实现\n//需求：下拉滚动条，导航栏浮现，右下角回到顶部按钮浮现。&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        *&#123;            margin: 0px;            padding: 0px;        &#125;        body&#123;            height: 2500px;        &#125;        .header&#123;            width: 100%;            height: 80px;            display: flex;            justify-content: center;            align-items: center;            font-size: 30px;            color: aqua;            background-color: blueviolet;            position: fixed;            top: -80px;            left: 0;            transition:bottom .5s linear ;        &#125;        .goTop&#123;            width: 50px;            height: 50px;            background-color:pink;            color: aliceblue;            font-size: 20px;            line-height: 25px;            text-align: center;                        position:fixed;            bottom: 50px;            right: 50px;                        display: none;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;header&quot;&gt;i am top&lt;/div&gt;    &lt;div class=&quot;goTop&quot;&gt;goTop&lt;/div&gt;    &lt;script&gt;        var header = document.querySelector(&#x27;.header&#x27;);        var goTop  = document.querySelector(&#x27;.goTop&#x27;);            window.onscroll=function()&#123;            var height= document.documentElement.scrollTop || document.body.scrollTop;            if(height&gt;=300)&#123;                header.style.top=&#x27;0px&#x27;;                goTop.style.display=&#x27;block&#x27;;            &#125;            else&#123;                header.style.top=&#x27;-80px&#x27;;                goTop.style.display=&#x27;none&#x27;;                &#125;                    &#125;            goTop.onclick=function()&#123;            alert(&quot;this click has been started&quot;);            // header.style.display=&#x27;block&#x27;;  非行内元素只能获取不能更改            window.scrollTo(&#123;            top: 0,                   //必须要跟逗号  scroolTo语法规定            // left: 0,            behavior: &#x27;smooth&#x27;            &#125;);        &#125;    &lt;/script&gt;&lt;/body&gt;\n\n2、全选按钮//需求：全选按钮生效，且四个单选勾上后全选自动勾上。&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;    \t*&#123;    \t\tmargin:0;    \t\tpadding:0;    \t&#125;    \t.box&#123;    \t\twidth:100px;    \t\tpadding:20px;    \t\tborder:1px solid pink;    \t\tmargin:30px auto;    \t\tborder-radius: 5px;    \t&#125;    \thr&#123;    \t\tmargin:10px 0;    \t&#125;    &lt;/style&gt;&lt;body&gt;\t&lt;div class=&quot;box&quot;&gt;\t\t全选:&lt;input type=&quot;checkbox&quot;&gt;&lt;br /&gt;\t\t&lt;hr /&gt;\t\t&lt;input type=&quot;checkbox&quot;&gt;选项一&lt;br /&gt;\t\t&lt;input type=&quot;checkbox&quot;&gt;选项二&lt;br /&gt;\t\t&lt;input type=&quot;checkbox&quot;&gt;选项三&lt;br /&gt;\t\t&lt;input type=&quot;checkbox&quot;&gt;选项四&lt;br /&gt;\t&lt;/div&gt;&lt;/body&gt;\n\n3、选项卡4、鼠标跟随5、轮播图四、补充css transition 动画效果\nhtml 自定义属性自定义属性(37条消息) HTML - 标签自定义属性_cjn.的博客-CSDN博客_标签自定义属性\nCSS3 :nth-child() 选择器 (w3school.com.cn)\nn从0取值,子选项按钮2开始,n+2取值就是(2,3,4,…)\n事件委托JavaScript 事件委托详解 - 知乎 (zhihu.com)\nnew运算符new 运算符 - JavaScript | MDN (mozilla.org)\nJS 中构造函数和普通函数的区别_构造函数和普通函数在定义上的区别_灵灵7的博客-CSDN博客\n理解JS的prototype - 知乎 (zhihu.com)\nflex 1 ：『前端大白话』之 “flex:1” - 掘金 (juejin.cn)\nflex-grow - CSS：层叠样式表 | MDN (mozilla.org)\n\n","categories":["编程相关"],"tags":["前端"]},{"title":"扶沟县冯老村三下乡 小记","url":"/2023/07/15/%E5%86%AF%E8%80%81%E6%9D%91%20%E4%B8%89%E6%97%A5%E5%B0%8F%E8%AE%B0/","content":"前言：之前从来没有使用长篇文字来记录某个地点的游记或者或者感悟，虽有记录日记的习惯，但也只是流水账。受一个19级（爱因斯坦）学姐的影响，尝试突破一下自己的舒适区~\n一、Day1本次三下乡时间并不算长，只进行了三天，扣除掉赶车其实满打满算也就一天半的实践活动时间。\n3号上午八点出发前往目的地——周口市扶沟县大李庄乡冯老村。冯老村距龙子湖并不算远，一百公里左右，花了两个小时到了村庄居委会。\n\n\n进村后才了解到原来冯老村是我们河南农业大学的定点扶贫村庄，从2016年开始，信管学院的苏楠书记便来到冯老村成了驻村书记，到现在接待我们的梁老师，已经是第三任驻村书记了。在跟梁老师聊天的过程中，我们不止一位同学提到从冯老村的基建来看，感觉冯老村并不是特别贫困的村，比河南大部分村庄已经要好。梁老师也是很骄傲的告诉我们，从我们学校接手定点扶贫冯老村开始，村庄已经有了天翻地覆的变化。来了这么多年，总归是要做出来点儿成绩的。从梁老师骄傲和兴奋的语气中，让我初次对这个满脸胡茬，不修边幅但是说话文质彬彬的老师产生了好感。\n\n中午吃了熬菜和馒头后，便回住的地方简单休息。我们十几个男生住的是一个接近废弃的幼儿园小学的教室里，目前只剩一个学生了。这似乎也是中国大多乡村小学的现状：无法留住学生。镇上的学校还好，尤其是像冯老村这种村里的小学，生源流失严重，像我姥娘家隔壁村的村幼儿园小学，目前也是倒闭变成了练车场。那也是我曾经上过半个学期的幼儿园，虽已无什么深刻印象，但还是记住了学校教室里的长板凳，木书桌，以及模模糊糊的老师的背影。也算是我求学生涯的开端，从那个幼儿园开启。\n休息完后，便回到了我们的大本营——也是之前用来直播带货的一个屋子。摆好工具和旗帜，等候“生意”上门。\n\n下午的维修过程没什么特别要赘述的，不过让我印象比较深的有两个人。第一个是来修手机手机的农民伯伯，虽然最后没有搞定问题，但是他手机玩的真的是好溜啊，我还问了一嘴他是做什么工作的，他笑呵呵的给我说“种地的”，hhhh。\n第二个是一个阿姨带着儿子来修他家的主机，由于是网络问题后就跟着她们一块儿去了家里。阿姨的儿子是今年刚高考完，家里的电脑自从上高三后便没开过，高考完后阿姨想着能不能带老电脑来修一修。不过可能是因为这位弟弟有了新笔记本电脑，对这个电脑是否修好并不上心，阿姨也不电脑是哪里坏了，废好大劲儿才把儿子喊过来给我们说是咋回事儿，哈哈。当然也有可能是因为这个弟弟今年高考考的并不是很理想，有点儿抗拒与外人接触。后来去了阿姨家里边，阿姨还很热情的拿给我们每个人一只雪糕，嘿嘿。虽然这位阿姨不是属于那种言语上很热情很温暖的那种，但也好善良呀。（最开始她不想让我们大热天跑一趟就把主机和显示器抱过来了）\n阿姨的家庭看着就是普普通通的农户家里，让我想到了我二姨家，好长时间没去二姨家了，也好久好久没有见过兰兰姐和鹏威哥了。小时候每周都能见到的人，随着年龄的增长，每个人都在沿着求学-工作-婚恋的齿轮不断前行。\n晚饭喝了稀饭，吃了馒头，简简单单的炒豆芽，倒不失为一顿不错的家常菜。吃完饭坐在屋子里又玩了些会儿，还是觉得要出去转转，于是到近九点的时候才去村子里逛，但是已经是夜黑人静，忘了这是村儿里，九点已经算是比较晚的时候了哈哈。\n可能是由于十点多就熄灯的缘故，晚上睡得异常早。此外，但是那个荒废的小学晚上真吓人呀。\n\n\n二、Day2特别幸运和开心的是第二天竟然没下雨，所以美丽的天空就来咯（一定不是因为之前早上我起不来看不到这么美的天空，一定不是）\n\n一天中最令人开心的事儿就是干饭啦，早上还是香喷喷的胡辣汤嘿嘿，不愧是逍遥镇所在的周口。厨师师傅熬的也好喝！\n\n上午在那屋子里坐的闲的发慌，后来终于来了个客户，不过不是来修电脑的。原来是之前修吹电风扇的时候风叶安反了，哈哈。这个没啥难度，拆开直接换一换哈哈。\n\n不过好在后来终于有事儿干了，梁老师拉着我们到乡政府给电脑维修。维修过程都是老套路，没什么赘述的。中午还临时决定留乡政府食堂吃了顿饭，可能是因为厨师师傅不知道中午有人来，饭不太够哈哈。不过有点颠覆我的认知，我以为公务员单位的食堂伙食都挺好的，不说顿顿大鱼大肉但是应该得属于比家常菜好点的那种水平？但那天中午只有简单的炒拉条，好像也没有什么肉。可能只是个别公务员单位的伙食才特别好吧。这也算是我第一次近距离接触乡镇公务员单位？\n中午休息了会儿，到傍晚又来乡政府处理上午没完成的电脑。遇见乡长了，被拉着聊了会天儿。乡长看起来特别年轻，我以为是二十多最多刚三十的姐姐，没想到已经35了。乡长很高兴的告诉我们：“看到你们来我特别高兴，就突然感觉很活力，也让我感觉到了我当时大学的时候”。在聊天中，我们得知乡长是从郑航毕业的，毕业后先在企业工作了几年后来考进体制内的什么单位来着，去年十二月份刚从原单位调到大李庄乡当乡长姐姐。说起现在的考公热，以及我们几个同学都说有考公的念头，乡长却持反对意见，说还是要去大城市闯荡的好。插句题外话，让我想到了一个伯伯也给我说过同样的话，那个伯伯也是体制内的科员还是副处来着，似乎这些有一定地位职称的体制内人员还是希望自己的后代去外边闯荡？但是一些很普通的体制内人员就希望自己的子女也考进体制内，不知道是不是这样。后来说到工资，乡长姐姐说基础工资才两千多，当时好难以置信啊，后来跟老爸聊天说到基础工资可能是确实低，但到手应该要几乎比这高一倍。那要是这样的话到手五六千再加上五险一金似乎还不错？\n\n从乡政府出来后，梁老师带着我们去下边一个叫“皂角树林”的地方转了转，起初我们都以为是一片林子，后来才发现原来是一个村子的名字，旁边种了一些皂角树，哈哈。印象中好像小时候在深圳见过。\n\n回到冯老村委会后，梁老师又带着我们去参观了一个小型养羊厂，在走过去的路上，还碰到了一个农间光伏电站，从标识来看是扶沟县的扶贫发电项目，目前是之前退休的村主任来看着。跟村主任交谈的过程中，村主任也是很骄傲的说起了他的两个孙子，一个在郑州大学读书，一个当兵去了。或许孩子努力的意义不但是让父辈的生活过的更好，也是成为他们的骄傲。\n然后去了养羊场，确实是第一次见这么多羊嘿嘿，奇怪的里边这么多羊竟然味道不是很大，记得小时候在姥娘村里遇见赶零零散散的隔老远就能闻见一股羊sou味儿。\n其中有一只看起来步履蹒跚的小羊羔，叔说是头天晚上刚出生的，妈耶。小羊羔刚出生就被妈妈舔干净了身上的血，所以身上很干净。它就跟在妈妈的身边，迈着并不矫健的小腿，有点儿萌萌的。突然想到了羊羔跪乳这个词，也是因为亲眼所见才明白了不是因为所谓的感激母亲的养育之恩，只是因为小羊羔的腿是真的没劲儿，一点儿也站不住呀哈哈哈。\n总之，第二天的羊厂参观带来了此次三下乡让我印象最深刻的体验。\n\n三、Day3一大早，被耀眼的阳光刺的睁不开眼，也让我从睡梦中惊醒。\n今天没什么要事儿，一整天都在等候着返程。虽中间出了点小插曲，但最后在下午还是顺利的坐上了返程的大巴车。再见啦冯老村，再见啦可爱的村民们！\n\n四、一点儿碎碎念\n百年征程波澜壮阔，百年初心历久弥新。\n\n","categories":["生活相关"],"tags":["随笔"]},{"title":"为什么VMvare会给我多创建两个网络呢？","url":"/2023/07/07/%E4%B8%BA%E4%BB%80%E4%B9%88VMvare%E4%BC%9A%E7%BB%99%E6%88%91%E5%A4%9A%E5%88%9B%E5%BB%BA%E4%B8%A4%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%91%A2%EF%BC%9F/","content":"前言：很早就注意到了，今天在公众号看到终于解决了我这个疑惑。\n\n转自微信公众号：入门小站。侵删。\n\n\n\n\n\n\n\n为什么 VMware 会给我多创建了两个网络呢？Windows 和 Linux 为什么可以彼此 ping 的通呢\n在 VMware 给我们提供了三种不同的的连接方式（[桥接模式]、NAT 模式，仅主机模式）\n\n\n桥接模式\n\n在桥接模式的情况下 PC 主机虚拟出来一个网桥，在实际情况下虚拟机是有很多的有一个集群，通过虚拟网桥连接虚拟交换机，交换机就可以延展出来这些设备。虚拟机就可以通过主机虚拟出来的网桥通过交换机来上网。所有的虚拟机和主机都是通过路由器进行 IP 的分配，所有主机和虚拟机都是平等的关系，因为都处于一个网段所以可以彼此 ping 的通（但是需要把防护墙的公共网络关了）\n\n好处：[局域网]内都可以访问虚拟机的内容\n不好：没有隐私，局域网内的都可以访问搭建出来的虚拟机集群，会带来一些安全性，隐私性的问题，而且还会占用局域网的 ip。对于 C 类地址扩展出来的子网就比较少前三个数都是 255.255.255，只有最后一个数可以进行分配 0255 的 ip，0 是表示当前的网络地址，255 是广播地址，实际上只有 1254 个 ip 地址，会导致 ip 不够用的情况。虽然架构比较简单，但是在实际应用的情况下比较少\n\nNAT（VMNet8）模式\n\n虚拟机和主机构建一个专用网络，然后通过设备对 IP 进行转换，这样虚拟机就不在通过外面的路由器去访问外部的网络了，而是通过共享主机的 IP 来进行外部的访问，对于外部网络而言，就没有办法访问虚拟机的网络了\n主机通过连接路由器，在通过主机上的网卡虚拟一个路由器出来，虚拟的路由器就可以向虚拟机分配子网 IP，现在就是有两个不同的局域网，虚拟机可以通过虚拟出来的路由器访问主机，但是主机无法访问虚拟机，此时 VMware 就虚拟了一张网卡出来连接到虚拟的路由器中，主机和虚拟机就有变成一个网段了，虚拟出来这张网卡叫做 VMnet8，VMnet8 的网络是和虚拟机在同一个网段的，彼此之间也可以 ping 的通（但是需要把防护墙的公共网络关了）\n\n仅主机模式（VMnet1）\n\n虚拟机只跟主机共享这一个专用网络，跟外部无法通信.\n\n主机单独的虚拟出一张网卡VMnet1 连接到交换机上构建一个子网，现在虚拟机只能彼此之间互相访问跟主机访问，但是不能上网，对于主机而言它可以上网也可以访问虚拟机。因为都在一个虚拟子网中所有虚拟机和主机可以互相 ping 的通\n","categories":["网络相关"],"tags":["网络"]},{"title":"计网期末七种大题","url":"/2023/07/07/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E4%B8%83%E7%A7%8D%E5%A4%A7%E9%A2%98/","content":"前言：整理出来云端备份。参考资料计算机网络期末速成复习课_哔哩哔哩_bilibili，感谢up！\n一、TCP滑动窗口TCP滑动窗口总结 (wuzhiyou.top)\n二、TCP三次握手四次挥手TCP三次握手四次挥手 (wuzhiyou.top)\n三、子网划分\n\n四、IP数据报分片\n\n五、CRC校验码\n六、路由表更新\n七、拥塞避免和快速重传\n\n例题：\n\n答案：\n\n","categories":["网络相关"],"tags":["网络"]},{"title":"暑假数学建模笔记","url":"/2023/07/07/%E6%9A%91%E5%81%87%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0/","content":"数学建模：历年优秀论文+入门+进阶+美赛（国赛待更新） - 知乎 (zhihu.com)\n核心：关键是要搞清楚什么样的问题用什么样的方法，然后现学现卖。\n//常用模型规划类：线性规划、非线性规划、动态规划、多目标优化模型模拟类：线性回归、多元线性回归、BOX-COX变换、残差分析预测类：时间序列、灰度、logistics、SEIR、微分差分方程、马尔科夫链权重确定类：AHP、主成分分析、因子分析法、熵权法、模糊评价法其他常用类：图、排队论、社会力模型、决策树、博弈论//常用方法蒙特卡洛法、Dijkstra、Floyd、穷举法、元胞自动机//常用学习思路先学习模型的公式，再了解模型的使用情境、可应用的问题类型，最后将公式推导和原理推导手动完成一遍。//常见子问题1.已知x1,x2,x3,...，单位盈利为w1,w2,w3,...，多个目的地与起点的距离是d1,d2,d3,...，对应的单位距离的运费为z1,z2,z3,...，试求一个盈利最大运费最小的方案。2.已知路口的车流流入量lamdba，红绿灯n秒且忽略黄灯，在车流量稳定的情况下试分析车辆在路口的平均等待时间。3.结合第a学期b门课程的成绩，评估某年级某院某班级的每个学生的学习能力。4.结合历年来五一长假期间西安机场的航班情况，试预测今年五一期间机场在何时达到客流量的高峰，客流量大致为多少。5.TSP问题。6.试画出各种数据已知的气球在穿越n层风速为vi（i=1,2,3,...,n）的气流层时的轨迹。7.试给出方案确定学校应该新增座椅的数量和位置，学校地形、椅子成本已知。8.商场拟定根据历年来顾客的购买数据进行分析，调整促销商品的种类和价格，试给出方案。9.请根据雪崩的物理原理建立模型模拟雪崩随时间的变化。10.根据每日治愈人数、感染人数以及其他数据建立传染病模型。\n\n\n\n\n\n一、补插值拟合插值与拟合是数学建模中的一种基本的数据分析手段，被公认为建模中常用的算法之一。 \n插值算法是在现有的数据是极少的，不足以支撑分析的进行，需要“模拟产生”一些新的但又比较靠谱的值来满足需 求，这就是插值的作用。（根据现有的数据点，构造过这些个数据点的近似函数）\n\n什么是插值？牛顿插值的几何解释是怎么样的？ - 马同学的回答 - 知乎 https://www.zhihu.com/question/22320408/answer/141973314\n\n拟合问题的目标是寻求一个函数（曲线），使得该曲线在某种准则下与所有的数据点最为接近，即曲线拟合的最 好（最小化损失函数）。（已知有限个数据点，求近似函数，不要求过已知数据点，只要求在某种意义下它在这 些点上的总偏差最小）\n\n\n曲线拟合的思想：已知一组二维数据，即平面上的 n 个点寻求一个函数（曲线）f(x)，使得在某种准则下 f(x) 与所有数据点最为接近, 其中最常用的一种拟合方法就是线性最小二乘法. \n\n（？）\nMATLAB最小二乘法拟合曲线公式 - 知乎 (zhihu.com)\n\nY = P(1)*X^N + P(2)*X^(N-1) + ... + P(N)*X + P(N+1)拟合公式\n\n在 MATLAB 中，polyfit(x, y, n) 是一个用于多项式拟合的函数。以下是对此函数的解释：\n\nx：表示自变量（或横轴）数据的向量或矩阵。\ny：表示因变量（或纵轴）数据的向量或矩阵。它的大小应与 x 相匹配。\nn：表示所需拟合的多项式的次数。\n\n当调用 polyfit(x, y, n) 函数时，MATLAB 会对给定的数据点进行多项式拟合，并返回拟合多项式的系数。在你的问题中，你使用了 n&#x3D;1，即一次多项式（线性拟合）。\npolyfit(x, y, 1) 的返回值 coefficient 是一个包含两个元素的向量，其中第一个元素是拟合多项式的斜率（即直线的斜率），第二个元素是拟合多项式的截距（即直线的截距）。\n通过使用 polyfit(x, y, 1) 进行线性拟合，你可以得到一条最佳拟合线，该线通过数据点集(x, y)，使得拟合线与数据点的残差平方和最小化。\n此外，polyfit 函数还可以用于高阶多项式拟合（增加 n 的值）。但请注意，在进行多项式拟合时，需要谨慎选择多项式的阶数，以避免过度拟合或欠拟合的问题。\n\n\n在MATLAB中， polyval(coefficient, x) 函数用于计算通过多项式拟合的系数 coefficient 得到的自变量 x 对应的因变量 yn 的值。以下是对此函数的解释：\n\ncoefficient：表示多项式拟合的系数的向量。这些系数通常是使用 polyfit 函数计算得到的。\nx：表示自变量的向量或矩阵。\nyn：表示通过多项式拟合计算得到的因变量的向量或矩阵。其大小与 x 相匹配。\n\n当调用 polyval(coefficient, x) 函数时，MATLAB会使用给定的多项式拟合系数 coefficient 来计算自变量 x 对应的因变量 yn 的值。这个过程涉及将 x 的每个值代入多项式中，并计算出相应的因变量值。\n使用 polyval 函数可以通过拟合多项式来估计未知数据点的因变量值。这对于在给定的自变量范围内进行插值或外推是非常有用的。\n需要注意的是，polyval 函数只能用于已经进行多项式拟合的情况，其中 coefficient 是由 polyfit 函数计算得到的多项式系数向量。\n\n\n假设我们有一组数据点，每个数据点包含了自变量 X 和因变量 Y 的取值。我们希望找到一个多项式函数，使得该函数能够很好地描述这些数据点的关系。\n公式 Y &#x3D; P(1)*X^N + P(2)*X^(N-1) + … + P(N)*X + P(N+1) 中的参数 P(1), P(2), …, P(N+1) 可以通过拟合的过程来确定。我们可以通过最小化拟合误差，即将每个数据点的实际值 Y 与多项式函数计算得到的值进行比较，并求得最优的参数值，使得两者之间的差异最小化。\n​\t\n\n多项式拟合是一种常见的数据拟合技术，用于找到一个多项式函数来逼近给定的一组数据点。以下是使用公式 Y &#x3D; P(1)*X^N + P(2)*X^(N-1) + … + P(N)*X + P(N+1) 进行多项式拟合的详细步骤：\n\n收集数据：首先，收集包含自变量 X 和因变量 Y 的一组数据点。这些数据点可以来自实验观测、实际测量或其他来源。\n确定多项式次数：根据数据的特征和拟合需求，确定多项式的次数 N。次数越高，多项式的灵活性越大，但也可能导致过度拟合。\n构建矩阵：构建一个 (N+1)×(N+1) 的矩阵 X 和一个 (N+1)×1 的列向量 Y。其中，矩阵 X 的第 i 行第 j 列的元素为 X_i^(N-j)（即自变量 X 的幂次方），列向量 Y 的第 i 行表示对应的因变量 Y 的取值。\n解线性方程组：解线性方程组 X * P &#x3D; Y，其中矩阵 P 是一个 (N+1)×1 的列向量，表示多项式的系数。通过求解此线性方程组，可以得到最优的多项式系数 P。\n得到拟合函数：根据求解得到的多项式系数 P，构建拟合函数 Y_fit &#x3D; P(1)*X^N + P(2)*X^(N-1) + … + P(N)*X + P(N+1)。\n评估拟合效果：使用适当的指标（如均方误差、决定系数等）来评估拟合函数与原始数据之间的拟合效果。较小的误差和较高的决定系数表示拟合结果较好。\n\n请注意，多项式拟合可能会受到过度拟合的问题，特别是在多项式次数较高时。因此，在进行多项式拟合时，需要谨慎选择多项式次数，并使用合适的模型评估方法进行验证。\n\n总结一句话：到时候照着这步骤套公式即可，无需了解其原理。\n\n二、7.6日 线性目标​\t\n1.线性规划目标模型——生产盈利问题eg1：\neg2：例6 某计算机公司生产三种型号的笔记本电脑 A, B,C 。这三种笔记本电脑需要 在复杂的装配线上生产，生产1台 A, B,C 型号的笔记本电脑分别需要5，8，12（h）。公 司装配线正常的生产时间是每月1700h。公司营业部门估计 A, B,C 三种笔记本电脑的利 润分别是每台1000，1440，2520（元），而公司预测这个月生产的笔记本电脑能够全部 售出。公司经理考虑以下目标：\n 第一目标：充分利用正常的生产能力，避免开工不足；\n 第二目标：优先满足老客户的需求， A, B,C 三种型号的电脑50，50，80（台）， 同时根据三种电脑的纯利润分配不同的权因子； \n第三目标：限制装配线加班时间，最好不要超过200h； \n第四目标：满足各种型号电脑的销售目标，A, B,C 型号分别为100，120，100（台）， 再根据三种电脑的纯利润分配不同的权因子；\n 第五目标：装配线的加班时间尽可能少。 请列出相应的目标规划模型，并用LINGO软件求解\n2.运输问题\n3.Lingo使用教程\nGlobal optimal solution found.表示全局最优解找到\nObjective value:表示最优目标值\nTotal solver iterations:表示用单纯行法进行了两次迭代\nVariable表示变量，运行结果中有两个变量为x1,x2\nValue给出最优解中个变量的值\nReduced Cost与最优单纯形表中的检验数相差一个符号的数。为了使某个变量在解中的数值增加一个单位，目标函数必须付出的代价（增加或减少Reduced Cost的值）\nSlack or Surplus表示接近等于的程度在约束条件中是&lt;&#x3D;,叫做松弛变量在约束条件中是&gt;&#x3D;,叫做过剩变量在约束条件中是&#x3D;,值为0,该约束为一个紧约束（或有效约束）如果一个约束条件错误，作为一个不可行约束，Slack or Surplus为负数Slack or Surplus表示的是：约束离相等还差多少\nDual Price给出对偶价格的值表示每增一个单位（约束右边的常数），目标值改变的数量（在最大化问题中目标函数是增加的，反之是减小的）例如在本例中，c约束条件的Dual Price为1，表示2x1+x2&lt;&#x3D;600增加一个单位到2x1+x2&lt;&#x3D;601使目标值增加到-1(目标函数的Dual Price为-1），则Objective value就变为799\n对偶价格也叫影子价格，这是由于他们表示可以用多大的价格去购买单位资源\n\n\n直译\n\n!使用sets和endsets设置集sets:\tstudent/stu1..stu100/: name, age;endsets!运行结果 Variable           Value                                                 NAME( STU1)        0.000000                                                 NAME( STU2)        0.000000                                                 NAME( STU3)        0.000000                                                 NAME( STU4)        0.000000                                                 NAME( STU5)        0.000000                                                 NAME( STU6)        0.000000                                                 NAME( STU7)        0.000000                                                 NAME( STU8)        0.000000                                                 NAME( STU9)        0.000000                                                NAME( STU10)        0.000000                                                NAME( STU11)        0.000000                                                ……\t\t\t\t\t……\n\n\n\n!设置集的集sets:! 原始集;worker:/worker1..worker3/: efficiency;    ! 工人效率;machine:/machine1..machine3/: quality;    ! 机器质量;product:/product1..product3/: value, cost; ! 产品价值和消耗;! 派生集;allowed_plan(worker, machine, product): evaluation;    ! 对可行方案的评价;endsets！设置完集后通过data和enddata赋值data:\tefficiency = 4 3 2\tquality = 3 2 1\tvalue = 50 20 10enddata！当三个集的对象个数一样时候，简化写data:\tefficiency, quality, value = 4 3 50      \t                    \t 3 2 20      \t                         2 1 10;enddata\n\n\n\n特殊输入处理方式\n\n将所有对象属性变量初始设置为一个值。eg：efficiency &#x3D; 3;\n\n\n某个对象的值为非定值，用？替代。eg：efficiency &#x3D; 2 ? 4;  运算时实时输入处理\n\n\n某个对象的值设为未知值，用，替代。eg：efficiency &#x3D; 2, , ;  后两个work的efficiency都是未知\n\n运算符名称运算符涵义#not#一元运算符，否定该操作数的逻辑值#eq#若两个运算数相等，则为 true ，否则为 false#gt#若左边的运算符严格大于右边的运算符，则为 true ，否则为 false#ge#若左边的运算符大于或等于右边的运算符，则为 true ，否则为 false#lt#若左边的运算符严格小于右边的运算符，则为 true ，否则为 false#le#若左边的运算符小于或等于右边的运算符，则为true，否则为false#and#仅当两个参数都为true时，结果为true，否则为false#or#仅当两个参数都为false时，结果为false，否则为true\n\n\n\neg1：多目标规划使用Lingo求解 \neg2：求解两个方程组\nmodel:  submodel equation:  x^2+y^2=4;  x^2-y^2=1;  endsubmodel  submodel con1:  @free(x);x&lt;0;  endsubmodel  submodel con2:  @free(y);y&lt;0;  endsubmodelcalc:  @solve(equation);  @solve(equation,con1);  @solve(equation,con2);  @solve(equation,con1,con2);endcalcend\n\n三、7.7日 微分方程1.定义模型eg1：\neg2：\n\n曲线弧长公式\n\n对于复合函数求导（？）\n\n二阶常微分降阶法，换元\n\n如何化简得（？）\n\n2.Matlab求解\nclc清空命令行窗口\nclear清空工作区变量\nsyms y(x)定义y(x)，表示y是x的函数\n\n拓展:MATLAB中的sym函数、syms函数、symfun函数以及symvar函数的简单介绍_\n\n\ndiff(y)表示一阶导\ndiff(y,2)表示二阶导\n\n 多阶求导，且使用换元\n\n\n求矩阵微分方程\n\n\nones(x,y)产生x行y列的全为1的矩阵\n[s1,s2,s3]分别矩阵的第一行第二行第三行，可用此表示整个矩阵\n这个是什么矩阵（？）\n求解边界解\n\n\n一阶微分线性方程组知识补充：一阶线性微分方程的通解 - 知乎 (zhihu.com)\n\n（？）PPT39页开始-PPT86页结束\n\n【Matlab 控制】微分方程 ode45() 求解并绘制曲线_matlab画微分方程组曲线_Zhao-Jichao的博客-CSDN博客\n3.传染病预测模型指数型模型：一传十，十传百\n\n4.种群作用模型四、7.8日 动态规划动态规划是现代企业管理中的一种重要决策方法，可用于解决最优路径、资源分配、生产计划与库存、投资、装载、排序等问题，还可用于生产过程的最优控制等。由于它有独特的解题思路，因而在处理某些优化问题时，比线性规划或非线性规划方法更有效。\n1.利用Lingo解最短路线的动态规划model: Title Dynamic Programming; sets: vertex/A,B1,B2,C1,C2,C3,C4,D1,D2,D3,E1,E2,E3,F1,F2,G/:L; road(vertex,vertex)/A B1,A B2,B1 C1,B1 C2,B1 c3,B2 C2,B2 C3,B2 C4, C1 D1,C1 D2,C2 D1,C2 D2,C3 D2,C3 D3,C4 D2,C4 D3, D1 E1,D1 E2,D2 E2,D2 E3,D3 E2,D3 E3, E1 F1,E1 F2,E2 F1,E2 F2,E3 F1,E3 F2,F1 G,F2 G/:D; endsets data: D=5 3 1 3 6 8 7 6 6 8 3 5 3 3 8 4 2 2 1 2 3 3 3 5 5 2 6 6 4 3; L=0,,,,,,,,,,,,,,,; enddata @for(vertex(i)|i#GT#1:L(i)=@min(road(j,i):L(j)+D(j,i))); end\n\n这段 Lingo 代码是一个动态规划问题的模型。让我们逐行进行分析：\n\n第一行指定了模型的名称为 “Title Dynamic Programming”。\n第二行使用 sets 关键字定义了一些集合，包括顶点集合（vertex）和道路集合（road），每个集合都有对应的元素。顶点集合包括 A, B1, B2, C1, C2, C3, C4, D1, D2, D3, E1, E2, E3, F1, F2 和 G；道路集合包括 A 到 B1, A 到 B2, B1 到 C1, B1 到 C2, B1 到 C3, B2 到 C2, B2 到 C3, B2 到 C4, C1 到 D1, C1 到 D2, C2 到 D1, C2 到 D2, C3 到 D2, C3 到 D3, C4 到 D2, C4 到 D3, D1 到 E1, D1 到 E2, D2 到 E2, D2 到 E3, D3 到 E2, D3 到 E3, E1 到 F1, E1 到 F2, E2 到 F1, E2 到 F2, E3 到 F1, E3 到 F2, F1 到 G 和 F2 到 G。\n第五行使用 data 关键字定义了数据。其中 D 矩阵表示从一个顶点到另一个顶点的距离，L 矩阵初始化为全零。\n第八行使用 @for 关键字开始一个循环，在每个顶点 i 上进行迭代。循环的目标是计算每个顶点 i 到其他顶点的最短路径。\n在循环中的第九行，L(i)=@min(road(j,i):L(j)+D(j,i)) 是动态规划的关键部分。它表示对于当前的顶点 i，找到能够到达顶点 i 的所有道路 j，并计算 L(j) + D(j, i) 的最小值，并将结果赋值给 L(i)。\n最后一行表示循环结束。\n\n总体来说，这段 Lingo 代码使用动态规划方法计算了给定图中每个顶点到其他顶点的最短路径，并将结果存储在 L 矩阵中。\n\n2.动态规划解决利润问题数学建模（一）—动态规划 - 知乎 (zhihu.com)\nQ：某公司拟将某种设备5台分配给甲、乙、丙3个工厂，各工厂利润与设备数量之间的关系如下表所示，问这5台设备如何分配使3个工厂的总利润为最大?\n套入函数\n\nA：仨工厂即将问题分为仨阶段，k&#x3D;1,2,3。给第k个工厂分配前拥有的设备台数，s1&#x3D;5。\n之后看懵了…\n（？）\n五、7.9日建模比赛简介\n省一和省二差距很小，一定注意排版，另有些老师只认MATLAB做出的数学公式。\n六、7.10日 灰色预测模型灰色系统理论是1982年由邓聚龙创立的一门边缘性学科(interdisciplinary)灰色系统用颜芭深浅反映信息量的多少。说一个系统是黑色的，就是说这个系统是黑洞洞的，信息量太少;说一个系统是白色的，就是说这个系统是清楚的信息量充足。这种处于黑白之间的系统，或说信息不完全的系统，称为灰色系统或简称灰系统。\n1.灰色关联度计算灰色关联度：\n\nshengchanzongzhi=[0.732,0.7588,0.8597,1.0125,1.2356,1.4013];diyichanye=[0.8361,0.8888,0.9141,1.044,1.1069,1.2152];dierchanye=[0.6828,0.6885,0.7812,1.0237,1.2833,1.5405];disnachanye=[0.7439,0.7878,0.9292,0.9847,1.2363,1.3182];x0=shengchanzongzhi;x1=diyichanye;x2=dierchanye;x3=disnachanye;plot(x0, &#x27;b*-&#x27;)hold onplot(x1, &#x27;g*-&#x27;)hold onplot(x2, &#x27;g*-&#x27;)hold onplot(x3, &#x27;r*-&#x27;)title(&#x27;相关曲线图&#x27;)legend(&#x27;总产值&#x27;,&#x27;第一产业&#x27;, &#x27;第二产业&#x27;, &#x27;第三产业&#x27;)% showglobal_min = min(min(abs([x1; x2; x3] - repmat(x0, [3, 1]))));global_max = max(max(abs([x1; x2; x3] - repmat(x0, [3, 1]))));rho = 0.5;zeta_1 = (global_min + rho * global_max) ./ (abs(x0 - x1) + rho * global_max);zeta_2 = (global_min + rho * global_max) ./ (abs(x0 - x2) + rho * global_max);zeta_3 = (global_min + rho * global_max) ./ (abs(x0 - x3) + rho * global_max);%点除 如果a、b是矩阵，a./b就是a、b中对应的每个元素相除r1=mean(zeta_1);r2=mean(zeta_2);r3=mean(zeta_3);% r越大，关联度越大\n\n\n\n\n\n\n\n\n\n2.灰色预测模型所谓灰色预测模型，就是对既含有已知信息又含有不确定信息的系统进行预测，就是对在一定范围内变化的、与时间有关的灰色过程进行预测。\n适用情况：\n\nGM（1,1）：Grey Model灰色模型  （1，1）只含有一个变量的一阶微分方程模型\n步骤：\n\n根据原始的离散非负数据列，通过累加等方式削弱随机性、获得有规律的离散数据列\n建立相应的微分方程模型得到离散点处的解\n再通过累减求得的原始数据的估计值,从而对原始数据预测\n\neg：长江水质污染预测\n\n\n规律不明显的可以制造规律，得到累加数列S（n）观察\n\n构建一节常微分方程\n\n\n七、7.11 Matlab使用A = [2,1;1,1];  % 不等式约束的系数矩阵 Ab = [10;8];     % 不等式约束的右侧向量 bAeq = [];       % 等式约束的系数矩阵 Aeqbeq = [];       % 等式约束的右侧向量 beqlb = [0,0];     % 变量的下界向量 lb ub = [inf,7];   % 变量的上界向量 ubf = [-4,-3];    % 目标函数的系数向量 f[x, fval, exitflag] = linprog(f, A, b);% 使用 linprog 函数求解线性规划问题% 输出结果包括最优解向量 x、最优值 fval 和求解器的退出状态 exitflag\n\n\n\n这段代码描述了一个如何使用Matlab线性规划问题，并使用 linprog 函数求解。让我们逐行解释每一步：\n\nA = [2,1;1,1];：不等式约束的系数矩阵 A，它表示两个不等式约束。在这个例子中，A 是一个 2x2 的矩阵，第一行表示约束 2x1 + x2 ≤ 10，第二行表示约束 x1 + x2 ≤ 8。\nb = [10;8];：不等式约束的右侧向量 b，包含了两个不等式约束的常数。在这个例子中，b 是一个 2x1 的列向量，第一个元素是 10，第二个元素是 8，分别对应着两个不等式约束的右侧常数。\nAeq = [];：等式约束的系数矩阵 Aeq。在这个例子中，没有等式约束，因此 Aeq 是一个空矩阵。\nbeq = [];：等式约束的右侧向量 beq。在这个例子中，没有等式约束，因此 beq 是一个空矩阵。\nlb = [0,0];：变量的下界向量 lb。在这个例子中，lb 是一个 1x2 的行向量，表示变量 x1 和 x2 的下界。这里的下界分别为 0，表示两个变量必须大于等于 0。\nub = [inf,7];：变量的上界向量 ub。在这个例子中，ub 是一个 1x2 的行向量，表示变量 x1 和 x2 的上界。这里的上界分别为无穷大和 7，表示 x1 没有上界限制，而 x2 的上界为 7。\nf = [-4,-3];：目标函数的系数向量 f。这个向量指定了目标函数的各个变量的系数。在这个例子中，目标函数为 -4x1 - 3x2。\n[x, fval, exitflag] = linprog(f, A, b);：使用 linprog 函数来求解线性规划问题。该函数的输出结果包括最优解向量 x、最优值 fval 和求解器的退出状态 exitflag。\n\n\n以后直接让gpt来干哈哈哈\n\n\n八、7.12 Lingo和数学公式格式练习1\n\n设 x1 为每天甲类设备上加工的 A1 的数量（kg）设 x2 为每天乙类设备上加工的 A2 的数量（kg）设 x3 为每天深加工设备上加工的 A1 转化为 B1 的数量（kg）设 x4 为每天深加工设备上加工的 A2 转化为 B2 的数量（kg）如果x3&#x27;是A1中转换B1时消耗A1的量，x4&#x27;是A2中转换成B2时候消耗B2的量，那\n\n\n\n//使用lingo求解SETS:    PRODUCTS / A1, A2, B1, B2 /;DATA:    MAX_SUPPLY = 50;    MAX_LABOR = 480;    MAX_A1_PROCESSING = 100;    PROFIT(PRODUCTS) = [12, 8, 22, 16];    PROCESSING_TIME(PRODUCTS) = [12, 8, 2, 2];    PROCESSING_COST(PRODUCTS) = [0, 0, 1.5, 1.5];    YIELD(PRODUCTS) = [0, 0, 0.8, 0.75];VARIABLES:    Supply(PRODUCTS) &gt;= 0;    Labor &gt;= 0;EQUATIONS:    Obj;    MilkSupply;    LaborHours;    A1Processing;    Sales(PRODUCTS);Obj: MAX = SUM(PRODUCTS, PROFIT(PRODUCTS) * Sales(PRODUCTS));MilkSupply: SUM(PRODUCTS, PROCESSING_TIME(PRODUCTS) * Supply(PRODUCTS)) &lt;= MAX_SUPPLY;LaborHours: Labor &lt;= MAX_LABOR;A1Processing: Supply(&quot;A1&quot;) &lt;= MAX_A1_PROCESSING;Sales(PRODUCTS): Supply(PRODUCTS) = SUM(p$(PRODUCTS), YIELD(PRODUCTS) * Supply(p) - PROCESSING_COST(PRODUCTS) * Supply(p));\n\n\n\n\n\n\n\n\n\n练习2\n\n使用文献 五篇论文与文献\n九、7.13最小二乘曲线拟合 曲线拟合——最小二乘法（ Ordinary Least Square，OLS）_最小二乘法求拟合曲线_阿慧吖的博客-CSDN博客\n十、7.14图与网络分析离散数学相关\n最短路径：\n\n单源最短路径：DFS\n多源最短路径：FLoyed  可以解决负边权问题\n赋权无向图最短路径：二叉树的遍历\n\n最短路径算法-[最短路径问题]—Dijkstra 算法最详解 - 知乎 (zhihu.com)\n(27条消息) 图论算法之最短路径（Dijkstra、Floyd、Bellman-ford和SPFA）_图论最短路径算法_HX_2022的博客-CSDN博客\n十一、7.15十二、7.16 模糊数学模糊数学笔记：一、模糊集及其运算性质 - 知乎 (zhihu.com)\n模糊数学的思想及应用 - 知乎 (zhihu.com)\n模糊集 隶属度 分解定理  模糊度\n\n\n\n\n\n\n十三、7.17 数据处理与分析​\t\n\n\n十四、7.19 建模总览组队分工\n\n\n进度：第一天完成第一题，第二天完成剩下题，第三天论文排版\n\n\n\n","categories":["数学相关"],"tags":["数学建模"]},{"title":"信道复用技术简单分类","url":"/2023/06/21/%E4%BF%A1%E9%81%93%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF/","content":"前言：前段写题的时候看到了CSMA相关的，来简单学习一下。如下图，这就叫信道复用。进行信道复用时候需要用到复用器和分用器。\n\n一、频分复用、时分复用和统计时分复用1、频分复用FDM（频分复用Frequency Division Multiplexing)：是把完整的传输频带进一步分裂成为许多个频率通道，保证每一个用户都有通道使用。频率通道之间都会有防护频带。\n2、时分复用TDM（时分复用Time Division Multiplexing）是把时间分裂成为小的时间片，同时分裂的时间片又分成了若干个通道(时隙），每个用户占用一个通道传输数据。\n\n3、统计时分复用STDM（statistic TDM），时分复用的改进，大大提高了信道的利用率按需动态分配时隙，由此提高线路资源利用率在输出线路上，某一用户所占的时隙并不是周期性出现。\n\n二、波分复用WDM（波分复用 Wavelength Division Multiplexing），它是将多种不同波长的光信号通过合波器汇合在一起，并耦合到同一根光纤中，以此进行数据传输的技术，其实就光的频分复用。\n\n三、码分复用CDM（码分复用，Code Division MUltiplexing)，实际上，人们更常用的名词是码分多址 CDMA (Code Division Multiple Access)。靠不同的编码来区分各路原始信号的一种复用方式，主要和各种多址技术结合产生了各种接入技术。\n其工作原理是使用 CDMA 的每一个站被指派一个唯一的 m bit 码片序列(chip sequence)。 一个站如果要发送比特 1，则发送它自己的 m bit 码片序列。如果要发送比特 0，则发送该码片序列的二进制反码。\n\n例如，指派给 S 站的 8 bit 码片序列是 00011011。当 S 发送比特 1 时，它就发送序列 00011011，而当 S 发送比特 0 时，就发送 11100100。为了方便，我们按惯例将码片中的 0 写为–1，将 1 写为+1。因此 S 站的码片序列是(–1 –1 –1 +1 +1 –1 +1 +1)。\n\n\n","categories":["网络相关"],"tags":["网络"]},{"title":"正则表达式","url":"/2023/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"前言：在写管理页面前端的的时候看到了HTML 属性：pattern - HTML（超文本标记语言） | MDN (mozilla.org)，补充一下正则匹配的相关知识。\n正则表达式可以在文本中查找、替换、提取和验证特定的模式。\n一、常用匹配语法\nrunoo+b，可以匹配 runoob、runooob、runoooooob 等，**+** 号代表前面的那个字符必须至少出现一次（1次或多次）尝试一下 »。\n\nrunoo*b，可以匹配 runob、runoob、runoooooob 等，***** 号代表前面的那个字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）尝试一下 »。\n\ncolou?r 可以匹配 color 或者 colour，**?** 问号代表前面的那个字符最多只可以出现一次（0次或1次）尝试一下 »。\n\n\n[ABC]，可匹配匹配 […] 中的所有字符，例如 [aeiou] 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。\n\n[^ABC]，匹配除了 […] 中字符的所有字符，例如 [^aeiou] 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字符。\n\n[A-Z]，[A-Z] 表示一个区间，匹配区间A-Z中所有的大写字母。\n\n[a-z]，[a-z] 表示一个区间，匹配区间a-z中所有的小写字母。\n\n.，表示匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 [^\\n\\r]。\n\n[\\s\\S]，匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。可以单用&#x2F;s或&#x2F;S。\n\n\\w， 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]\n\n\n","categories":["日常随笔"],"tags":["随笔"]},{"title":"【待】五种背包问题详解","url":"/2023/06/04/01%E8%83%8C%E5%8C%85%E5%92%8C%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/","content":"前言：算法分析考试前12个小时，老师在群里发了背包动态规划的内容，发现还是不会，垂死病中惊坐起，补一补..    题外话，相信自己不如相信老师（逃\n\n\n背包问题繁琐而又多样，根据所给条件不同，可以划分成不同的问题，但最后求解的目的都是一样的：如何划分使得背包总所装物品总价值最大。其中最基础的是01背包，下图可以概括基础的五种背包问题。\n\n一、01背包\n有N件物品和一个最多能被重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大？\n\n如果使用暴力回溯，每个物品只有取和不取两种状态，则时间复杂度为O(2^n)，因此必然要优化。\n将问题具体化，假设背包最大重量W&#x3D;4，物品0~2对应的weight和value如下\n\n1、二维dp数组法推导递归公式1、根据动态规划步骤，首先确定dp数组及下标含义\ndp[i][j]表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大值是多少\n\n对于如何推出dp[i][j]\n\n由dp[i-1][j]推出，即背包最大容量为j，里边不放物品i的最大价值，此时dp[i][j]=dp[i-1][j]\n由dp[i-1][j-weight[i]]推出，dp[i-1][j-weight[i]]为背包容量为j-weight[i]时不放物品i的最大价值，那么dp[i-1][j-weight[i]]+物品i的价值value[i]就是背包放物品i时得到的最大价值\n\n所以递归公式 dp[i][j]=max( dp[i-1][j],dp[i-1][j-weight[i]]+value[i]] )\n初始化dp数组确定递归公式后，要将dp数组初始化（牢记：**dp[i][j]表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大值是多少**）\n观察可得dp[i][0]均为0\n\n则求出dp[0][j]\n//正序遍历for(int j=weight[0];j&lt;bagWeight;j++)&#123;\tdp[0][j]=value[0];&#125;\n\n此时\n\ndp[0][j]和dp[i][0]已经确定，则将其他位置初始化为0即可\n\n可以选择先遍历物品也可以先遍历背包重量，即谁在内循环谁在外循环均可，但先遍历物品更好解。\n//weight数组的大小 就是物品的个数for(int i=1;i&lt;weight.size();i++)&#123;\t\t//遍历物品\tfor(int j=0;j&lt;bagWeight;j++)&#123;\t\t//遍历背包容量\t\tif(j&lt;weight[i])\t\t\tdp[i][j]=dp[i-1][j];\t\telse\t\t\tdp[i][j]=max( dp[i-1][j],dp[i-1][j-weight[i]]+value[i]] );\t&#125;&#125;\n\n\n\n如果遍历背包，则\n// weight数组的大小 就是物品个数for(int j = 0; j &lt;= bagWeight; j++) &#123; // 遍历背包容量    for(int i = 1; i &lt; weight.size(); i++) &#123; // 遍历物品        if (j &lt; weight[i])        \tdp[i][j] = dp[i - 1][j];        else        \tdp[i][j] = max (dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);    &#125;\n\n\n\n虽然两种遍历顺序有不同的地方（？），但最终都得到了相同的dp数组\n最终得到dp数组\n\n完整代码\n\n\n咱就把0-1背包问题讲个通透！ - 知乎 (zhihu.com)\n二、完全背包三、多重背包四、分组背包五、混合背包","categories":["算法相关"],"tags":["算法"]},{"title":"TCP三次握手四次挥手","url":"/2023/05/30/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/","content":"前言：其实之前整理过，但是对于连接释放阶段的细节不太清楚，再写一下加深一些印象。\n一、连接建立（三次握手）：SYN：同步位\n值为1时表示一个连接请求。\nFIN：关闭位\n值为1时表示一个关闭请求。\nACK：确认位\n值为1时表示确认有效，0表示确认无效。\nack：确认号\n一般为对方发送的seq序号加上1\nseq：序列号\n一般是从某一地址随机开始，然后接着用\n\n二、连接释放（四次挥手）：\n1）客户端发送FIN&#x3D;1，序列号seq&#x3D;u（随机一个数字）\n2）服务端发送ACK&#x3D;1，并确认收到了客户端的序列号，发送ack&#x3D;u+1，自己也发送序列号seq&#x3D;v（随机一个数字），此时TCP处于半关闭状态，A对B的通道已经关闭，但B还可给A发送数据\n3）服务端发送FIN&#x3D;1，序列号seq&#x3D;w（中间存在数据继续发送，因此不能等于v+1），ACK&#x3D;1，收到确认ack&#x3D;u+1（A没有对B有新的序列号发送，因此ack不变）\n4）客户端发送ACK&#x3D;1，收到序列号并发送确认ack&#x3D;w+1，seq&#x3D;u+1（中间不存在A对B的数据发送，因此序列号可接着用）\n","categories":["网络相关"],"tags":["网络"]},{"title":"TCP滑动窗口总结","url":"/2023/05/28/TCP%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/","content":"前言：本文转载于TCP滑动窗口协议 - 简书 (jianshu.com)，仅对文章做了排版和总结，转载请表明真正原文地址。\n\n一、发送方数据可分为四类：①已发送并得到确认的\n②已发送未得到确认的\n③未发送但接收方允许发送的\n④未发送且接收方不允许发送的\n接收方允许发送方一次能容纳的未确认的字节数。这称为发送窗口，有时也称为窗口。该窗口决定了发送方允许传输的字节数，即中间两部分。\n当收到接收方新的ACK对于发送窗口中后续字节的确认时，窗口滑动。\n\n每一次确认接受以后，这一过程都会发生，从而让窗口滑动整个数据流以传输。\n二、接收方数据可分为三类：①已经接收\n②未接收准备接收\n③未接收并未准备接收\n（由于ACK由TCP协议栈回复，默认无应用延迟，不存在已经接收未回复）\n其中“未接收准备接收”的就称为接收窗口。\n三、实际举例说明：假设发送方窗口大小为2，接收方窗口大小为1。一个窗口发送或接收一个帧，共有八帧需要通过。\n\n1、初始态，发送方没有帧发出，发送窗口前后沿相重合。接收方0号窗口打开，等待接收0号帧；2、发送方打开0号窗口，表示已发出0帧但尚确认返回信息。 此时接收窗口状态不变；3、发送方打开0、1号窗口，表示0、1号帧均在等待确认之列。至此，发送方打开的窗口数已达规定限度，在未收到新的确认返回帧之 前，发送方将暂停发送新的数据帧。接收窗口此时状态仍未变；4、接收方已收到0号帧，0号窗口关闭，1号窗口打开，表示准备接收1号帧。此时发送窗口状态不 变；5、发送方收到接收方发来的0号帧确认返回信息，关闭0号窗口，表示从重发表中删除0号帧。此时接收窗口状态仍不变6、发送方继续发送2号帧，2号窗口 打开，表示2号帧也纳入待确认之列。至此，发送方打开的窗口又已达规定限度，在未收到新的确认返回帧之前，发送方将暂停发送新的数据帧，此时接收窗口状态 仍不变；7、接收方已收到1号帧，1号窗口关闭，2号窗口打开，表示准备接收2号帧。此时发送窗口状态不变；8、发送方收到接收方发来的1号帧收毕的确认信 息，关闭1号窗口，表示从重发表中删除1号帧。此时接收窗口状态仍不变。\n\n\n总结：\n发送方先打开所有发送窗口，在发送窗口占满时，接收端开始接收窗口，按最大容量接收并返回确认给发送窗口，此时发送窗口继续发送下一帧。发送-收到-返回确认-继续发送依次循环。\n四、发送窗口和接收窗口的关系：TCP是全双工协议（ 三种通信方式——单工、半双工和双工通信），双方可同时发送同时接收。\n因此TCP双方各自维护一个“发送窗口”和“接收窗口”。\n其中各自的“接收窗口”大小取决于应用、系统、硬件的限制（TCP传输速率不能大于应用的数据处理速率）。各自的“发送窗口”则要求取决于对端通告的“接收窗口”，要求相同。\n\n","categories":["网络相关"],"tags":["网络"]},{"title":"yarn build时出现“couldn't find a package.json file in home”报错","url":"/2023/05/24/yarn%20build%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%9Ccouldn't%20find%20a%20package.json%20file%20in%20home%E2%80%9D%E6%8A%A5%E9%94%99/","content":"前言：在github扒了一个个人网站首页，需要构建yarn，在build命令时候多次遇到报错，感谢卢哥的帮助。\n问了一下chatgpt，发现不太对，我的json包就在那里放着。\n\n报错原因：\nnode版本过低（应该是之前通过apt命令安装了10.几版本的node），导致yarn无法成功build\n解决办法：\n先在宝塔面板的node管理工具中卸载，后来发现面板中显示的是安装了18.多版本的node，统统卸载： linux如何卸载nodejs\n然后通过面板重新下载，下载完之后node-v不出来的话需要配置环境变量：宝塔面板如何配置node.js环境变量\n","categories":["日常随笔"],"tags":["linux","服务器"]},{"title":"排查宝塔面板配置网站开启不成功bug","url":"/2023/04/27/%E6%8E%92%E6%9F%A5%E5%AE%9D%E5%A1%94%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%90%AF%E4%B8%8D%E6%88%90%E5%8A%9F/","content":"前言：在使用宝塔面板的过程中新建网站一直打不开，之前一直使用的nginx，尝试把nginx关了之后新建网站不知道为什么无论是从域名还是从ip都访问不了，但都能ping通，奇怪。\n\n问题排查：在网上搜了各种办法，检查了阿里云放行的端口，也更改了好几次php版本环境，宝塔方面的防火墙也都检查过了，甚至一直都能ping通，就是访问不上去，快崩溃了。。。\n解决办法：经过卢哥的排查，决定使用重启大法，发现重启了一下服务器就好了，emm，结果更崩溃了（哭\n目前网站www.sirl.top      （弄好后摆烂好久了，淦）\nps：才发现阿里云可以免费申请ssl证书，一年有二十张，好耶\n","categories":["日常随笔"],"tags":["服务器"]},{"title":"45个Git经典操作场景，专治不会合代码","url":"/2023/03/31/45%20%E4%B8%AA%20Git%20%E7%BB%8F%E5%85%B8%E6%93%8D%E4%BD%9C%E5%9C%BA%E6%99%AF%EF%BC%8C%E4%B8%93%E6%B2%BB%E4%B8%8D%E4%BC%9A%E5%90%88%E4%BB%A3%E7%A0%81/","content":"前言：本文转载于45个 GIT 经典操作场景，专治不会合代码 (qq.com)，但是推文作者并非文章原作者，文章原作者待考证，侵删。\n提交（Commit）我刚才提交了什么?如果你用 git commit -a 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前HEAD上的最近一次的提交(commit):\n(main)$ git show  \n\n或者\n$ git log -n1 -p  \n\n我的提交信息(commit message)写错了如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):\n$ git commit --amend --only  \n\n这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:\n$ git commit --amend --only -m &#x27;xxxxxxx&#x27;  \n\n如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。\n我提交(commit)里的用户名和邮箱不对如果这只是单个提交(commit)，修改它：\n$ git commit --amend --author &quot;New Authorname &lt;authoremail@mydomain.com&gt;&quot;  \n\n如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.\n我想从一个提交(commit)里移除一个文件通过下面的方法，从一个提交(commit)里移除一个文件:\n$ git checkout HEAD^ myfile  $ git add -A  $ git commit --amend  \n\n这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。\n我想删除我的的最后一次提交(commit)如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。\n$ git reset HEAD^ --hard  $ git push -f [remote] [branch]  \n\n如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):\n(my-branch*)$ git reset --soft HEAD@&#123;1&#125;  \n\n这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 git revert SHAofBadCommit， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 git push -f。\n删除任意提交(commit)同样的警告：不到万不得已的时候不要这么做.\n$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT  $ git push -f [remote] [branch]  \n\n或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。\n我尝试推一个修正后的提交(amended commit)到远程，但是报错：To https://github.com/yourusername/repo.git  ! [rejected]        mybranch -&gt; mybranch (non-fast-forward)  error: failed to push some refs to &#x27;https://github.com/tanay1337/webmaker.org.git&#x27;  hint: Updates were rejected because the tip of your current branch is behind  hint: its remote counterpart. Integrate the remote changes (e.g.  hint: &#x27;git pull ...&#x27;) before pushing again.  hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.  \n\n注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (-f)。注意 – 总是 确保你指明一个分支!\n(my-branch)$ git push origin mybranch -f  \n\n一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。\n我意外的做了一次硬重置(hard reset)，我想找回我的内容如果你意外的做了 git reset --hard, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。\n(main)$ git reflog  \n\n你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:\n(main)$ git reset --hard SHA1234  \n\n这样就完成了。\n暂存(Staging)我需要把暂存的内容添加到上一次的提交(commit)(my-branch*)$ git commit --amend  \n\n我想要暂存一个新文件的一部分，而不是这个文件的全部一般来说, 如果你想暂存一个文件的一部分, 你可这样做:\n$ git add --patch filename.x  \n\n-p 简写。这会打开交互模式， 你将能够用 s 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:\n$ git add -N filename.x  \n\n然后, 你需要用 e 选项来手动选择需要添加的行，执行 git diff --cached 将会显示哪些行暂存了哪些行只是保存在本地了。\n我想把在一个文件里的变化(changes)加到两个提交(commit)里git add 会把整个文件加入到一个提交. git add -p 允许交互式的选择你想要提交的部分.\n我想把暂存的内容变成未暂存，把未暂存的内容暂存起来多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。\n$ git commit -m &quot;WIP&quot;  $ git add .  $ git stash  $ git reset HEAD^  $ git stash pop --index 0  \n\n注意1: 这里使用pop仅仅是因为想尽可能保持幂等。注意2: 假如你不加上--index你会把暂存的文件标记为为存储。\n未暂存(Unstaged)的内容我想把未暂存的内容移动到一个新分支$ git checkout -b my-branch  \n\n我想把未暂存的内容移动到另一个已存在的分支$ git stash  $ git checkout my-branch  $ git stash pop  \n\n我想丢弃本地未提交的变化(uncommitted changes)如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：\n# one commit  (my-branch)$ git reset --hard HEAD^  # two commits  (my-branch)$ git reset --hard HEAD^^  # four commits  (my-branch)$ git reset --hard HEAD~4  # or  (main)$ git checkout -f  \n\n重置某个特殊的文件, 你可以用文件名做为参数:\n$ git reset filename  \n\n我想丢弃某些未暂存的内容如果你想丢弃工作拷贝中的一部分内容，而不是全部。\n签出(checkout)不需要的内容，保留需要的。\n$ git checkout -p  # Answer y to all of the snippets you want to drop  \n\n另外一个方法是使用 stash， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。\n$ git stash -p  # Select all of the snippets you want to save  $ git reset --hard  $ git stash pop  \n\n或者, stash 你不需要的部分, 然后stash drop。\n$ git stash -p  # Select all of the snippets you don&#x27;t want to save  $ git stash drop  \n\n分支(Branches)我从错误的分支拉取了内容，或把内容拉取到了错误的分支这是另外一种使用 git reflog 情况，找到在这次错误拉(pull) 之前HEAD的指向。\n(main)$ git reflog  ab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forward  c5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here  \n\n重置分支到你所需的提交(desired commit):\n$ git reset --hard c5bc55a  \n\n完成。\n我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致先确认你没有推(push)你的内容到远程。\ngit status 会显示你领先(ahead)源(origin)多少个提交:\n(my-branch)$ git status  # On branch my-branch  # Your branch is ahead of &#x27;origin/my-branch&#x27; by 2 commits.  #   (use &quot;git push&quot; to publish your local commits)  #  \n\n一种方法是:\n(main)$ git reset --hard origin/my-branch  \n\n我需要提交到一个新分支，但错误的提交到了main在main下创建一个新分支，不切换到新分支,仍在main下:\n(main)$ git branch my-branch  \n\n把main分支重置到前一个提交:\n(main)$ git reset --hard HEAD^  \n\nHEAD^ 是 HEAD^1 的简写，你可以通过指定要设置的HEAD来进一步重置。\n或者, 如果你不想使用 HEAD^, 找到你想重置到的提交(commit)的hash(git log 能够完成)， 然后重置到这个hash。使用git push 同步内容到远程。\n例如, main分支想重置到的提交的hash为a13b85e:\n(main)$ git reset --hard a13b85e  HEAD is now at a13b85e  \n\n签出(checkout)刚才新建的分支继续工作:\n(main)$ git checkout my-branch  \n\n我想保留来自另外一个ref-ish的整个文件假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:\n(solution)$ git add -A &amp;&amp; git commit -m &quot;Adding all changes from this spike into one big commit.&quot;  \n\n当你想要把它放到一个分支里 (可能是feature, 或者 develop), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。\n假设你有:\n\n分支 solution, 拥有原型方案， 领先 develop 分支。\n分支 develop, 在这里你应用原型方案的一些内容。\n\n我去可以通过把内容拿到你的分支里，来解决这个问题:\n(develop)$ git checkout solution -- file1.txt  \n\n这会把这个文件内容从分支 solution 拿到分支 develop 里来:\n# On branch develop  # Your branch is up-to-date with &#x27;origin/develop&#x27;.  # Changes to be committed:  #  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)  #  #        modified:   file1.txt  \n\n然后, 正常提交。\n\nNote: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.\n\n我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里假设你有一个main分支， 执行git log, 你看到你做过两次提交:\n(main)$ git log    commit e3851e817c451cc36f2e6f3049db528415e3c114  Author: Alex Lee &lt;alexlee@example.com&gt;  Date:   Tue Jul 22 15:39:27 2014 -0400        Bug #21 - Added CSRF protection    commit 5ea51731d150f7ddc4a365437931cd8be3bf3131  Author: Alex Lee &lt;alexlee@example.com&gt;  Date:   Tue Jul 22 15:39:12 2014 -0400        Bug #14 - Fixed spacing on title    commit a13b85e984171c6e2a1729bb061994525f626d14  Author: Aki Rose &lt;akirose@example.com&gt;  Date:   Tue Jul 21 01:12:48 2014 -0400        First commit  \n\n让我们用提交hash(commit hash)标记bug (e3851e8 for #21, 5ea5173 for #14).\n首先, 我们把main分支重置到正确的提交(a13b85e):\n(main)$ git reset --hard a13b85e  HEAD is now at a13b85e  \n\n现在, 我们对 bug #21 创建一个新的分支:\n(main)$ git checkout -b 21  (21)$  \n\n接着, 我们用_cherry-pick_把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。\n(21)$ git cherry-pick e3851e8  \n\n这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.\n再者， 我们为bug #14 创建一个新的分支, 也基于main分支\n(21)$ git checkout main  (main)$ git checkout -b 14  (14)$  \n\n最后, 为 bug #14 执行 cherry-pick:\n(14)$ git cherry-pick 5ea5173  \n\n我想删除上游(upstream)分支被删除了的本地分支一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。\n$ git fetch -p  \n\n我不小心删除了我的分支如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:\n(main)$ git checkout -b my-branch  (my-branch)$ git branch  (my-branch)$ touch foo.txt  (my-branch)$ ls  README.md foo.txt  \n\n添加文件并做一次提交\n(my-branch)$ git add .  (my-branch)$ git commit -m &#x27;foo.txt added&#x27;  (my-branch)$ foo.txt added   1 files changed, 1 insertions(+)   create mode 100644 foo.txt  (my-branch)$ git log    commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012  Author: siemiatj &lt;siemiatj@example.com&gt;  Date:   Wed Jul 30 00:34:10 2014 +0200        foo.txt added    commit 69204cdf0acbab201619d95ad8295928e7f411d5  Author: Kate Hudson &lt;katehudson@example.com&gt;  Date:   Tue Jul 29 13:14:46 2014 -0400        Fixes #6: Force pushing after amending commits  \n\n现在我们切回到主(main)分支，‘不小心的’删除my-branch分支\n(my-branch)$ git checkout main  Switched to branch &#x27;main&#x27;  Your branch is up-to-date with &#x27;origin/main&#x27;.  (main)$ git branch -D my-branch  Deleted branch my-branch (was 4e3cd85).  (main)$ echo oh noes, deleted my branch!  oh noes, deleted my branch!  \n\n在这时候你应该想起了reflog, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。\n(main)$ git reflog  69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to main  4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added  69204cd HEAD@&#123;2&#125;: checkout: moving from main to my-branch  \n\n正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。\n(main)$ git checkout -b my-branch-help  Switched to a new branch &#x27;my-branch-help&#x27;  (my-branch-help)$ git reset --hard 4e3cd85  HEAD is now at 4e3cd85 foo.txt added  (my-branch-help)$ ls  README.md foo.txt  \n\n看! 我们把删除的文件找回来了。Git的 reflog 在rebasing出错的时候也是同样有用的。\n我想删除一个分支删除一个远程分支:\n(main)$ git push origin --delete my-branch  \n\n你也可以:\n(main)$ git push origin :my-branch  \n\n删除一个本地分支:\n(main)$ git branch -D my-branch  \n\n我想从别人正在工作的远程分支签出(checkout)一个分支首先, 从远程拉取(fetch) 所有分支:\n(main)$ git fetch --all  \n\n假设你想要从远程的daves分支签出到本地的daves\n(main)$ git checkout --track origin/daves  Branch daves set up to track remote branch daves from origin.  Switched to a new branch &#x27;daves&#x27;  \n\n(--track 是 git checkout -b [branch] [remotename]/[branch] 的简写)\n这样就得到了一个daves分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.\nRebasing 和合并(Merging)我想撤销rebase&#x2F;merge你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase&#x2F;merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase&#x2F;merge前的状态是很容易的。\n(my-branch)$ git reset --hard ORIG_HEAD  \n\n我已经rebase过, 但是我不想强推(force push)不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。\n这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:\n(main)$ git checkout my-branch  (my-branch)$ git rebase -i main  (my-branch)$ git checkout main  (main)$ git merge --ff-only my-branch  \n\n我需要组合(combine)几个提交(commit)假设你的工作分支将会做对于 main 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:\n(my-branch)$ git reset --soft main  (my-branch)$ git commit -am &quot;New awesome feature&quot;  \n\n如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):\n(my-branch)$ git rebase -i main  \n\n如果没有相对的其它分支， 你将不得不相对自己的HEAD 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于HEAD~2 进行rebase， 组合最近3次提交(commit), 相对于HEAD~3, 等等。\n(main)$ git rebase -i HEAD~2  \n\n在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:\npick a9c8a1d Some refactoring  pick 01b2fd8 New awesome feature  pick b729ad5 fixup  pick e3851e8 another fix    # Rebase 8074d12..b729ad5 onto 8074d12  #  # Commands:  #  p, pick = use commit  #  r, reword = use commit, but edit the commit message  #  e, edit = use commit, but stop for amending  #  s, squash = use commit, but meld into previous commit  #  f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message  #  x, exec = run command (the rest of the line) using shell  #  # These lines can be re-ordered; they are executed from top to bottom.  #  # If you remove a line here THAT COMMIT WILL BE LOST.  #  # However, if you remove everything, the rebase will be aborted.  #  # Note that empty commits are commented out  \n\n所有以 # 开头的行都是注释, 不会影响 rebase.\n然后，你可以用任何上面命令列表的命令替换 pick, 你也可以通过删除对应的行来删除一个提交(commit)。\n例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 f:\npick a9c8a1d Some refactoring  pick 01b2fd8 New awesome feature  f b729ad5 fixup  f e3851e8 another fix  \n\n如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个r，或者更简单的用s 替代 f:\npick a9c8a1d Some refactoring  pick 01b2fd8 New awesome feature  s b729ad5 fixup  s e3851e8 another fix  \n\n你可以在接下来弹出的文本提示框里重命名提交(commit)。\nNewer, awesomer features    # Please enter the commit message for your changes. Lines starting  # with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.  # rebase in progress; onto 8074d12  # You are currently editing a commit while rebasing branch &#x27;main&#x27; on &#x27;8074d12&#x27;.  #  # Changes to be committed:  # modified:   README.md  #  \n\n如果成功了, 你应该看到类似下面的内容:\n(main)$ Successfully rebased and updated refs/heads/main.  \n\n安全合并(merging)策略--no-commit 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。no-ff 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。\n(main)$ git merge --no-ff --no-commit my-branch  \n\n我需要将一个分支合并成一个提交(commit)(main)$ git merge --squash my-branch  \n\n我只想组合(combine)未推的提交(unpushed commit)有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。\n(main)$ git rebase -i @&#123;u&#125;  \n\n这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder&#x2F;fix&#x2F;squash 都是安全的。\n检查是否分支上的所有提交(commit)都合并(merge)过了检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:\n(main)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll  \n\n这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:\n(main)$ git log main ^feature/120-on-scroll --no-merges  \n\n交互式rebase(interactive rebase)可能出现的问题这个rebase 编辑屏幕出现’noop’如果你看到的是这样:\nnoop  \n\n这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:\n\n检查确保主(main)分支没有问题\nrebase HEAD~2 或者更早\n\n有冲突的情况如果你不能成功的完成rebase, 你可能必须要解决冲突。\n首先执行 git status 找出哪些文件有冲突:\n(my-branch)$ git status  On branch my-branch  Changes not staged for commit:    (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)    (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)     modified:   README.md  \n\n在这个例子里面, README.md 有冲突。打开这个文件找到类似下面的内容:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD    some code    =========    some code    &gt;&gt;&gt;&gt;&gt;&gt;&gt; new-commit\n\n你需要解决新提交的代码(示例里, 从中间==线到new-commit的地方)与HEAD 之间不一样的地方.\n有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):\n(main*)$ git mergetool -t opendiff  \n\n在你解决完所有冲突和测试过后, git add 变化了的(changed)文件, 然后用git rebase --continue 继续rebase。\n(my-branch)$ git add README.md  (my-branch)$ git rebase --continue  \n\n如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行git rebase --skip。\n任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:\n(my-branch)$ git rebase --abort  \n\nStash暂存所有改动暂存你工作目录下的所有改动\n$ git stash  \n\n你可以使用-u来排除一些文件\n$ git stash -u  \n\n暂存指定文件假设你只想暂存某一个文件\n$ git stash push working-directory-path/filename.ext  \n\n假设你想暂存多个文件\n$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext  \n\n暂存时记录消息这样你可以在list时看到它\n$ git stash save &lt;message&gt;  \n\n或\n$ git stash push -m &lt;message&gt;  \n\n使用某个指定暂存首先你可以查看你的stash记录\n$ git stash list  \n\n然后你可以apply某个stash\n$ git stash apply &quot;stash@&#123;n&#125;&quot;  \n\n此处， ‘n’是stash在栈中的位置，最上层的stash会是0\n除此之外，也可以使用时间标记(假如你能记得的话)。\n$ git stash apply &quot;stash@&#123;2.hours.ago&#125;&quot;  \n\n暂存时保留未暂存的内容你需要手动create一个stash commit， 然后使用git stash store。\n$ git stash create  $ git stash store -m &quot;commit-message&quot; CREATED_SHA1  \n\n杂项(Miscellaneous Objects)克隆所有子模块$ git clone --recursive git://github.com/foo/bar.git  \n\n如果已经克隆了:\n$ git submodule update --init --recursive  \n\n删除标签(tag)$ git tag -d &lt;tag_name&gt;  $ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;\n\n恢复已删除标签(tag)如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):\n$ git fsck --unreachable | grep tag  \n\n记下这个标签(tag)的hash，然后用Git的 update-ref\n$ git update-ref refs/tags/&lt;tag_name&gt; &lt;hash&gt;  \n\n这时你的标签(tag)应该已经恢复了。\n已删除补丁(patch)如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 git am。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。\n做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。\n跟踪文件(Tracking Files)我只想改变一个文件名字的大小写，而不修改内容(main)$ git mv --force myfile MyFile  \n\n我想从Git删除一个文件，但保留该文件(main)$ git rm --cached log.txt  \n\n配置(Configuration)我想给一些Git命令添加别名(alias)在 OS X 和 Linux 下, 你的 Git的配置文件储存在 ~/.gitconfig。我在[alias] 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:\n[alias]      a = add      amend = commit --amend      c = commit      ca = commit --amend      ci = commit -a      co = checkout      d = diff      dc = diff --changed      ds = diff --staged      f = fetch      loll = log --graph --decorate --pretty=oneline --abbrev-commit      m = merge      one = log --pretty=oneline      outstanding = rebase -i @&#123;u&#125;      s = status      unpushed = log @&#123;u&#125;      wc = whatchanged      wip = rebase -i @&#123;u&#125;      zap = fetch -p  \n\n我想缓存一个仓库(repository)的用户名和密码你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推&#x2F;拉(push&#x2F;pull)的时候都输入，Credential helper能帮你。\n$ git config --global credential.helper cache  # Set git to use the credential memory cache  $ git config --global credential.helper &#x27;cache --timeout=3600&#x27;  # Set the cache to timeout after 1 hour (setting is in seconds)  \n\n我不知道我做错了些什么你把事情搞砸了：你 重置(reset) 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。\n这就是 git reflog 的目的， reflog 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到reflog。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。\n(main)$ git reflog  0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2  0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to main  c10f740 HEAD@&#123;2&#125;: checkout: moving from main to 2.2  \n\n上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 HEAD@&#123;0&#125;标识.\n如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。\n$ git reset --hard 0254ea7  \n\n然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。\n","categories":["日常随笔"],"tags":["git"]},{"title":"如何注册并使用Chat-Gpt","url":"/2023/03/31/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E5%B9%B6%E4%BD%BF%E7%94%A8Chat-Gpt/","content":"前言：以下所有步骤都需要挂梯子使用，且需要选择非香港节点。2023年3.31号目前笔者在使用的梯子为小强Cloud (xqcloud.net)，最低配节点5r一个月。另最近openai在大规模封号，具体原因不清楚，个人猜测可能是服务器压力然后封了一些批量注册的账号（目前笔者按照以下方法注册的个人的账号还没有被封）。\n一、使用简介chat最擅长的就是用来写文章，甚至可以用来写小说\n示例一：拿来写校园征文。\n\n\n示例二：拿来写小说。\n\n当然，对我们帮助最大的其实是写代码和debug能力。\n示例一：debug一段代码。\n\n他可以在几秒内找出代码的bug，并把debug后带注释的代码发给你。\n\n\n当然，最神奇的是你可以直接给他命令，让他帮忙写代码。\n例如，我们现在来让他写一个博客主页。\t\n\n当然，chat有时候也会犯傻。比如说他只给我了css代码，但是就说已经完成了html代码和css代码。\n不过不要紧，我们继续追问，让他补全html部分。\n\n我们可以后期继续追问的过程中添加更多的命令，如“添加侧边导航栏”，“返回顶部”按钮等要求来让他进一步完善代码。\n二、注册过程1、前期准备一、首先要准备好一个梯子，挂上除香港外的节点。注意要开启全局代理。\n二、注册chatgpt的时候不能绕开的是需要一个国外的手机号，来接受注册时候的验证码。我们可以利用这个接码平台来获取一个虚拟手机号的验证码。\n\n\n\n因为是\t左右。\n\n收到验证码后点击确认一下，会自动跳转到首页。\n\n接着就是一些引导\n\n然后再余额这里选择充值\n\n下拉 找到支付宝充值的选项\n最低充值2美金，加上税是2.1美金，约合人民币14块多，一条的成本可以多个人注册一个账号。充值成功后还是得稍等一会儿才能到账。\n余额到账后在左边搜索 openai\n\n\n建议选择巴西的手机号，\n然后这个手机号就是一会用来接受验证码的号码，只有20分钟的有效期。不过不成功接受验证码不会扣费的，就先放到这准备着。\n2、注册ChatGPTgoogle首页搜索chatgpt，第一个网站就是。或者直接访问Introducing ChatGPT (openai.com)。\n\n打开网站https://openai.com/blag/chatgpt，然后点击左下角“Try ChatGPT”。\n\n点击sign up\n\n\n目前只能使用谷歌邮箱登陆，国内的其他的邮箱账户全部被禁止。例如用QQ邮箱注册的话就会出现如上图的提示：\n\n在这里输入谷歌邮箱或者谷歌账号\n\n然后按照提示设置自己的姓名\n\n然后点击继续 会让你输手机号 \n\n我们就把刚才在接码平台准备好的手机号复制粘贴过来，注意选择对应的国家以及前边的国家号别重复输入了。\n然后会提示让你输入验证码\n\n在接码平台上稍等片刻就能收到这个验证码了\n然后输入验证码后就注册成功啦，然后接下来就是一个简单的引导过程，引导后就可以用啦。\n\n\n\n\n三、常见问题1.如何快速注册一个谷歌gmail邮箱 - 知乎 (zhihu.com)\n2.openai官网能进，chatgpt官网进不去：节点问题，更换节点。\n\n3.在提问的过程中出现错误：免费版chat的服务器问题，ctrl+r强制刷新一下就好了。也可自行选择升级plus版本，20刀一个月。\n\n","categories":["日常随笔"],"tags":["奇奇怪怪"]},{"title":"返回顶部的几种方式","url":"/2023/03/01/%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","content":"一、a标签指向id&lt;a href=&quot;#top&quot; style=&quot;position: absolute;top: 2500px;&quot;&gt;点我回到顶部&lt;/a&gt;\n默认#top为回到顶部，top可以更换成任何前文出现过的id。\n效果为瞬间定位，定位到id对应内容在页面最靠上的位置。\n二、a标签指向a标签锚点&lt;body&gt;\t&lt;a name=&quot;test&quot;&gt;点我回到顶部&lt;/a&gt;`\t&lt;div&gt;...&lt;/div&gt;\t&lt;a href=&quot;#test&quot; style=&quot;position: absolute;top: 2500px;&quot;&gt;点我回到顶部&lt;/a&gt;`&lt;/body&gt;\n\n定位到对应name名的a标签上，只能是a标签。\n效果为瞬间定位。\n三、js控制Windows事件&lt;a style=&quot;position: absolute;top: 2000px;&quot; href=&quot;javascript:window.scrollTo(0,0)&quot;&gt;\n返回x&#x3D;0，y&#x3D;0的位置。默认效果为瞬间定位。\n至于获取坐标，则略麻烦：JS dom元素相关尺寸、位置、以及鼠标坐标位置_哎呀小新的博客-CSDN博客\n可使用behavior：&#39;smooth&#39;改为平滑滚动。详见 js临时笔记。\n四、jQuery带动画的返回&lt;body&gt;    &lt;div class=&quot;header&quot;&gt;我在顶部&lt;/div&gt;    &lt;!-- 很多内容 --&gt;    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;!-- 很多内容 --&gt;    &lt;img class=&quot;footer&quot; id=&quot;gotoTop&quot; src=&quot;https://i02piccdn.sogoucdn.com/4f3b2858eec9e2cf&quot; alt=&quot;&quot;&gt;     &lt;script&gt;        function gotoTop(minHeight)&#123;             // 定义点击返回顶部图标后向上滚动的动画            $(&quot;#gotoTop&quot;).click(                function()&#123;$(&#x27;html,body&#x27;).animate(&#123;scrollTop:&#x27;0px&#x27;&#125;,&#x27;slow&#x27;);            &#125;)             // 获取页面的最小高度，无传入值则默认为600像素            minHeight? minHeight = minHeight:minHeight = 600;             // 为窗口的scroll事件绑定处理函数            $(window).scroll(function()&#123;                 // 获取窗口的滚动条的垂直滚动距离                var s = $(window).scrollTop();                 // 当窗口的滚动条的垂直距离大于页面的最小高度时，让返回顶部图标渐现，否则渐隐                if( s &gt; minHeight)&#123;                    $(&quot;#gotoTop&quot;).fadeIn(500);                &#125;else&#123;                    $(&quot;#gotoTop&quot;).fadeOut(500);                &#125;;            &#125;);        &#125;;        gotoTop();    &lt;/script&gt;&lt;/body&gt;\n\n","categories":["编程相关"],"tags":["前端"]},{"title":"「持续更新」汇总电脑常见问题","url":"/2023/02/15/%E3%80%8C%20%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%8D%E6%B1%87%E6%80%BB%E7%94%B5%E8%84%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","content":"前言：寒假在跟学弟做分享时写的一篇博文，留着以后继续添加完善维修过程中遇到的各种电脑问题嘿。\n\n本文最近更新时间：2023-6-21 10:39:27。\n\n一、网络方面\nQQ微信能打开，网页打不开：常为DNS出现问题。更改DNS设置为自动获取，或者在网上搜索阿里云等大厂商的DNS手动设置。\n\n​\t\t更改方法：Windows如何修改DNS  (zhihu.com)\n\n某些个特定网址打不开：多为被运营商在后台屏蔽了，如我们使用的校园网CMCC就会屏蔽很多常用的包括github在内的诸多网站。\n解决办法： 更换wifi网络，或者使用手机热点。\n\n网速慢的异常：网速慢大概率是运营商的问题，但不排除使用的wifi在后台被限制了网速。\n解决办法：无线路由器如何更改限制网速 如何控制wifi速度 (baidu.com)\n\n网络显示连接正常但完全连不上网络：先通过ping命令测试一下能不能正常访问互联网。\n如果不行，需要从网络未拨号登陆，网络设备连接错误 ，网络运营商设备出错等方面排除问题。\n如果可以，则有可能是路由器的mac地址错误问题，局域网代理被开启问题等问题。\n能ping通网址且dns无问题情况下浏览器无法访问 (wuzhiyou.top)\n无线路由器的“克隆MAC地址”解决网络不能访问问题(cnblogs.com)\n\n能正常访问互联网但访问不了内网：信管团委的电脑常出现这种情况，原因在于需要手动设置学校的DNS，分别为202.196.80.1和114.114.114.114。\n\n\n二、硬件方面\n开机左上角出现一条闪烁的横杠：大概率为内存条读取失败。\n解决办法：拔出内存条，使用橡皮轻轻擦拭金手指部分，最后吹净橡皮沫放回。\n\n电脑风扇转动异常：积灰过多或CPU硅脂少会造成风扇转速快且声音响。\n解决办法：涂硅脂并清灰。\n\n开机读取不到电脑硬盘：进入BIOS或者PE里边，确认是不是真的没有读取，先排除显示异常的问题。\n解决办法：拆机，更换硬盘通道接口。\n\n台式机电脑无法开机&#x2F;开机完全没反应：排除掉内存条和硬盘的问题后，确认一下主机上的显示器接口是不是插对了，一般会有两个接口，其中一个通的是显卡。如果一个主机有独显的话，大概率是要插到通显卡的那个显示器接口。\n解决办法：更换到另一个显示接口上。\n\n电脑拆机注意事项：\n\n拆机第一件事儿断电源按开机键放静电，一定要断电源断电源断电源！不然可能像我一样无线网卡和指纹识别模块都烧了（哭\nM2接口的硬盘和内存条有点儿像，注意分清楚\n连接电池的数据带可能一个是键盘背光灯，一个是指纹识别的，没烧的话一般不会坏，大都是没接好（戴尔G3）\n\n\n能正常进入系统但只有在PE里读不到硬盘：检查比特锁是否开启，或在bios里边更改SATA设置\n\n\n三、系统方面\n蓝屏&#x2F;黑屏等异常：极少频率的蓝屏或黑屏没有太大问题，但也要注意是不是驱动或者硬件等出现问题了。\n解决办法：搜索响应的蓝屏&#x2F;黑屏代码，对症下药解决问题。如果仍旧不能解决，重装系统。\n\n声音&#x2F;WiFi&#x2F;蓝牙等缺失：大概率驱动问题，小概率硬件问题。\n解决办法：查找相应的驱动，第三方软件自动安装有时会不全面，可以去官网搜索对应型号的驱动手动下载。\n\n格式化分区&#x2F;重新分区时出现bitlocker锁：如果是真的比特锁，无解，但有时只是带bitlocker的标志，并不一定是真正加了bitlocker锁的。\n解决办法：可尝试删除分区，然后格式化，重新分区。\n\n电脑卡顿&#x2F;系统盘接近爆满：可以手动清理，也可以使用清理工具清理。清理工具会清理的更干净，但可能会漏掉微信QQ传输的历史文件。如果使用工具的话推荐使用ccleaner。\n解决办法：下载 CCleaner | 免费清理、优化和调整您的 PC！\n​\t\t\t\t\t如何手动清理电脑里的垃圾？  (zhihu.com)\n\n使用iSO安装系统时出现MBR分区无法安装：开机引导的方式 与 存储数据的结构 存在对应关系，Legacy引导 → MBR分区，UEFI引导 → GPT分区。所以需要正确选择开机引导方式或者更改引导方式。\n解决办法：解决使用iso装Windows时出现MBR分区无法安装 (wuzhiyou.top)\n\niso重装系统后没有WiFi或网络：确实网卡&#x2F;无线网卡驱动，建议直接用有网的电脑在官网找到对应驱动然后下载。小兵PE里带的那个驱动总裁就挺好用的，或者是手机usb连接电脑供网。\n\n\n四、打印机方面和爽这个学期修了好多打印机，遂汇总了起来遇到过的（目前只有校园网能访问）：\n打印机常见问题 - 电脑120 (henau.edu.cn)\n五、杂七杂八1.电脑进水：第一时间关机，然后拆机拔掉电源电池以及主板上的纽扣电池，切记不要再通电开机。电脑能拆到哪一步是哪一步（要保证拆完后能再装上），然后吹风机冷风吹干并多晾几天。然而即便如此也不能保证进水的电脑不出现后续问题。\n2.bj网弹不出登录界面：Windows系统校园bj网络不弹登录网页的解决方法 - 电脑120 (henau.edu.cn)\n3.微信接受的文档类文件打开全部自动默认为只读：维修一台电脑时发现的奇怪的问题，原以为是office没有激活的问题，经过测试后才发现只有通过微信接受的文件才会出现这个问题，在网上搜索发现是因为微信新版本的bug。2个月了，微信接收的所有文件变成只读，终于有解了_手机搜狐网 (sohu.com)\n4.vscode插件和汉化包都无法下载：首先把vscode卸载干净然后重装，如果仍然相同问题考虑更换网络环境，如我们学校的CMCC校园网就会导致这种情况的出现。\n5.电脑黑屏但其他一切正常：那天晚上在值班过程中遇到一个同学的电脑黑屏，按下最上边的功能键发现功能和对应功能不匹配，揭开键盘膜才发现好家伙原来是不配套的键盘膜，亮度不知不觉中给调到了最低就出现了黑屏的现象。笑死。\n6.u盘误改为mbr分区后无法读取：操作系统无法识别但pe可以，进pe改回gpt分区即可。不过数据恢复大概是要钱的。\n7.电脑扬声器显示一切正常但没有声音：进主板里边测试是否有声音，先排除硬件故障。然后把声卡驱动卸载重装，或者是卸载掉某项奇怪的驱动（就是这么的奇怪\n8.无纸化测评打不开：如今微软已经彻底停止了对win10及win11的IE支持，最简单的办法是下载360安全浏览器使用ie模式，如在收到安装插件时出现&quot;不能打开要写入的文件windows\\system 32\\SowerKsv7RichClientAddin.dll&quot;提示，关机重启电脑即可。\n9.U盘中的文件能修改但不能保存：格式化u盘并选择NTFS格式，用此方法解决了一个劣质u盘出现的奇葩问题。\n\n","categories":["电脑相关"],"tags":["电脑维修"]},{"title":"关于RAM和ROM的浅理解","url":"/2023/02/15/%E5%85%B3%E4%BA%8ERAM%E5%92%8CROM%E7%9A%84%E6%B5%85%E7%90%86%E8%A7%A3/","content":"前言：本文首发于关于RAM和ROM 的浅理解 - 无知呦 - 博客园 (cnblogs.com)，转载请注明来源。\n\n\n课上学到了但是没明白 下来自己搜了搜不知道理解的对不对\nRAM: Random Access Memory　　随机存储存取器\nROM: Read Only Memory　　　　 只读存储存取器\n特别注意：两者都是内存，ROM≠硬盘！\n且顾名思义，“随机存储”即内存可以随时随地改变，随时读写，速度快。但若断电或关机会丢失，故没法用来做长期存储的工具。\n“只读存储”只能读入不能写出信息，即使切断电源，信息也不会丢失。适合长期存储。\n内存是CPU信息的直接来源，暂时存放CPU中的运算数据，以及与硬盘等外存交换的数据。\n\n","categories":["日常随笔"],"tags":["奇奇怪怪"]},{"title":"购买云服务器并通过互联网访问","url":"/2023/02/07/%E8%B4%AD%E4%B9%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E9%80%9A%E8%BF%87%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%BF%E9%97%AE/","content":"前言：买完服务器一定要抓紧时间玩儿啊，这两天才发现服务器正价购买原来这么贵..\n一、购买阿里云和腾讯云或者其他均可，以阿里云为例，新人优惠力度最大的是轻量应用服务器，我买的2核2G的首年只需要50块钱，可以每个平台轮着来薅羊毛。详细购买教程新手小白如何购买阿里云服务器（图文教程） - 知乎 (zhihu.com)。\n需要注意的是购买的时候选什么都无所谓，如果看不明白也不要紧，最后可以在控制面板里不限次的重置系统。\n\n二、部署我们买的服务器多为linux系统，命令使用对我们新手来说不是很熟练，这时候有一个非常好用的服务器管理工具：宝塔面板 - 简单好用的Linux&#x2F;Windows服务器运维管理面板，可以代替阿里云控制台的管理面板使用，帮助我们一键部署linux下各种所需的环境以及可视化上传下载文件。\n\n宝塔官网的介绍：\n使用宝塔前： 手工输入命令安装各类软件，操作起来费时费力并且容易出错，而且需要记住很多Linux的命令，非常复杂。\n使用宝塔后： 2分钟装好面板，一键管理服务器，鼠标点几下就能替代以前的复杂繁多命令，操作简单，看一眼就会使用。\n\nip是你购买的服务器的公网ip，端口号22默认的不建议更改，常用来做ssh连接的端口号。密码是在服务器购买商处设置的管理密码，忘记的话可以重置一下。接着傻瓜式安装就好了，全部默认操作然后下一步，直至安装成功（这个面板信息要复制自己保存下来）。\n\n三、配置端口直接点上边的面板地址是打不开的，原因是因为服务器购买商的防火墙设置里默认没有给8888端口放行，需要在服务器购买商的服务器控制面板里打开加上8888端口。\n\n然后再打开刚保存的面板地址就可以打开了，输入账号密码进入宝塔管理面板，功能和实用性远超默认的服务器管理面板。\n\n四、上传文件因为使用的是nginx反向代理，所以需要在nginx下的html文件夹里部署网页的显示界面，index.html是网站显示的首界面。注意：此文件名必须是index.html。\n\n五、互联网访问这时候在任意浏览器输入公网的ip就可以直接访问了，有域名的话绑定一下域名，之后也就可以通过域名访问该服务器啦。如目前我的公网ip: 47.108.191.26\n结尾：搞什么玩嘞，网盘？音乐播放器？或者是拿来做自己一直想做的校园食堂网？\n","categories":["日常随笔"],"tags":["网站"]},{"title":"Markdown语法使用说明","url":"/2023/02/06/Markdown%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","content":"前言：温故而知新，作为备忘复习使用，目标无鼠标码字。删除了原篇的数学公式部分，目前还用不到，另外貌似公式在hexo下显示有问题。\n一、标题\n语法：# (一级标题)  ## (二级标题)  ### (三级标题) ……\n\n\n代码：\n&gt;# 这是一级标题&gt;## 这是二级标题\n\n\n效果:  \n这是一级标题这是二级标题\n\n快捷键:\n\nCtrl+数字1~6可以快速将选中的文本调成对应级别的标题\nCtrl+0可以快速将选中的文本调成普通文本\nCtrl+加号&#x2F;减号对标题级别进行加减\n\n\n二、段落1、换行\n代码:  \n&gt;这是一个段落&gt;这是一个段落\n\n\n效果: \n这是一个段落这是一个段落\n\n2、分割线\n语法:  —或者***+回车\n\n\n代码:\n&gt;---或者***\n\n\n效果:\n\n\n三、文字显示1、字体\n语法:\n\n粗体:  用一对双星号包裹\n删除线:  用一对双飘号包裹\n下划线:  用一对u标签包裹\n斜体:  用一对单星号包裹\n高亮:  用一对双等号包裹\n\n\n\n代码:\n&gt;**这是粗体**&gt;~~这是删除线~~&gt;&lt;u&gt;这是下划线&lt;/u&gt;&gt;*这是斜体*&gt;==这是高亮==\n\n\n效果:这是粗体这是删除线这是下划线这是斜体&#x3D;&#x3D;这是高亮&#x3D;&#x3D;\n\n\n快捷键:\n\n加粗:  Ctrl+B\n删除线:  Shift+Alt+5\n下划线:  Ctrl+U\n斜体:  Ctrl+L\n\n\n2、上下标\n代码:\n&gt;x^2^&gt;H~2~O\n\n\n效果:x^2^H2O\n\n四、列表1、无序列表\n代码:\n&gt;*/-/+ +空格\n\n\n效果:1.只有同一级别:\n\n苹果\n香蕉\n橘子\n\n2.子集类:\n\n一级分类\n二级分类 \n三级分类\n\n\n\n\n\n快捷键:  Ctrl+Shift+]\n\n2、有序列表\n代码:\n&gt;数字+.+空格\n\n\n效果:\n\n第一个标题\n第二个标题\n第三个标题\n\n\n子内容1\n子内容2\n\n\n第四个标题\n\n\n\n快捷键:  Ctrl+Shift+[\n\n3、任务列表\n代码:\n&gt;- [ ] 吃早餐&gt;- [x] 背单词\n\n\n效果:\n\n 吃早餐\n 背单词\n\n\n五、区块显示\n代码:\n&gt;&gt;+回车\n\n\n效果:\n\n这是最外层区块\n\n\n\n这是内层区块\n\n\n\n\n\n这是最内层区块\n\n\n\n\n六、代码显示1、行内代码\n代码:\n&gt;`int a=0;`（说明：`位于Esc下面）\n\n\n效果:int a=0;\n\n\n快捷键:  Ctrl+Shift+&#96;\n\n2、代码块\n代码:\n&gt;​```js/java/c#/text&gt;内容&gt;```\n\n&gt;快捷键:  Ctrl+Shift+K## 七、链接&gt;代码:&gt;```text&gt;www.baidu.com&gt;[百度一下](https://www.baidu.com)&gt;[百度一下](https://www.baidu.com &quot;https://www.baidu.com&quot;)&gt;```&gt;效果:&gt;www.baidu.com&gt;[百度一下](https://www.baidu.com)&gt;[百度一下](https://www.baidu.com &quot;https://www.baidu.com&quot;)&gt;快捷键:  Ctrl+K## 八、脚注&gt;说明:  对文本进行解释说明。&gt;代码: &gt;```text&gt;[^文本]&gt;[^文本]:解释说明&gt;```&gt;效果:&gt;这是一个技术[^①]&gt;[^①]: 这是一个非常好用的框架。## 九、图片插入&gt;代码:&gt;```text&gt;![不显示的文字](图片路径 &quot;图片标题&quot;)&gt;```&gt;效果:&gt;![This is a picture](C:\\Users\\asus\\Pictures\\Saved Pictures\\Snipaste_2020-09-03_13-19-11.png &quot;漫步图&quot;)&gt;(注：效果路径为C:\\Users\\asus\\Pictures\\Saved Pictures\\Snipaste_2020-09-03_13-19-11.png。在其他电脑上可能不显示。)&gt;快捷键:  Ctrl+Shift+I## 十、表格&gt;代码:&gt;```text&gt;|  1   |  2   |  3   |&gt;| :--- | :--: | ---: |&gt;|  4   |  5   |  6   |&gt;|  7   |  8   |  9   |&gt;|  10  |  11  |  12  |&gt;```&gt;效果:&gt;| 1    |  2   |    3 |&gt;| ---- | :--: | ---: |&gt;| 4    |  5   |    6 |&gt;| 7    |  8   |    9 |&gt;| 10   |  11  |   12 |&gt;快捷键:  Ctrl+T## 十一、流程图### 1、横向流程图代码:````text​```mermaidgraph LRA[方形]==&gt;B(圆角)B==&gt;C&#123;条件a&#125;C--&gt;|a=1|D[结果1]C--&gt;|a=2|E[结果2]F[横向流程图]```\n\n&gt;效果:&gt;```mermaid&gt;graph LR&gt;A[方形]==&gt;B(圆角)&gt;B==&gt;C&#123;条件a&#125;&gt;C--&gt;|a=1|D[结果1]&gt;C--&gt;|a=2|E[结果2]&gt;F[横向流程图]&gt;```### 2、竖向流程图代码:````text​```mermaidgraph TDA[方形]==&gt;B(圆角)B==&gt;C&#123;条件a&#125;C--&gt;|a=1|D[结果1]C--&gt;|a=2|E[结果2]F[竖向流程图]```\n\n\n\n\n\n效果:\n&gt;graph TD&gt;A[方形]==&gt;B(圆角)&gt;B==&gt;C&#123;条件a&#125;&gt;C--&gt;|a=1|D[结果1]&gt;C--&gt;|a=2|E[结果2]&gt;F[竖向流程图]\n\n十二、表情符号\n代码:\n&gt;:happy:、:cry:、:man:\n\n\n效果::happy:、 :cry:、 :man:\n\n十三、支持的HTML元素1、文本居中\n代码\n&gt;&lt;center&gt;内容&lt;/center&gt;\n\n\n效果\n内容\n\n2、快捷键显示\n代码:\n&gt;&lt;kbd&gt;内容&lt;/kbd&gt;\n\n\n效果:内容\n\n3、加粗\n代码:\n&gt;&lt;b&gt;加粗&lt;/b&gt;\n\n\n效果:\n加粗\n\n4、倾斜\n代码:\n&gt;&lt;i&gt;倾斜&lt;/i&gt;\n\n\n效果:倾斜\n\n5、上下标\n代码:\n&gt;开始&lt;sup&gt;123hi你好&lt;/sup&gt;&gt;开始&lt;sub&gt;321hi你好&lt;/sub&gt;\n\n\n效果:开始123hi你好开始321hi你好\n\n十四、实战练习习题1将这段话改为2级标题\n习题2：\n试着在你的Typora中编辑下面的内容：\n\n这是第1行\n这是第2行这是补充内容\n这是第3行\n习题3：\n将下面的内容改为指定的格式要求：\n\n黑体\t斜体\t下划线\t高亮\n黑体加下划线，并高亮显示\n拓展题：\n试着输入1*2*3*...*99，如何解决*不显示的问题？\n\n\n试着输入\\*，如何解决\\消失的问题？\n\n习题4：\n试着打出x~1~^2^，观察它的结果是不是$x_1^2$，了解上下标的局限性。\n\n习题5：\n试着使用列表编辑出下面的效果：\n\n\n删除官方YUM库\n\n编写本地YUM库配置文件\n\n内容：\n一个图片。\n\n注意事项\n\n\n\n安装挂载光盘：\n\n插入光盘并通电，挂载\n将上述挂载命令写入\n\n\n\n习题6：\n\n将习题5中的一个图片前增加区块（不是前一行）。\n试着打出下面的效果。\n\n\n\n我们处在一个区块里。\n对的，没错。\n\n\n我们处在一个区块里。\n\n\n不，不对。\n\n习题7：\n使用行内代码美化下面第一段的内容（第二段用于对照）：\n\n即使cv::Vec&lt;&gt;是模板，但大部分的时间你都不会倾向于使用它的这个形式。相对的，有很多它的别名（typedef）以便用于通用的实例。它们有着cv::Vec2i, cv::Vec3i和cv::Vec4d这样的名称（分别对应于2个元素的整型向量、3个元素的整型向量和4个元素的双精度浮点向量）。任何有着cv::Vec{2,3,4,6}{b,w,s,i,f,d}形式的声明（b&#x3D;unsigned char，w&#x3D;unsigned short，s&#x3D;short），对于2个到6个维度的6种数据类型的任何组合都是有效的。\n即使cv::Vec&lt;&gt;是模板，但大部分的时间你都不会倾向于使用它的这个形式。相对的，有很多它的别名（typedef）以便用于通用的实例。它们有着cv::Vec2i, cv::Vec3i和cv::Vec4d这样的名称（分别对应于2个元素的整型向量、3个元素的整型向量和4个元素的双精度浮点向量）。任何有着cv::Vec{2,3,4,6}{b,w,s,i,f,d}形式的声明（b&#x3D;unsigned char，w&#x3D;unsigned short，s&#x3D;short），对于2个到6个维度的6种数据类型的任何组合都是有效的。\n习题8：\n下面试图使用多行脚注，但预期效果不对，如何解决？\n\n右边是对我^1的解释。\n这是第二行。\n习题9：\n试着插入一个图片，要求图片缩小1&#x2F;2，左对齐。\n\n习题10：\n下面有两个相邻的表格，如何在二者之间增加内容？\n\n\n\n\n表1头\n表1头\n\n\n\n表1内容\n表1内容\n\n\n\n\n\n表2头\n表2头\n\n\n\n表2内容\n表2内容\n\n\n我是一段很长的代码\n\n我是另一段很长的代码\n\n","categories":["日常随笔"],"tags":["博客"]},{"title":"【待】画一个可爱的三只小鸟button","url":"/2023/01/26/%E7%94%BB%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%88%B1%E7%9A%84%E4%B8%89%E5%8F%AA%E5%B0%8F%E9%B8%9Fbutton/","content":"前言：去武汉伢转了几天，以及见了从深圳回来的表哥，有点儿唏嘘嘿。上午摸鱼刷知乎的时候发现了知乎一个大佬使用纯html和css画了一个带动态特效的三只小鸟的button按钮，太可爱啦！原帖地址：https://zhuanlan.zhihu.com/p/584747362\n\n\n\n\n实现效果：\n \n\n代码部分：\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;https://www.baidu.com&quot; class=&quot;button button--bird&quot;&gt;        &lt;div class=&quot;button__wrapper&quot;&gt;            &lt;span class=&quot;button__text&quot;&gt;ENTRY&lt;/span&gt;        &lt;/div&gt;        &lt;div class=&quot;birdBox&quot;&gt;            &lt;div class=&quot;bird wakeup&quot;&gt;                &lt;div class=&quot;bird__face&quot;&gt;&lt;/div&gt;            &lt;/div&gt;            &lt;div class=&quot;bird wakeup&quot;&gt;                &lt;div class=&quot;bird__face&quot;&gt;&lt;/div&gt;            &lt;/div&gt;            &lt;div class=&quot;bird&quot;&gt;                &lt;div class=&quot;bird__face&quot;&gt;&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;style&gt;        body &#123;            padding: 100px;        &#125;        .button--bird&#123;            --main_color: #f4cf47;            --sub_color1: #f4e19c;            --sub_color2: #ff8108;            --base_color: #000;            --border_radius1: 60px 60px 40px 40px / 48px 48px 30px 30px;            --border_radius2: 70px 70px 40px 40px / 48px 48px 30px 30px;            --border_radius3: 40px 40px 40px 40px / 48px 48px 30px 30px;        &#125;        .button &#123;            display: flex;            justify-content: center;            align-items: center;            box-sizing: border-box;            width: 280px;            height: 80px;            text-decoration: none;            border: solid 3px #000;            border-radius: 40px;            background: var(--main_color);            position: relative;        &#125;        .button__wrapper&#123;            display: flex;            justify-content: center;            align-items: center;            width: 100%;            height: 100%;            border-radius: 40px;            overflow: hidden;            position: relative;        &#125;        .button__text&#123;            position: relative;            font-size: 32px;            letter-spacing: 4px;            color: var(--base_color);            transition: all .3s ease;        &#125;        .button::before&#123;            content: &#x27;&#x27;;            position: absolute;            right: 20px;            margin: auto 0;            width: 24px;            height: 24px;            background: var(--base_color);             clip-path: path(&#x27;M24,12.02c0-1.09-.75-1.71-.81-1.77L11.17,.45c-.91-.74-2.21-.56-2.91,.42-.69,.97-.52,2.37,.39,3.11l7.12,5.81-13.7-.02h0C.93,9.77,0,10.76,0,11.99c0,1.23,.93,2.22,2.07,2.22l13.7,.02-7.13,5.78c-.91,.74-1.09,2.13-.4,3.11,.41,.58,1.03,.88,1.65,.88,.44,0,.88-.15,1.25-.45l12.04-9.76c.07-.06,.82-.67,.82-1.77Z&#x27;);            transition: all ease .2s;        &#125;        .button--bird .button__wrapper::before,        .button--bird .button__wrapper::after&#123;            content: &#x27;&#x27;;            position: absolute;            bottom: 0;            width: 130px;            height: 38px;            background: var(--sub_color1);            transition: all .5s ease;            clip-path: path(&#x27;M13.77,37.35L.25,16.6c-.87-1.33,.69-2.91,2-2.02l12.67,8.59c.81,.55,1.91,.14,2.18-.81l2.62-9.33c.39-1.4,2.34-1.42,2.76-.02l3.6,11.99c.33,1.11,1.74,1.4,2.47,.52L49.38,.52c.87-1.04,2.53-.42,2.53,.95V23.7c0,1.13,1.2,1.83,2.16,1.26l12.75-7.51c.85-.5,1.94,0,2.13,.98l1.5,7.6c.2,1.03,1.37,1.51,2.22,.92l17.74-12.3c1.09-.75,2.52,.25,2.21,1.55l-2.44,10.2c-.26,1.09,.74,2.06,1.8,1.75l30.8-9.04c1.37-.4,2.42,1.26,1.49,2.36l-9.07,10.66c-.83,.98-.1,2.49,1.17,2.42l12.12-.68c1.6-.09,2.12,2.15,.65,2.8l-2.73,1.21c-.18,.08-.38,.12-.58,.12H14.97c-.48,0-.93-.25-1.2-.65Z&#x27;);        &#125;        .button--bird .button__wrapper::before&#123;            left: 0;        &#125;        .button--bird .button__wrapper::after&#123;            right: 0;            transform: rotateY(180deg);        &#125;        .button:hover .button__wrapper::before&#123;            transform: translateX(-12px);        &#125;        .button:hover .button__wrapper::after&#123;            transform: rotateY(180deg) translateX(-12px);        &#125;        .button:hover .button__text&#123;            letter-spacing: 6px;        &#125;        .button:hover::before&#123;            right: 14px;        &#125;                .birdBox&#123;            position: absolute;            top: -54px;            display: flex;            justify-content:space-between;            align-items: flex-end;            width: 180px;            height: 56px;        &#125;        .bird&#123;            position: relative;            width: 56px;            height: 36px;            box-sizing: border-box;            border: solid 3px #000;            background: var(--main_color);            border-radius: var(--border_radius1);            animation: sleep 1s ease infinite alternate;            display: flex;            justify-content: center;        &#125;        .bird__face&#123;            position: absolute;            top: 15px;            width: 12px;            height: 6px;            background: var(--sub_color2);            border-radius: 50% 50% 50% 50% / 78% 78% 22% 22%;            transition: .2s;        &#125;        .bird__face::before,        .bird__face::after&#123;            content: &#x27;&#x27;;            position: absolute;            top: -4px;            width: 8px;            height: 2px;            border-radius: 4px;            background: #000;        &#125;        .bird__face::before&#123;            left: -5px;        &#125;        .bird__face::after&#123;            right: -5px;        &#125;        .bird::before&#123;            content: &#x27;&#x27;;            position: absolute;            top: -12px;            left: 22px;            width: 12px;            height: 12px;            background: #000;            clip-path: path(&#x27;M10.23,3.32c-3.54,.63-5.72,2.51-7.02,4.23-.33-1.58-.34-3.54,.93-5.12,.52-.65,.41-1.59-.24-2.11C3.24-.19,2.29-.08,1.77,.57c-3.82,4.77-.31,11.11-.13,11.42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0-.01-.02,2.49,.04,2.52,0,.1-.14,1.54-4.82,6.59-5.71,.82-.14,1.37-.92,1.22-1.74s-.94-1.36-1.75-1.21Z&#x27;);        &#125;        .button:hover .wakeup&#123;            animation: wakeup .2s ease;            animation-fill-mode: forwards;        &#125;        .button:hover .wakeup .bird__face&#123;            top: 20px;        &#125;        .button:hover .wakeup .bird__face::before,        .button:hover .wakeup .bird__face::after&#123;            animation: eye 5s linear infinite;        &#125;        .button:hover .wakeup:nth-child(2) .bird__face::before,        .button:hover .wakeup:nth-child(2) .bird__face::after&#123;            animation: eye_2 5s linear infinite;        &#125;                @keyframes wakeup&#123;            0%  &#123;                height: 32px;                border-radius: var(--border_radius2);            &#125;            100%&#123;                height: 56px;                border-radius: var(--border_radius3);            &#125;        &#125;        @keyframes eye &#123;            0%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            30%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            32%&#123;                top: -4px;                width: 8px;                height: 2px;            &#125;            34%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            70%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            72%&#123;                top: -4px;                width: 8px;                height: 2px;            &#125;            74%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            76%&#123;                top: -4px;                width: 8px;                height: 2px;            &#125;            78%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            100%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;        &#125;        @keyframes eye_2 &#123;            0%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            10%&#123;                transform: translateX(0);            &#125;            12%&#123;                transform: translateX(3px);            &#125;            20%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            22%&#123;                top: -4px;                width: 8px;                height: 2px;            &#125;            24%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            25%&#123;                transform: translateX(3px);            &#125;            27%&#123;                transform: translateX(0);            &#125;            74%&#123;                top: -6px;                width: 6px;                height: 6px;                transform: translateX(0);            &#125;            76%&#123;                top: -4px;                width: 8px;                height: 2px;                transform: translateX(3px);            &#125;            78%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            80%&#123;                top: -4px;                width: 8px;                height: 2px;            &#125;            82%&#123;                top: -6px;                width: 6px;                height: 6px;            &#125;            85%&#123;                transform: translateX(3px);            &#125;            87%&#123;                transform: translateX(0);            &#125;            100%&#123;                top: -6px;                width: 6px;                height: 6px;                transform: translateX(0);            &#125;                    &#125;        @keyframes sleep&#123;            0%  &#123;                height: 36px;                border-radius: var(--border_radius1);            &#125;            100%&#123;                height: 32px;                border-radius: var(--border_radius2);            &#125;        &#125;    &lt;/style&gt;&lt;/body&gt;&lt;/html&gt;\n\n","categories":["编程相关"],"tags":["前端"]},{"title":"输入网址按下回车后浏览器会发生什么？","url":"/2023/01/20/%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E6%8C%89%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/","content":"前言：首先使用开发者工具中的网络可以看到几个不同颜色的阶段：\n\n开头瞬间：初始链接阶段  即TCP三次握手阶段\n紫色部分（htpps协议时）：SSL（Secure Sockets Layer）加密阶段     &#x2F;&#x2F;Q：emm..话说b站怎么也没见到有？\n绿色部分：服务器准备阶段\n蓝色部分：资源下载阶段\n一、浏览器与网站建立连接要建立连接，得先找到网站的服务器，即DNS先把域名解析到服务器，寻求域名解析的索引顺序：\n本地缓存（hosts）→ 路由器电信服务器的DNS服务 → 网站域名服务商的DNS服务\n接着按照不同的协议进行不同的会话过程：\nHTTP协议：是客户端和服务器请求的应答标准（TCP），未加密。采用80端口。\nHTTPS协议：服务器持有密钥，客户端持有公钥，规定了加密方式，且每次都有协商时间。使用了SSL+TCP，访问慢于http。采用443端口。\n\n三次握手运用到网站中即\n\n\nSYN为数据包标识，seq为序列号，listen为侦听端口，ACK为确认码\n\n同样的，建立TCP连接时需要三次握手，终止时需要四次挥手：\n\n运用到网站中即\n\n\nQ：HTTPS数据传输的详细流程？\nA：浏览器访问网站服务器建立SSL连接→服务器返回一份包含公钥的证书信息给浏览器→浏览器协商SSL连接的安全等级并建立会话密钥→浏览器利用公钥将会话密钥加密传到网站服务器→服务器利用自己的私钥解密出会话密钥→服务器再用会话密钥加密通信过程\nA：此过程包含了一对非对称的公钥私钥，以及一对对称的会话密钥。\n\n\n二、从网站下载资源到本地网页不论是http还是https，只要建立连接之后就可以下载网站资源呈现到网页了，但也会有失败的几种情况，可根据不同的状态码查看失败原因。\n在开发者模式中的网络选项下，选择网站就可以看到状态码：\n200-299:一切正常300-399：重定向      //301是永久重定向 302临时重定向 304带参数的重定向400-499：我的错      //经典404代表网站输入错误500-599：网站的错    //经典502代表网站服务器错误\n\n三、总结输入一个网址按下回车依次发生如下五个部分的内容，其中需要重点掌握的原理为第二三部分：\nStep1、DNS解析域名对应的ip\nStep2、三次握手进入初始化链接阶段\nStep3、进入SSL加密协议握手\nStep4、链接成功 服务器准备内容\nStep5、浏览器下载并呈现内容\n\n\n2023年1月20日01:46:27  妈呀，晚上写博客真是个上头且费肝的事儿，明天一定一定一定12点半前睡觉，呼！\n","categories":["网络相关"],"tags":["网络"]},{"title":"提高网站访问速度的方法","url":"/2023/01/19/%E6%8F%90%E9%AB%98%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E7%9A%84%E6%96%B9%E6%B3%95/","content":"前言：刷到了鱼皮的关于CDN的科普视频，就一并在网上查了一下提高网站访问速度方法，当然很多其实也看不太懂，就先把搞懂原理的几个记下来，日后再补充。本文大部分内容来自：前端页面性能优化 - 简书 (jianshu.com)。\n\n\n\n\n一、更换到国内的服务器\n二、将网站中的图片资源更改为webp：\n无损压缩比可达比png格式达到28%\n三、仍然使用jpg&#x2F;png格式：\n不追求图片质量的话反复压缩，实测可达到比webp格式更小的规格。网站使用图片是选择PNG、JPG 还是 SVG？ - 知乎 (zhihu.com)\n四、将网站挂到CDN上：\nCND即Content Delivery Network，可将内容提前分发到全国各地的站点上，根据用户访问地实时选择最近的访问节点。类似于京东仓库的模式。需要注意的是，CDN一般用来存储静态资源。\n五、合并CSS和JS文件：\n每引入一个文件就会进行一次http请求，尽可能的减少文件的引入，减少http请求的次数。当然，也要视情况而定。\n六、CSS资源放顶部 JS资源放底部：\n先完成页面渲染的同时，防止JS阻塞页面渲染以及DOM。\n","categories":["网络相关"],"tags":["博客","网站"]},{"title":"HTML CSS复习","url":"/2023/01/17/HTML%20CSS%E5%A4%8D%E4%B9%A0/","content":"前言：找到了躺床上看电脑的舒舒服服的姿势，瞬间又有学习的欲望了诶嘿！先花一天把html和css复习一下。\n一、HTML 部分1.排版标签这是一级标题\n\n这是二级标题\n\n这是一段p标签\n\n这是使用align（排列）属性靠右排列的p标签\n\n\n\n下方是横线和换行：\n\n\n\n\n 这是一段结尾带换行符的div区域\n\n这是一段结尾不带换行符的span区域\n这是一段居中的center区域这是一段居中的center区域这是一段居中的center区域这是一段居中的center区域这是一段居中的center区域这是一段居中的center区域(h5中已放弃)\n\n\n\n\n这是一个不忽略任何    空格和空行的pre标签\n\n2.字体标签和超链接\n这是p段落中的一个&lt;号\n\n这是p段落中的一个&gt;号\n\n这是下划线标记\n这是中划线（删除线）标记\n这是斜体标记\n这是b标签粗体标记   这是strong标签粗体标记(已放弃)\n这是h5中已放弃的font标签\n底部文字这是上标签sup\n底部文字这是下标签sub \n下方是size为50的绿色hr标签：\n \n\n①外部链接\n这是一个跳转到百度的a标签\n这是一个跳转到本地02页面的标签\n②锚链接(需要先给a标签添加name锚点)\n点击跳转到之前name属性为top_pos的a标签\n点击跳转至b网页中123的锚点\nHTML4.0之前使用name，之后使用id，可直接替换。\n\n这是tittle的作用-请我吃饭\n3.图片标签相对路径写法：相对于当前页面所在的目录，.为当前目录，..为上一目录。src相对路径可以存在多个..。\n当前目录中的2.jpg图片：\n&lt;img src=&quot;2.jpg&quot;&gt; \n&lt;img src=&quot;./2.jpg&quot;&gt;\n上一目录中的2.jpg图片：\n&lt;img src=&quot;../2.jpg&quot;&gt;\n绝对路径写法：\n1.以盘符开始的绝对路径\n2.以http&#x2F;https开头的网络路径\n\n疑问：在hexo博客中使用html语法时，需要用src&#x3D;”&#x2F;..&#x2F;2.jpg”的写法，前边多加了一个&#x2F;才能在博客中正常显示？\n\n\n\nimg的属性有：\nwidth height tittle algin\nalt:图片无法显示时候代替的文字内容\nalign:图片和周围文字的相对位置\n\n\n\n\n这是一个align为bottom(默认)的图片展示效果\n\n\n\n\n这是一个align为center的图片展示效果\n\n\n这是一个align为right的图片展示效果\n\n\n\n\n若要保证图片等比缩放，width和height只设置一个：\n\n\n4.列表、表格与表单及框架标签1.列表我是无序列表ul中的每一项li我是无序列表ul中的每一项li我是无序列表ul中的每一项li\n\n我是ul的type属性为square时的样子\n\n我是ul的type属性为circle时的样子\n\n我是无序列表ul中的每一项li我也可以被单独设置type属性我是无序列表ul中的每一项li\n\n列表之间相互嵌套：\n\n    河南省\n        \n            许昌市\n            郑州市\n            平顶山市\n        \n    \n    广东省\n        \n            深圳市\n            广州市\n            惠州市\n        \n    \n\n\nul→两个li→分别各包括一个ul→每个ul包括三个li\n注意：li为容器级标签，里边什么都能放，如购物网站搜索结果列表。\n\n\n我是有序列表ol中的每一项li我是有序列表ol中的每一项li我是有序列表ol中的每一项li\n\n我是ol的type属性为a的样子我是ol的type属性为a的样子\n\n我是ol的type属性为I，start属性为3的样子我是ol的type属性为a的样子\n\n其实不如用ul然后手动给打上序号。\n\n\n定义列表：\n\n\n        我是第一条dt\n        dd和dt的规则非常灵活\n        下边可以搭配多条dd\n        我是第二条dt\n        啦啦啦啦啦啦啦\n\n\n注意：dt必须有，dd可以没有。两者均为容器级标签，什么都可以放。\n\n\n2.表格表格标签由行标签组成，行标签又由单元格标签组成。\n三者分别对应：&lt;table&gt; &lt;tr&gt; &lt;td&gt;\n\n\n我是第一行第一个单元格\n我是第一行第二个单元格\n\n\n我是第二行第一个单元格\n我是第二行第二个单元格\n\n\n\n\n&lt;table&gt;对应的属性(注意是对整个表格而言）：\nwidth height border  &#x2F;&#x2F;表格的宽、高和边框大小\nstyle &#x2F;&#x2F;单元格线和表格线的样式\ncellpadding &#x2F;&#x2F;单元格内容到边线的距离 默认为0\ndir &#x2F;&#x2F;单元格内容排列方式 默认从左到右（ltr） 则此时cellpading为到左边线的距离\ncellspacing &#x2F;&#x2F;单元格和单元格之间的距离\n以及aligin、bgcolor、background、boderclolorlight、bodercolordark。\n&lt;tr&gt;对应属性:\ndir bgcolor height align\nvalign(垂直显示方式 包括top middle bottom)\n&lt;td&gt;对应属性:\nalign valign width height bgcolor background\n单元格合并和标题: colspan rowspan caption\n\n    \n        1-1\n        1-2\n        1-3\n        1-4\n    \n    \n        2-1\n        2-2\n        我是colspan值为2的内容\n    \n\n\n\n\n    我是table表格的capation标题\n    \n        1-1使用th\n        1-2使用td\n        1-3使用td\n        我是rowspan值为2的内容\n    \n    \n        2-1\n        2-2\n        2-3\n    \n\n\n\n\n\n&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;三个标签作为tr的外标签，作为顺序标记显示。以及对数据边获取边显示，加快表格读取速度。\n\n\nQ：标题没居中？\n\n\n\n3.表单表单标签（form）：\n属性包括name，id，action，method。action用来规定表单提交到哪里，method规定表单数据提交方式（有get和post）\nform标签下有input，select，textarea，label等标签。\n&lt;input&gt;标签：\n同时有表单（form）和表格（table）时，table嵌套在form中使用。\n\n姓名-text文本框：\n简介-value默认填充：\n密码-password密码框：\n性别-radio单选框：男\n                女（chekecd=\"\"默认勾选状态）\n爱好-checkbox复选框：跑步\n                   篮球\n                   羽毛球\n老板名-readonly改不掉的文本框：\n老板名-disabled点不进去的文本框：\n上传文件-file类型\n清空该表单表单-reset类型\n提交该表单-submit类型\n带背景图的提交按钮-image类型\n普普通通的button按钮-value自定义设置\n我是hidden 隐藏框\n\n\n\n&lt;select&gt;标签：\n\n    \n        美女\n        帅哥\n        不是美女也不是帅哥\n    \n    \n    \n        美女\n        帅哥\n        不是美女也不是帅哥\n    \n    \n    \n        是美女\n        是帅哥\n        既是美女也是帅哥\n    \n    \n\n\n\n\n&lt;textarea&gt;标签：\n\n    这是一个行长row为3列宽cols为20的textarea文本区域这是一个行长row为3列宽cols为20的textarea文本区域这是一个行长row为3列宽cols为20的textarea文本区域\n    这是一个行长row为3列宽cols为20的textarea只读文本区域这是一个行长row为3列宽cols为20的textarea只读文本区域这是一个行长row为3列宽cols为20的textarea只读文本区域\n\n\n\n\n&lt;label&gt;标签：\n作用：将input和汉字包裹起来作为整体，使选择框前的字段也变为可选项。\n方法：将label的for属性值和id属性值相同即可绑定。\n\n    男性\n    \n    \n    女性\n    \n\n另一种写法：将for属性值为空，包括字段和input在内的全部放入label标签下。\n\n\n    \n        姓名:\n    \n\n\n\n\n&lt;fieldset&gt;标签：\n\n  \n    健康信息\n    身高：\n    体重：\n  \n  \n    身份信息\n    年龄：\n    姓名：\n  \n\n\n\n\n4.框架框架标签：在一个网页中显示多个页面。\n使用frameset和frame标签，现已废除。使用iframe替代。效果图如：\n\n\n\n\n\n内嵌标签：嵌入在一个页面上的框架。\n使用&lt;iframe&gt;，是&lt;body&gt;的子标签。\n\ntarget&#x3D;”framename“时：在指定的框架中打开被链接的文档。\n如在不同目录跳转时，全设置成相同的framename，第一个被打开的链接在新窗口打开，并标记为framename，之后点开的均在此窗口跳转。\n\n&lt;body&gt;\t&lt;a href=&quot;文字页面1.html&quot; target=&quot;123&quot;&gt;&lt;/a&gt;点击进入食品部分&lt;br/ &gt;\t&lt;a href=&quot;文字页面2.html&quot; target=&quot;123&quot;&gt;&lt;/a&gt;点击进入家电部分&lt;br/ &gt;\t&lt;a href=&quot;文字页面3.html&quot; target=&quot;123&quot;&gt;&lt;/a&gt;点击进入服饰部分&lt;br/ &gt;&lt;/body&gt;\n\n\n这是一个iframe标签效果：\n\n    \n\n\n5.多媒体相关标签这是bgsound标签（播放音频）：\n&lt;bgsound src=&quot;王菲 - 清风徐来.mp3&quot;&gt;&lt;/bgsound&gt;    \n这是embed标签（播放音频视频等）：\n\n\n\n&lt;object&gt;标签：播放多媒体文件，应用于IE浏览器。\n&lt;marquee&gt;标签：内容在网页自动移动，类似弹幕和歌词效果。\n6.HTML5新增内容标准h5布局：\n&lt;!-- 头部 --&gt;&lt;header&gt;    &lt;ul class=&quot;nav&quot;&gt;&lt;/ul&gt;&lt;/header&gt;&lt;!-- 主体部分 --&gt;&lt;div class=&quot;main&quot;&gt;    &lt;!-- 文章 --&gt;    &lt;article&gt;&lt;/article&gt;    &lt;!-- 侧边栏 --&gt;    &lt;aside&gt;&lt;/aside&gt;&lt;/div&gt;&lt;!-- 底部 --&gt;&lt;footer&gt;&lt;/footer&gt;\n\n\n\nform新增表单部分：\ninput属性值新增：&lt;email&gt; &lt;tel&gt; &lt;url&gt; &lt;number&gt; &lt;search&gt; &lt;range&gt; &lt;color&gt; &lt;time&gt; &lt;date&gt; &lt;datetime&gt; &lt;month&gt; &lt;week&gt; \nsearch搜索框\nrange滑动条\ncolor拾色器\nform表单属性新增：\n1.datalist可填充可选择数据列表\n\n    \n    \n    本科\n    研究生\n    不明\n\n\n\n2.&lt;keygen&gt;元素在提交表单时生成公钥和私钥，进行非对称加密验证。\n3.&lt;meter&gt;度量器\n&lt;meter  value=&quot;81&quot;    min=&quot;0&quot; max=&quot;100&quot;  low=&quot;60&quot;  high=&quot;80&quot;/&gt; \t //当前值81，最大值最小值，超过范围的警告值\n\n\n\n音频&lt;audio&gt;\n\n视频&lt;vedio&gt;\n\n\n\nDOM操作：\n7.小结\n少用br换行 多用p\n标准div+css界面常用标签种类：div  p  h1  span   a   img   ul   ol    dl    input\n\n二、CSS部分1.样式属性div&#123;\t字体基础\tfont-size: 50px; \t\t\t/*字体大小*/\tline-height: 30px;      \t/*行高*/\tfont-family: 幼圆,黑体;    \t/*字体类型：如果没有幼圆就显示黑体，没有黑体就显示默认*/\tfont-style: italic ;\t\t/*italic表示斜体，normal表示不倾斜*/\tfont-weight: bold;\t\t\t/*粗体*/\tfont-variant: small-caps;  /*小写变大写*/\t\t字体进阶\tletter-spacing: 0.5cm ; 单个字母之间的间距\tword-spacing: 1cm; 单词之间的间距\ttext-decoration: none; 字体修饰：none 去掉下划线、underline 下划线、line-through 中划线、overline 上划线\tcolor:red; 字体颜色\ttext-align: center; 在当前容器中的对齐方式。属性值可以是：left、right、center（在当前容器的中间）、justify\ttext-transform: lowercase; 单词的字体大小写。属性值可以是：uppercase（单词大写）、lowercase（单词小写）capitalize（每个单词的首字母大写）\t\t列表样式\tlist-style-image:url()    列表项样式，需要加左margin才能使图标显示完整\t\t背景图片\tbackground-color: red; 设置元素的背景颜色。\tbackground-image:url(images/2.gif); 将图像设置为背景。\tbackground-repeat: no-repeat; 设置背景图片是否重复及如何重复，默认平铺满。（重要）\tbackground-position:10px 10px;     向右偏移量，向下偏移量，可正可负。\tbackground-position: center top;   图片左右位置，图片上下位置。\tbackground-attachment:scroll; 设置背景图片可以被滚走。默认值。\tbackground-attachment:fixed; 设置背景图片不可以被滚走。\tbackground-size: 100% auto;  相对于容器高100%，宽度自动。此属性还有cover及contain属性值。\tbackground-origin 属性：控制背景从什么地方开始显示。默认为padding-box。\t\t图片滤镜\tfilter:gray()    给图片加上灰色滤镜&#125;\n\n拓展：CSS｜自定义字体，让页面看起来更加舒服一些 - 掘金 (juejin.cn)\n\n2.布局属性vertical-align：middle：指定行内元素，行块元素，表格单元格元素垂直对齐方式\noverflow:auto：超出范围的内容自动显示滚动条，不超出不显示\n3.动画属性\ntransition-property: all; 如果希望所有的属性都发生过渡，就使用all，如图。\n\n\ntransition-property: width;  如图，鼠标悬浮上的时候宽度变化，且只在宽度变化时候才有对宽度的过渡效果。\n\n\ntransition-duration: 1s; 过渡的持续时间。\n\ntransition-timing-function: linear; 运动曲线。属性值可以是：\n\nlinear 线性\nease 减速\nease-in 加速\nease-out 减速\nease-in-out 先加速后减速\n\n\ntransition-delay: 1s; 过渡延迟。多长时间后再执行这个过渡动画。\n\n\ntransform：实现元素的位移、旋转、变形、缩放，甚至支持矩阵方式\ntransform: scale(x, y);transform: scale(2, 0.5);//scale缩放  2：表示水平方向的缩放倍数。0.5：表示垂直方向的缩放倍数transform: translate(水平位移, 垂直位移);transform: translate(-50%, -50%);//translate位移 向左和向上对于自身移动移动50%transform: rotate(角度);transform: rotate(45deg);//rotate旋转 正值顺时针；负值逆时针。\n\n利用rotate实现扑克牌发牌，cool！\n\ntransform: rotateX(360deg);    //绕 X 轴旋转360度transform: rotateY(360deg);    //绕 Y 轴旋转360度transform: rotateZ(360deg);    //绕 Z 轴旋转360度\n\n\ntransform: translateX(100px);    //沿着 X 轴移动transform: translateY(360px);    //沿着 Y 轴移动transform: translateZ(360px);    //沿着 Z 轴移动\n\n\n\n7.小结\ncss中必须写单位，html中可写可不写（单位只有px）\n设置line-height值等于盒子高即可使单行文本垂直居中\n设置banner图时设置position为center和top，以及no-repeat，不需要设置宽度。\n设置img标签和ul标签在同一行显示：display全设为inline，并给li标签加上float\n\n","categories":["编程相关"],"tags":["前端"]},{"title":"由路由器开始的网络常识学习","url":"/2023/01/11/%E7%94%B1%E8%B7%AF%E7%94%B1%E5%99%A8%E5%BC%80%E5%A7%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%AF%86%E5%AD%A6%E4%B9%A0/","content":"前言：由于要和学弟学妹们分享网络基础的内容了，故将暑期的一篇博文整理并完善。\n一、路由器 光猫 wifi三者的关系：\n通俗来说，光猫把光纤中的光信号转换成电信号，传到路由器，路由器再把电信号转换成电磁信号形式覆盖到空间，又称WiFi。\n需要注意的是，有些光猫也能提供路由器的功能，但效果大都不尽人意。\n\n\n在WiFi或者说路由器未普及之前，大概是小学那回儿，依稀记得家里只有一个猫单连电脑，也依稀记得家里第一次装上路由器从此有WiFi时的兴奋。（猛然惊觉猫这个称呼原来是上学期学到的英语单词 modem-调制解质器 的音译）\n\nWIFI：如今的手机和电脑大都支持了5G网络（使用5Ghz频段），相比4G（2.4Ghz频段），最深刻的感触就是速度变快了，但是有一些运营商号称5G的wifi下载速度感知并不明显，其实很大可能是因为路由器的设置中启用了混合频段，建议大家都在路由器后台把双频段合一给关掉，防止网络不稳定。\n\n！！！注意：5G频段比4G频段速度更快，但信号穿透性更差，下图就是我卧室里的两个不同频段的wifi信号强度！！！\n\n硬路由：硬件组合起来实现路由的功能，如路由器。\n软路由：是台式机或服务器配合软件形成路由解决方案，主要靠软件的设置，达成路由器的功能。如手机开热点，台式机插入随身wifi。\n在一个路由环境下，也就是处于同一个局域网内，公网ip是相同的（在百度上搜出来的ip）\n之前大多数是将光猫和路由器放在同一个位置使用，方便连接光猫和路由器，但却造成了繁杂的排线，以及路由器的位置也会收到限制。但如今的大多新房子里会预留多媒体箱，里边专门用来放光猫，然后通过墙体里隐藏的排线直接接到路由器或者设备直接使用。\n\n\nLAN口（Local Area Network ）和WAN口（Wide Area Network）：\n光猫或路由器提供的网络就属于本地局域网，如果设备的接口上标注着“LAN”，代表该接口是下行网络，是用来连接终端设备或次一级网络的接口，如果说WAN是连接外网的接口，那么LAN就是连接本地局域网的接口。\n\n二、IP  DNS 子网掩码 网段 网关IP地址（Internet Protocol Address）：\n\nIPV4（Internet Protocol version 4）：\n网络号+主机号构成 。原本是四个八位的二进制数，也就是总共三十二个（2的四次方，即ipv4中4的由来）二进制数组成，为了简化将其以十进制的形式表示，中间用小数点隔开。\n一个字节即为1Byte，1Byte包含八个比特（Bit），在二进制的计算机中每个比特位只能用0或1表示。\n\nipv6类似，但只不过是将2的6次方个二进制数字用十六进制表示了。\n关于ipv6的作用和发展，b站有一个很有趣且通俗的科普视频：https://www.bilibili.com/video/BV1i14y157YV\nDNS（Domain Name System）：\n域名解析系统，将ip解析成对应的域名。如访问百度时候输入www.baidu.com，实际上就是访问了百度服务器所在的ip，而将这个域名解析到ip用到的就是dns。\n子网掩码：\n用来判断ipv4中哪些是网络号，哪些是主机号。对应ipv4上该位是网络号时为1，主机号时候为0。\n最常见的ipv4如192.168.1.1，对应的子网掩码如255.255.255.0，其转换成二进制数后前24位都是1，后8位是0，则前24位（也就是255.255.255）对应的ipv4 的前24位（192.168.1）是主机号。网络号用于标示不同的网段,主机号用于识别目标网段内的不同主机，如此便可快速划分子网，节省ip。\nMAC(Media Access Control Address):\t\nMAC地址用于在网络中唯一标示一个网卡，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。\n因此一台设备可能存在多个网卡，在dhcp握手中仅凭mac地址不能完全确定对应的设备，还存在一个Transaction ID来辅助确认。\nMAC地址又叫做网络连接信息的物理地址，大都为16进制的数。\n\n\n​\tIP 地址是基于逻辑的，比较灵活，不受硬件的限制，也容易记忆。而 MAC地址在一定程度上与硬件一致，是基于物理的能够标识具体的网络节点。这两种地址各有优点，使用时也因条件不同而采取不同的地址 [6]​\t大多数接入Internet的方式是把主机通过局域网组织在一起，然后再通过交换机或路由器等设备和 nternet 相连接。这样一来就出现了如何区分具体用户，防止 P地址被盗用的问题。由于IP地址只是逻辑上的标识，任何人都能随意修改，因此不能用来具体标识一个用户。而MAC地址则不然，它是固化在网卡里面的。从理论上讲，除非盗来硬件即网卡，否则一般是不能被冒名顶替的。基于 MAC 地址的这种特点，因此局域网采用了用MAC地址来标识具体用户的方法。\n\n题外话：使用无线路由器的“克隆MAC地址”解决路由器显示已连接，但是上不去网的问题\n网关：\n即软件层面的路由器。\n若IP在同一网段（网络号相同的即成为同一网段），可以实现直接通讯，不需要用到网关，否则需要。我们常说的局域网一般就是指的是在同一网段内的ip。\n\n私网和公网：\n常见三类的私有地址（内部局域网可以使用的）\nA级：10.0.0.0 - 10.255.255.255\nB级：172.16.0.0 - 172.31.255.255\nC级：192.168.0.0 - 192.168.255.255\n公有地址：\n在百度上搜到的ip即为自己的公网ip\n#常见命令：nslookup +网址           \t\t#获取iptracert+网址/tracert -d+ip　　#查看本机与该ip通信需要进过那个哪个网关,即查询从本机到光猫所要经过的路由器的IP地址\n\n\n\n三、端口 宽带拨号 NAT转换端口：\n帮助计算机识别数据包是属于那个软件或进程\n网页中常见的端口为80和443\n拨号：\n宽带拨号分为静态拨号和动态拨号两种，动态拨号又分为PPPOE和DHCP拨号\nDHCP服务：\n自动给电脑分配ip和子网掩码，避免了手动设置ip时造成局域网内的ip的冲突，分配有的ip有时间限制，到期会自动重亲分配，若原ip没被占用会继续分配到原ip。\n由于这个原因，电脑的ip并不是一成不变的，因此使用ip连接打印机或其他设备时，有时需要经常重新连接。\n用ipconfig&#x2F;all命令可查看。\n\nNAT转换（Network Address Port Translation）：\n路由的NAT转换可以将多个设备用一个公网ip访问互联网，节约了ip。\n\n\n四、解决wifi信号差—路由组网方法一：将主路由器的lan口和副路由器的wan口相连，然后在副路由器的后台设置成动态ip，或打开DHCP服务。\n\n但是每个路由器都会有一个wifi，即使设置成相同的名称也无法变成一个wifi网络，需要在两个wifi间来回切换。\n方法二：mesh组网\n\n只需要购买相同品牌的多台路由器（需要支持mesh），即可使用傻瓜式操作，也不需要再连网线即可。\n五、网络分层模型1、模型总览网络分层模型包括三种以不同的标准形成的分法儿，具体的关系如图所示：\n\nOSI七层模型从上到下（第一层到第七层）依次是：\n\n应用层：协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP。如访问网址时使用的http或者https加密协议。 \n表示层：数据的表示、安全、压缩。格式有，JPEG、ASCll、DECOIC、加密格式等。如gzip压缩。较为理论。\n会话层：建立、管理、终止会话。对应主机进程，指本地主机与远程主机正在进行的会话。如SSL连接。较为理论。\n传输层：定义传输数据的协议端口号，以及流控和差错校验。协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层。如TCP协议。\n网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP。如常见的ipv4和ipv6。\n数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。如mac地址就属于链路协议层的存在。\n物理层：建立、维护、断开物理连接。如插上一根网线的电脑。\n\n\n\n\n\n2、各种协议UDP（User Datagram Protocol）：为无连接协议，给应用程序发数据包实现功能并在所需层次构建协议。不需要验证和连接即可单方面发送数据，并不检测数据接收方是否成功接收数据，因此网络情况不好时可能丢包严重。常见应用如视频网站。\nTCP（Transmission Control Protocol）：TCP为连接协议，并且是基于双向验证的可靠的协议，需要“三次握手四次挥手”。数据发送方需要得到接收方的回应后才继续发送数据的操作，因此数据传输速度慢于UDP。常见于互联网的各个应用，应用面远高于UDP。\nDHCP（Dynamic Host Configuration Protocol）：\n3、应用\n\n\n应用层协议\n应用\n传输层协议\n\n\n\nSMTP\n电子邮件\nTCP\n\n\nTELNET\n远程终端接入\nTCP\n\n\nHTTP\n万维网\nTCP\n\n\nFTP\n文件传输\nTCP\n\n\nDNS\n域名转换\nUDP\n\n\nTFTP\n文件传输\nUDP\n\n\nSNMP\n网络管理\nUDP\n\n\nNFS\n远程文件服务器\nUDP\n\n\n此贴未完待续，持续更新\n","categories":["网络相关"],"tags":["网络"]},{"title":"解决使用iso装Windows时出现MBR分区无法安装","url":"/2022/12/29/%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8iso%E8%A3%85Windows%E6%97%B6%E5%87%BA%E7%8E%B0MBR%E5%88%86%E5%8C%BA%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85/","content":"前言：被学弟问到这个问题了，算是新手初使用iso装机时候常常会遇到的一个问题，一个很快速更改磁盘类型的方案。\n\n一、原因开机引导的方式 与 存储数据的结构 存在对应关系Legacy引导  →  MBR分区UEFI引导      →  GPT分区\n二、解决办法shift + f10 / shift + fn + f10进入命令行后\n依次输入diskpart -&gt; list disk -&gt; select disk +“磁盘序号” -&gt; clean -&gt; convert gpt改变磁盘的分区格式为GPT即可\n\n三、拓展阅读分区表GPT和MBR有什么区别 - 知乎 (zhihu.com)\n","categories":["电脑相关"],"tags":["电脑维修"]},{"title":"解除学习通网页禁止粘贴","url":"/2022/12/21/%E8%A7%A3%E9%99%A4%E5%AD%A6%E4%B9%A0%E9%80%9A%E7%BD%91%E9%A1%B5%E7%A6%81%E6%AD%A2%E7%B2%98%E8%B4%B4/","content":"前言：应对一下比较水的期末考试或者日常作业就行啦，还是要好好学习滴。\n\n一、随便在输入框输一串数，比如123456。\n二、F12打开开发者工具，点设置图标。\n\n三、把这个选项勾上后先点右上角的叉，再点一次叉，关掉开发者工具。\n\n四、按F12重新打开开发者工具，点击这个按钮，接着将鼠标移动到刚才输入的123456上。\n\n\n五、点击后开发者工具一栏跳转到对应位置，双击打开内容，再双击点击123456的内容，就可以在这个地方粘贴了，粘贴后回车一下再按F12关闭开发者工具即可。\n","categories":["日常随笔"],"tags":["奇奇怪怪"]},{"title":"虚拟化和容器化渐进式入门","url":"/2022/11/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%92%8C%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/","content":"前言：为了了解120值班室的服务器的使用，在胡老师的学习目录帮助下前几天完成了一些关于linux和docker的入门学习，稍作修改贴到自己的博客上，供以后查找复习。\n1.安装虚拟机1.虚拟机Oracle VM VirtualBox安装和使用教程 \n2.安装虚拟机 VMware Workstation + 安装Linux操作系统 + 输出“Hello World”\n2.Linux入门（ubuntu方向）1.安装软件 apt和dpkg在ubuntu下，安装软件经常会用到一个命令就是“apt-get install”，这里的apt命令，其实是linux系统下一个通用的软件包管理器，使用该命令可以很方便的用来安装和卸载软件。\napt常用命令如下\nsudo apt-get install \t\t\t# package 安装包sudo apt-get reinstall \t\t\t# package - - reinstall 重新安装包sudo apt-get remove \t\t\t# package 删除包sudo apt-get remove --purge \t\t# package 删除包，包括删除配置文件等sudo apt-get autoremove --purge \t# package 删除包及其依赖的软件包配置文件等sudo apt-get update \t\t\t# 更新源sudo apt-get upgrade \t\t\t# 更新已安装的包sudo apt-get dist-upgrade \t\t# 升级系统\n\nsudo相当于Windows中的以管理员身份运行\ndpkg常用命令如下\ndpkg -i package.deb\t\t# 安装一个 Debian 软件包，如手动下载的文件。dpkg -c package.deb\t\t# 列出 package.deb 的内容。dpkg -I package.deb\t\t# 从 package.deb 中提取包信息。dpkg -r package\t\t\t# 移除一个已安装的包。dpkg -P package\t\t\t# 完全清除一个已安装的包。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。dpkg -L package\t\t\t# 列出 package 安装的所有文件清单。dpkg -s package\t\t\t# 显示已安装包的信息。dpkg -reconfigure package\t# 重新配制一个已经安装的包，如果它使用的是 debconf (debconf 为包安装提供了一个统一的配置界面)。dpkg -S package\t\t\t# 查看软件在哪个包里；\n\n简而言之，apt通过网络远程下载软件，dpkg安装管理本地的软件。\n2.apt安装vim和nano安装前先在 软件和更新 里，下载自选择清华镜像站https://mirrors.tuna.tsinghua.edu.cn \n使用命令  \nsudo apt-get install vim\nsudo apt-get install nano\n安装完成后使用 vim -v     nano -v 命令查看是否成功(v - version)\n在Windows使用cmd窗口控制虚拟机（免除来回切换的繁琐）：\n首先在主机Windows中通过安装ssh服务：win10通过powershell安装ssh服务 - 简书 (jianshu.com)\nip addr\t//linux中查看设备的ip的命令 可能会包括docker的\n\n在windows的cmd中\nssh -v\t//检查ssh是否安装成功ssh username@ip //输入虚拟机的username和ip绑定 然后会提示输入密码 就可以绑定了\n\n\n\n\n\n3.在vscode下载deb包在下载好的deb文件夹目录下使用\ndpkg -i vscode.deb\n注意安装完成后不会有提示，自己到软件里边找\nQ：然而安装搜狗拼音时候错误了..\n\n\n\n\n5.linux基础命令\nLinux基础命令大全 - 鸣の落夕 - 博客园 (cnblogs.com)\nsudo \t\t//管理员权限运行sudo do \t//取得管理员权限cd \t\t\t//切换目录cd ../ \t\t//切换到上级目录cd /        //切换到根目录cd~         //切换到touch \t\t//创建文件rm \t\t\t//删除文件mkdir\t\t//创建文件夹rm \t\t\t//删除文件夹cp a.txt b.txt\t\t\t //复制a文件且新命名为b文件mv 文件名或目录  目标目录   // 将前移动到后\n\n\n\n\n\n6.输出一个c程序\n编译前使用gcc -v查看自己的gcc版本\n可以直接touch test.c在终端创建c文件，然后再\ngcc -o test test.c./test\n\n\n\n编译c文件，就会生成编译好的软件了。（但是不知道为啥打不开）\n在vscode里边下载插件的时候，记得别用校园网，会出现xhr failed\n3.docker安装与使用​\t\n什么是Docker？看这一篇干货文章就够了！ - 知乎 (zhihu.com)\n[如何在 Ubuntu 20.04 上安装和使用 Docker - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/143156163#:~:text=Docker 在标准的 Ubuntu 20.04 软件源中可用，但是可能不是最新的版本。 我们将会从 Docker 的官方软件源中安装最新的,sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common)\nDocker常用命令大全（万字详解）Java-DevPress官方社区 (csdn.net)\n&#x2F;&#x2F;三篇文章分别对应docker 的介绍-安装-使用，遇到不会的可以查一查。\n1.docker基础命令docker pull imagenames\t//下载镜像docker rmi  -f imageID\t//删除id为...的镜像docker -v\t  //会出现版本号则为安装成功docker -ps -a //查看所有容器的状态docker -ps    //查看正在运行的容器docker images //查看本地的所有镜像systemctl start docker\t//启动dockersystemctl stop docker\t//停止docker：systemctl restart docker\t//重启dockersystemctl status docker\t\t//查看docker状态：systemctl enable docker\t\t//开机启动dockerdocker info\t\t\t\t\t//查看docker概要信息docker ‐‐help\t\t\t\t//查看docker帮助文档docker run -it centos /bin/bash \t//启动centos名容器ctrl+p+q\t\t\t\t\t\t\t//从当前容器中退出但不停止docker stop 容器ID或者容器名\t\t   //停止容器\n\n如果查看不了首先检查是不是没有取得超级管理员权限\n\n每个容器有一个id和image（镜像文件 也就是该容器用的什么系统）\n当误进行操作退出不了当前命令行或者命令模式时候，按&#x3D;&#x3D;Ctrl+C&#x3D;&#x3D;强制退出\n2.换源下载镜像cd /etc/docker\t//进入该文件夹 vim daemon.json\t//使用vim打开该文件\n\n\n\n添加或者更改镜像源文件，拉取镜像的时候自动按照从上到下的顺序来的\n由于是使用vim编辑器打开的 ，所以需要学习下vim的阴间操作…\nLinux Vim基本操作（文件的打开和编辑）完全攻略（有图有真相） (biancheng.net)\n\n使用   :q!   命令不保存退出vim\n最后要重启docker\nservice docker restart\n\n\n\n3.vscode在docker中使用官方使用文档：教程：开始在 Visual Studio Code 中使用 Docker 应用 | Microsoft Learn\n注意sudo\n\n80：80的映射端口后左侧failed，尝试用90:90\n\n问题解决，和端口号无关，是管理员权限的问题\nVSCode连接docker失败 Failed to connect. Is docker running?\n（第一种方法未解决  使用第二种方法解决了）\n\n后续两步有点看不懂了..\n4.docker拉取kaliKali Linux 是什么，你需要它吗？ - 知乎 (zhihu.com)\n 在docker中拉取并运行Kali Linux_\ndocker pull kalilinux/kali-rolling  //拉取kali镜像docker images\t\t\t\t\t\t//查看镜像iddocker run -it id /bin/bash\t\t\t//运行kali//进入kali后用help查看命令\n\n\n\n\n4.虚拟化平台ESXI入门ESXi 入门指南 - GXNAS博客\n其实何为esxi？最大的不同：esxi是本身为操作系统的虚拟机。 大多服务器上部署的就是这个esxi。在vmware官网也能下载。\n以后把电脑120的esxi玩明白了再来补充（不知不觉又给自己挖了个坑\n——写于11月20日晚23:36，黄色台灯光像阳光一样温暖着帘子里的小世界。\n\n","categories":["日常随笔"],"tags":["服务器","docker"]},{"title":"能ping通网址且dns无问题情况下浏览器无法访问","url":"/2022/11/19/%E8%83%BDping%E9%80%9A%E7%BD%91%E5%9D%80%E4%B8%94dns%E6%97%A0%E9%97%AE%E9%A2%98%E6%83%85%E5%86%B5%E4%B8%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/","content":"前言：\n今晚回来发现电脑又出现了浏览器不能访问的问题，测试了一下依旧能ping通，且dns无问题。就想起来用别人教的办法尝试了一下，果然回复了正常。\n解决办法：\n打开IE浏览器，在设置里把为LAN使用代理服务器选项给关掉。\n\n猜测可能是由于使用了梯子的缘故，不过挺好奇为什么会这样。个人以为使用代理后的的服务器节点或者说ip，应该是已经被这个选项给记录下来了，虽然本机的ip已经改变了，但是用代理后的ip应该还能上网不是？\n遂在网上搜了，不过几乎没有找到关于原因的比较好的解释。有一个我觉得比较合理，但还是从技术上有点不太理解是如何实现的：\n\n现在使用代理IP大都要先进行授权，常见的有“终端IP授权”，也就是绑定IP白名单。这种授权出现问题一般有三种原因：一是绑定的IP白名单不是“使用代理的终端的公网IP”，二是绑定的IP白名单不是固定出口IP，实时在变，三是绑定的IP白名单发生了改变。\n\n先挖个坑，希望以后能填上。\n——2022年11月19日 23:55   记于帘子后的小天地\n","categories":["电脑相关"],"tags":["电脑维修"]},{"title":"Hexo博客基础使用教程及美化","url":"/2022/11/14/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%8F%8A%E7%BE%8E%E5%8C%96/","content":"一. 基础使用1. 博客设置在blog文件下的_config.yml文件中能修改站点的基本信息。\n\n里边的基本所有东西都能自定义，可以参考hexo官方的说明文档：Hexo配置文档 | Hexo\n最主要的就是theme，deploy这两个。前者是自定义选择博客主题，后者是github的配置文件。\n2. 上传&#x2F;删除&#x2F;管理文章在blog文件夹下\nhexo new “test” #新建名为test的文章\n\n会发现在source的_posts文件夹中生成了一个名为test的markdown文件。需要用Markdown编辑器打开，写完后执行\n#可以将以下三条命令一起执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d  \n\n更新到自己的博客中，过两三分钟再刷新网页就能见到效果了。\n大多主流的博客都支持markdown语法，hexo也不例外。\n关于什么是Markdown？| Markdown 官方教程\n推荐一款好用的markdown编辑器：Typora\n（类使用打开word文件所需要的office工具）\n如果要编辑写过的博客，直接在打开对应的博客文件编辑，保存后再执行上述三条命令即可。删除的话直接删除对应博客文件，执行上述三条命令。\n注意：markdown编辑器是一款纯文本编辑器，不像office一样支持插入图片，故本地显示的图片不能使用绝对路径上传到网站中。\n解决Hexo博客插入图片的方法 - SChen1024 - 博客园 (cnblogs.com)\n二. 美化1. 更改主题官方提供了数百套主题供大家选择，大家可以点图片进入主题预览，点主题名的话就直接进入该主题的github仓库了。当然也可以去网上搜索自己喜欢的主题。\n在blog文件夹下进入themes文件夹，使用 git clone 链接命令把主题仓库拉到本地，会发现自动生成了一个文件夹。然后在blog文件夹里打开_config.yml文件，找到theme项，把后边的名字换成你下载的主题的文件夹名。保存后三步命令走。\n\n主题就更换成功了。\n每套主题有自己的设置，但都大同小异。接下来以我选择的Kaze主题为例演示一下。n2. 美化教程 (以Kaze主题为例)每个主题都有自己的使用文档，如我使用的这套Kaze主题也有官方文档：主题使用文档 (theme-kaze.top)\n另外也可以必应（不推荐百度）搜索 hexo 主题名这样，一般也能搜到其他个人的一些使用教程。\n在主题文件夹里找到_config.yml（这个文件名是配置项的通用名），打开。\n#------------------------# Header configtitle: 无知呦的博客 - wuzhiyou&#x27;s blogauthor: 无知呦# put the logo on the $&#123;blog_path&#125;/source/img/$&#123;picname&#125;.png or use urlslogo_img: https://s1.ax1x.com/2022/11/14/zAQwge.pngauthor_img: https://pic.imgdb.cn/item/6371fcfd16f2c2beb17d3bcb.jpgauthor_description: 承认无知，怀揣敬畏#------------------------# Navbar config#------------------------menus:  home: /  archive: /archives  tags: /tags  categories: /categories  about: /about  friends: /links  # artitalk: /shuoshuo # You can uncomment to add this routeabout:  description: description  social_links:    # - &#123; icon: icon, link: your link &#125;//以上为该文件的前半部分\n\ntittle是网站标题，author是作者，logo_img是网站logo，下边两个是头像和个人描述。\nmenus里边的设置是菜单栏导航，下边几个为具体的设置，拿其中两个举下例子：\n\n冒号前边的是你显示在菜单栏上的内容，如home可以改成首页，改变后并不影响点击后的跳转功能，只做显示使用。\n冒号后边的是你点击相应的文字后进入的目录。如点击about就进入source/about文件夹，当然默认是没有的，需要自己创建这个文件夹。当然也可以把/about改为/123456，这时候需要在source文件夹下创建名为123456的文件夹。其他设置项同理。\n\n创建完成后如何在about里显示自己的内容呢？需要新建一个名为index的markdown格式的文件，然后在源代码模式下将下边代码复制到文章开头：\n---title: Hexo博客基础使用教程及美化date: 2022-11-14 15:32:31tags: 博客---\n\n下边就可以写关于自己的个人介绍页面啦，当然也不是一定只能写个人介绍，改个标题写征婚启事也不是不可以。\n其他菜单栏导航的设置项也是一样。\n往下翻还有很多很多的设置，有些我也还没搞明白有什么用，就留作日后的自己和正在阅读此文的你，一起慢慢探索。\n三. 一些絮絮念\n当网站加载速度比较慢时，设置一张预加载的图片就显得非常必要了。\n\nlazyload:  enable: true  loadingImg: #一般在配置文件里边搜索loading就能找到，在网上找一张转圈圈的动图的链接，会在图片加载的时候显示。\n\n\n\n\n另外调试本地博客的话使用hexo s更快捷，直接运行本地的文件夹展示在4000端口上，无延迟。当此次调试完后再使用三步命令推到仓库即可。\n搭建这个博客到github的仓库后才知道原来还有一个gitee的平台，服务器是基于国内的，也有github pages的功能，访问速度比在github快不少。emmm….下次再说吧（逃\n\n","categories":["日常随笔"],"tags":["博客"]},{"title":"利用hexo框架和github免费搭建个人博客","url":"/2022/11/13/%E5%88%A9%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E5%92%8Cgithub%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"前言：本文基于本校一位很优秀的18级学长的博文Hexo博客安装配置方法（Win版本） - soarli博客，个人在安装过程中多次踩坑，算是把能遇到的错误信息全遇了一遍，故补充了一些原博文中没有出现的问题的解决方法，以及当时自己搭建时的一些困惑。感谢soarli学长的原创分享！\n一. 简介及前期准备1. 实现原理利用开源的hexo博客框架，以及github上免费的仓库和github pages功能（托管仓库静态界面），可以无技术成本的搭建一套属于自己的个人的博客。若自己有购买的域名，还可以绑定到自己的域名上。\n\nQ1：搭建的博客别人可以看到吗？\nA：可以 ，github pages会展示到公网上。\n\n\nQ2：自己没有购买的域名话别人怎么访问？\nA：只有创建特定的仓库名时github pages才可以展示静态界面到公网上，该仓库名就是别人访问你博客时的域名。格式均为xxx.github.io(正是因为过长所以很多人才会另买域名绑定上去)。\n\n2. 前期准备提示：以下软件的下载源均在境外，有条件的话建议使用境外ip下载。尽量避免使用校园网，可能会屏蔽掉很多下载源。\n如果node.js和git的介绍看不懂也没关系，只需要跟着步骤安装使用即可。\n1.注册github并创建仓库\n在repository里选择new新建，该仓库名称必须为 你的Github用户名. github.io\n如我的github用户名为wuzhiyou ,我创建的仓库名就必须为wuhziyou.github.io，如果有任何不一样后面将会出错。\n2.下载node.js\n介绍：node.js_百度百科 (baidu.com)\n官网下载地址：Download | Node.js (nodejs.org)\n3.下载git\n介绍：GIT（分布式版本控制系统）_百度百科 (baidu.com)\n官网下载地址：Git (git-scm.com)\n自行选择响应的系统版本下载安装，之后按照默认的提示一步步安装即可。都安装完成后在cmd命令里分别输入“node -v” “git -v”查看版本号，有内容显示即为安装成。\n安装完后在桌面右键Git Bash Here设置自己的用户名和邮箱，需要和github上的保持一致。\ngit config --global user.name &quot;你的GitHub用户名&quot;//执行完第一步后再执行第二步//引号中的内容替换为自己的信息git config --global user.email &quot;你的GitHub注册邮箱&quot;\n\n接着生成本地的ssh密钥，\n//还在git bash里边操作ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;\n\n出现暂停的时候直接回车，出现“y&#x2F;n”的时候输y再回车。\n大概共需要四次回车。\n\n题外话：关于什么是ssh？\nssh 是什么？怎么用？有哪些误区？_shengyin714959的博客-CSDN博客_ssh命令的作用   可以看这篇博文做基础的了解，当然不理解也并不影响后续操作。\n\n生成完后提示如下\n\n找到这个文件用记事本打开，全选，复制，在 SSH and GPG keys (github.com)里新建ssh keys，tittle可以随便填，将复制的内容全部粘贴到下边的key一栏，点击添加。\n之后应该会收到一封邮件，接着git bash，输入ssh git@github.com，看到“successfully authentic”的字样即绑定成功。\n二. 下载hexo框架到本地新建一个文件夹，作为以后存放博客文件的地方。\n在该文件夹里，按住shift右键鼠标，打开Powershell窗口，\nnpm install -g hexo-cli //安装hexo框架\n\n如果一直报错或者卡住不动 按Ctrl+c强制结束当前命令行 尝试使用\nnpm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm install hexo-cli –g //使用淘宝镜像下载安装\n\n安装时间会比较慢，安装完成后此时文件夹内不会有任何变化，需要还在该文件夹中进行命令\nhexo init blog //初始化博客\n\n初始化完成后提示“starting blogginh with hexo”即代表成功\n会发现该文件夹出现了一个blog的子文件夹，接着进入blog文件夹中，使用\nhexo s\t//开启hexo\n\n开启成功后进入127.0.0.1:4000 ，会发现网页和hello wordl，即开启成功。\nhexo默认使用的是4000端口，若开启失败，先检查自己的4000端口是不是被占用。或者尝试hexo修改默认端口号。\n此时的博客已经在本地搭建完成。\n三. 推送到公网1. 步骤找到在blog根目录里的_config.yml文件，用txt打开，翻到最后修改为并保存（原本只有deploy 其他需要自己加上）\ndeploy: type: git repo: 此处需要填写刚创建的github仓库的https地址 branch: master\n\n注意两点：\n\n后三行要比第一行多一个空格，表示缩进关系。\n冒号后一定要有个空格\n\n查看仓库https地址的方法如下：\n\n然后进入到blog文件夹里，同样使用powershell命令部署deployer插件\nnpm install hexo-deployer-git --save\n\n然后输入\n//三条需要一条条输入并回车hexo clean hexo g hexo d\t//输入完这条并回车后正常情况下会弹出github信息验证的窗口\n\n\n若无报错信息，则博客已成功推送到公网，可以通过http://xxxx.github.io或https://xxxx.github.io访问。\n2. 常见问题及解决方法笔者在推文章到博客的时候发现有时候即使配置正确也会出现FATAL的报错，而过了十分钟又没问题了。猜测可能是因为网络的问题（毕竟github服务器在境外嘛），故当尝试完以下几种解决报错的方法还不成功时稍安勿躁，等待十分钟可再重新尝试。另外，即使hexo d成功也存在延迟，网站大概要一两分钟才会更新显示。\n当执行hexo d时候常见的错误问题有三种：\n\n出现Available deployer plugins提示：说明deploy插件没装好，使用npm install --save hexo-deployer-git命令重新安装后再次尝试上述三条命令。\n\n出现红色的FATAL的提示 ，并报错error：spawn failed...，以下三步走能解决99%的问题：\n\n可能github登陆信息没有设置好，再分别执行git config --global user.name &quot;你的GitHub用户名&quot; 和git config --global user.email &quot;你的GitHub注册邮箱&quot;命令即可，接着再重新打开powershell重试以上三条命令。\n\n可能由于hexo d的过程中改变了.deploy_git文件夹下的一些内容，删除该文件夹，然后输入git config --global core.autocrlf false，接着重新执行以上三条命令。\n\n如果进行过以上两步都不行，改用ssh绑定仓库的地址，打开刚才的_config.yml文件，修改deploy中repo为git@github.com:yourname/yourname.github.io.git，或在仓库里直接找到ssh复制过来。保存后重新执行三条命令。（笔者的一些絮叨：想了解git http和ssh的区别可以看这篇文章git clone Https 还是 SSH ? ）\n\n\n\n\n在github的登录框中login无反应或login后无反应：2021年8月之后github为了安全性逐渐停止账号密码登陆仓库，改为Token登陆（相当于身份证编码）。设置自己的Token方法如博：启用并查看自己的Token\n\n\n四.（可选）绑定到自己的域名三步搞定Github Pages自定义域名 - 简书 (jianshu.com)\n1. 步骤1）首先在cmd中的ping命令到github pages页面获取ip地址\n\n2）然后在自己购买的域名解析中添加两条记录\n\n一条使用A记录&#x2F;AAAA记录，另一条使用CANME记录。具体区别可看常见的域名跳转的方法及原理 - 无知呦 - 博客园 (cnblogs.com)\nCANME记录中带主机www，另一条不带。\n\n3）然后打开自己创建的github仓库，在settings里找到Pages，拉到最下边，填上自己的域名\n\n4）最后要在自己blog的文件夹中打开source，新建一个CNAME.txt，在里边输入自己的域名，保存退出后删掉txt后缀。\n\n2. 常见问题及解决方法补充四个需要注意的点：\n\n添加解析记录时，如果github page页的ip是ipv4的，需要选择A解析，如果是ipv6的，则需要选择AAAA解析（笔者在2022.11.12日使用github page发现已经为ipv6了）\n添加两条解析记录但提示冲突：只在CANME主机记录填上www，A记录&#x2F;AAAA记录不填。\n绑定成功后访问博客却“与此站点的连接不安全”：在github-page里的Custom domain下边找到Enforce HTTPS （执行https加密协议）勾上即可。\nCNAME文件无后缀，不是TXT文件，不属于任何类型。\n长时间不登录如果出现推送失败，检查邮箱和账号以及ssh： 解决Please make sure you have the correct access rights and the repository exists\n\n至此，绑有你域名的博客已经被推送到公网，在任意设备均可直接访问你的博客。下篇我们再更新博客的基础操作和美化教程。\n——2022年11月14日15:17:37，完成于一个在Java课摸鱼的的阳光明媚且慵懒的下午。\n","categories":["日常随笔"],"tags":["博客"]}]